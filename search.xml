<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Emmet笔记</title>
      <link href="/2020/05/04/Emmet%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/05/04/Emmet%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>最近又需要经常的使用emmet写html，但是好长时间不写了，突然忘记了很多，虽然简单，但是很多东西长时间不用，又给忘记了；</p><p>因此决定要写一下笔记，好记性不如烂笔头，多记录一下，以后方便自己也多查查；</p><h3 id="嵌套运算符（Nesting-Operator）"><a href="#嵌套运算符（Nesting-Operator）" class="headerlink" title="嵌套运算符（Nesting Operator）"></a>嵌套运算符（Nesting Operator）</h3><h4 id="子代操作符（Child）：-gt"><a href="#子代操作符（Child）：-gt" class="headerlink" title="子代操作符（Child）：&gt;"></a>子代操作符（Child）：&gt;</h4><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 递进的层级关系 --></span>div>span>a<span class="token comment" spellcheck="true">&lt;!-- 生成如下html --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h4 id="兄弟操作符（Sibling）："><a href="#兄弟操作符（Sibling）：" class="headerlink" title="兄弟操作符（Sibling）：+"></a>兄弟操作符（Sibling）：+</h4><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 同层级关系 --></span>div>div+p<span class="token comment" spellcheck="true">&lt;!-- 生成如下html --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h4 id="返回上级操作符（Climb-up）："><a href="#返回上级操作符（Climb-up）：" class="headerlink" title="返回上级操作符（Climb-up）：^"></a>返回上级操作符（Climb-up）：^</h4><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 返回上层级 --></span>div>div+p^div<span class="token comment" spellcheck="true">&lt;!-- 生成如下html --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>div>div>div>p^^^div<span class="token comment" spellcheck="true">&lt;!-- 返回上三层 生成如下html --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h4 id="乘法操作符（Multiplication）："><a href="#乘法操作符（Multiplication）：" class="headerlink" title="乘法操作符（Multiplication）：*"></a>乘法操作符（Multiplication）：*</h4><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 指定标签生成数量 --></span>ul>li*5<span class="token comment" spellcheck="true">&lt;!-- 生成如下html --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></code></pre><h4 id="分组操作符（Grouping）："><a href="#分组操作符（Grouping）：" class="headerlink" title="分组操作符（Grouping）：()"></a>分组操作符（Grouping）：()</h4><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 组与层类比，需要使用（） --></span>(header>h1+div>p)+(main>p)+(footer>ul>li*3)<span class="token comment" spellcheck="true">&lt;!-- 生成如下html --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 例子 --></span>div>(header>ul>li*2>a)+footer>p<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h3 id="属性操作符（Attribute-Operators）"><a href="#属性操作符（Attribute-Operators）" class="headerlink" title="属性操作符（Attribute Operators）"></a>属性操作符（Attribute Operators）</h3><h4 id="ID-和-Class（ID-and-CLASS）"><a href="#ID-和-Class（ID-and-CLASS）" class="headerlink" title="ID 和 Class（ID and CLASS）"></a>ID 和 Class（ID and CLASS）</h4><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- ID用# Class用. 类似css样式和jQuery选择器 --></span>div#header>p.news*3<span class="token comment" spellcheck="true">&lt;!-- 生成如下html --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>news<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>news<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>news<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h4 id="定制属性（Custom-attributes）"><a href="#定制属性（Custom-attributes）" class="headerlink" title="定制属性（Custom attributes）"></a>定制属性（Custom attributes）</h4><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 属性使用[] --></span>a[target='' title='hello world']*3<span class="token comment" spellcheck="true">&lt;!-- 生成如下html --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hello world<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hello world<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hello world<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><h4 id="数值计算操作符（Item-numbering）："><a href="#数值计算操作符（Item-numbering）：" class="headerlink" title="数值计算操作符（Item numbering）：$"></a>数值计算操作符（Item numbering）：$</h4><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- $->指定数字 --></span>div>ul>li.item-$*3<span class="token comment" spellcheck="true">&lt;!-- 生成如下html --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item-1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item-2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item-3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--使用任意个$在数字前加任意个0--></span><span class="token comment" spellcheck="true">&lt;!-- ul>li.item$$*5 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item01<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item02<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item03<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item04<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item05<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--如果你想倒着写数值的话呢，可以在 $ 操作符后面再加上 @- --></span><span class="token comment" spellcheck="true">&lt;!-- ul>li.item$@-*5 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--指定开始的序号，在$后面加@N，N为开始的序号--></span><span class="token comment" spellcheck="true">&lt;!-- ul>li.item$@3*5 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item6<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item7<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></code></pre><h4 id="文本操作符（Text）："><a href="#文本操作符（Text）：" class="headerlink" title="文本操作符（Text）：{}"></a>文本操作符（Text）：{}</h4><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- a{Click me} --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Click me<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm包管理常用命令（不定时更新）</title>
      <link href="/2020/04/02/npm%E5%8C%85%E7%AE%A1%E7%90%86%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2020/04/02/npm%E5%8C%85%E7%AE%A1%E7%90%86%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>一段时间一段时间不做node项目，会忘记一些基本命令，甚至常用的npm包管理命令都会不太记得，好记性不如烂笔头，还是都赶紧记一记好了；</p><h3 id="npm命令"><a href="#npm命令" class="headerlink" title="npm命令"></a>npm命令</h3><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><h5 id="查看修改命令"><a href="#查看修改命令" class="headerlink" title="查看修改命令"></a>查看修改命令</h5><pre class=" language-shell"><code class="language-shell">$ npm config set <key> <value> [–global]# 获取npm配置$ npm config get <key># 获取npm当前镜像地址$ npm config get registory# 删除npm配置$ npm config delete <key># 删除代理设置$ npm config delete proxy# 在编辑器中打开npm配置文件$ npm config edit</code></pre><h5 id="修改镜像地址"><a href="#修改镜像地址" class="headerlink" title="修改镜像地址"></a>修改镜像地址</h5><pre class=" language-shell"><code class="language-shell">#查看npm config get registry#修改npm config set registry http://registry.npm.taobao.org  //将registry设置为淘宝镜像</code></pre><h4 id="升级"><a href="#升级" class="headerlink" title="升级"></a>升级</h4><pre class=" language-shell"><code class="language-shell">$ npm -g install npm ( 最新稳定版 ) 或$ npm -g install npm@2.9.1 ( 指定版本 )## 其他模块$ npm update [-g] [<name> [<name> … ]]#更新指定name列表中的模块。-g参数更新全局安装的模块。#如果没有指定name，且不是在某个模块内，会更新当前目录依赖的所有包都会被更新（包括全局和模块内）；如果当前目录在某个模块目录内，会更新该模块依赖的模块，所以不指定name直接运行npm update时，最好在某个模块内运行，以免更新到其他不想更新的模块。</code></pre><h4 id="发布项目到npm"><a href="#发布项目到npm" class="headerlink" title="发布项目到npm"></a>发布项目到npm</h4><pre class=" language-shell"><code class="language-shell"># 1. 在官网注册npm账号# 2. 用户验证，命令行执行$ npm adduser# 3. 发布模块，在模块的根文件夹执行$ npm publish# 4. 更新版本# 如果是git库时，会为新版本号创建一条提交信息，package版本号会自动递增。$ npm version 0.0.4$ npm publish</code></pre><h4 id="创建package-json文件"><a href="#创建package-json文件" class="headerlink" title="创建package.json文件"></a>创建package.json文件</h4><pre class=" language-shell"><code class="language-shell">$ npm init</code></pre><h4 id="安装模块"><a href="#安装模块" class="headerlink" title="安装模块"></a>安装模块</h4><pre class=" language-shell"><code class="language-shell">$ npm install <name> [–save|–save-dev|–save-optional]# 安装并更新package.json中的版本配置# 添加–save 参数安装的模块的名字及其版本信息会出现在package.json的dependencies选项中# 添加–save-dev 参数安装的模块的名字及其版本信息会出现在package.json的devDependencies选项中# 添加–save-optional 参数安装的模块的名字及其版本信息会出现在package.json的optionalDependencies选项中</code></pre><h4 id="删除模块"><a href="#删除模块" class="headerlink" title="删除模块"></a>删除模块</h4><pre class=" language-shell"><code class="language-shell">$ npm rm <name>$ npm r <name>$ npm uninstall <name>$ npm un <name></code></pre><h4 id="更新模块"><a href="#更新模块" class="headerlink" title="更新模块"></a>更新模块</h4><pre class=" language-shell"><code class="language-shell">$ npm update [-g] [<name> [<name> … ]]# 更新指定name列表中的模块。-g参数更新全局安装的模块。</code></pre><h4 id="执行脚本"><a href="#执行脚本" class="headerlink" title="执行脚本"></a>执行脚本</h4><pre class=" language-shell"><code class="language-shell">$ npm run []</code></pre><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h4 id="可选参数说明"><a href="#可选参数说明" class="headerlink" title="可选参数说明"></a>可选参数说明</h4><pre class=" language-shell"><code class="language-shell">--save // 将模块依赖关系写入到package.json文件的dependencies参数中-dev // 将模块依赖关系写入到package.json文件的devDependencies参数中-g // 表示全局@+version // 安装指定版本</code></pre><h4 id="参考网站"><a href="#参考网站" class="headerlink" title="参考网站"></a>参考网站</h4><p><a href="https://www.jianshu.com/u/9e41392f1b7b" target="_blank" rel="noopener">Phoenix_Black</a></p><p><a href="https://www.npmjs.com.cn/cli/npm/" target="_blank" rel="noopener">NPM中文网</a></p><p><a href="https://www.runoob.com/nodejs/nodejs-npm.html" target="_blank" rel="noopener">菜鸟教程</a></p>]]></content>
      
      
      <categories>
          
          <category> node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Swagger常用注解</title>
      <link href="/2020/02/24/Swagger%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/"/>
      <url>/2020/02/24/Swagger%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>swagger2可以将项目的所有接口在一个UI界面上展示出来。</p><p>同时表明了这个接口的用途：</p><p>接口需要的参数是什么类型参数是否必须，输入了参数可以直接测试接口类似postman的功能，会显示接口请求的状态码和返回的数据结构。</p><h3 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h3><h4 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h4><table><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td><a href="https://github.com/swagger-api/swagger-core/wiki/Annotations#api" target="_blank" rel="noopener">@Api</a></td><td>将一个类标记为Swagger资源。</td></tr><tr><td><a href="https://github.com/swagger-api/swagger-core/wiki/Annotations#apiimplicitparam-apiimplicitparams" target="_blank" rel="noopener">@ApiImplicitParam</a></td><td>表示API操作中的单个参数。</td></tr><tr><td><a href="https://github.com/swagger-api/swagger-core/wiki/Annotations#apiimplicitparam-apiimplicitparams" target="_blank" rel="noopener">@ApiImplicitParams</a></td><td>包装器，允许多个ApiImplicitParam对象的列表。</td></tr><tr><td><a href="https://github.com/swagger-api/swagger-core/wiki/Annotations#apimodel" target="_blank" rel="noopener">@ApiModel</a></td><td>提供有关Swagger模型的其他信息。</td></tr><tr><td><a href="https://github.com/swagger-api/swagger-core/wiki/Annotations#apimodelproperty" target="_blank" rel="noopener">@ApiModelProperty</a></td><td>添加和操作模型属性的数据。</td></tr><tr><td><a href="https://github.com/swagger-api/swagger-core/wiki/Annotations#apioperation" target="_blank" rel="noopener">@ApiOperation</a></td><td>描述针对特定路径的操作或通常为HTTP方法。</td></tr><tr><td><a href="https://github.com/swagger-api/swagger-core/wiki/Annotations#apiparam" target="_blank" rel="noopener">@ApiParam</a></td><td>为操作参数添加其他元数据。</td></tr><tr><td><a href="https://github.com/swagger-api/swagger-core/wiki/Annotations#apiresponses-apiresponse" target="_blank" rel="noopener">@ApiResponse</a></td><td>描述操作的可能响应。</td></tr><tr><td><a href="https://github.com/swagger-api/swagger-core/wiki/Annotations#apiresponses-apiresponse" target="_blank" rel="noopener">@ApiResponses</a></td><td>包装器，允许多个ApiResponse对象的列表。</td></tr><tr><td><a href="https://github.com/swagger-api/swagger-core/wiki/Annotations#authorization-authorizationscope" target="_blank" rel="noopener">@Authorization</a></td><td>声明要在资源或操作上使用的授权方案。</td></tr><tr><td><a href="https://github.com/swagger-api/swagger-core/wiki/Annotations#authorization-authorizationscope" target="_blank" rel="noopener">@AuthorizationScope</a></td><td>描述OAuth2授权范围。</td></tr><tr><td><a href="https://github.com/swagger-api/swagger-core/wiki/Annotations-1.5.X#responseHeader" target="_blank" rel="noopener">@ResponseHeader</a></td><td>表示可以作为响应的一部分提供的标头。</td></tr></tbody></table><p>最新版本还添加了许多注释，用于在Swagger定义级别添加扩展和元数据：</p><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://github.com/swagger-api/swagger-core/wiki/Annotations-1.5.X#swaggerdefinition" target="_blank" rel="noopener">@SwaggerDefinition</a></td><td>要添加到生成的Swagger定义的定义级别属性</td></tr><tr><td><a href="https://github.com/swagger-api/swagger-core/wiki/Annotations-1.5.X#info" target="_blank" rel="noopener">@Info</a></td><td>Swagger定义的常规元数据</td></tr><tr><td><a href="https://github.com/swagger-api/swagger-core/wiki/Annotations-1.5.X#contact" target="_blank" rel="noopener">@Contact</a></td><td>描述Swagger定义联系人的属性</td></tr><tr><td><a href="https://github.com/swagger-api/swagger-core/wiki/Annotations-1.5.X#license" target="_blank" rel="noopener">@License</a></td><td>描述Swagger定义的许可证的属性</td></tr><tr><td><a href="https://github.com/swagger-api/swagger-core/wiki/Annotations-1.5.X#extension" target="_blank" rel="noopener">@Extension</a></td><td>添加具有包含属性的扩展</td></tr><tr><td><a href="https://github.com/swagger-api/swagger-core/wiki/Annotations-1.5.X#extensionproperty" target="_blank" rel="noopener">@ExtensionProperty</a></td><td>将自定义属性添加到扩展</td></tr></tbody></table><h4 id="资源API声明"><a href="#资源API声明" class="headerlink" title="资源API声明"></a>资源API声明</h4><p>@API</p><p>在Swagger 2.0中，资源已被标签替换，这会影响<code>@Api</code>注释。它不再用于声明资源，现在用于为其下定义的所有操作应用定义。</p><p>JAX-RS的用法是：</p><pre class=" language-java"><code class="language-java"></code></pre>]]></content>
      
      
      <categories>
          
          <category> API </category>
          
          <category> Swagger </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swagger </tag>
            
            <tag> API </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HomeBrew常用命令集</title>
      <link href="/2020/01/16/HomeBrew%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E9%9B%86/"/>
      <url>/2020/01/16/HomeBrew%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<p>最近将生成力工具大量迁移到Mac上,在安装软件部分,很多人都推荐了homebrew,因此我也快速的用上.</p><p>在使用过程中,出现了很多的问题,因此我需要对这些常用的命令进行记录一下;</p><p>以下是这个工具的常用命令:</p>]]></content>
      
      
      <categories>
          
          <category> homebrew </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
            <tag> homebrew </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AXURE快捷操作</title>
      <link href="/2019/12/12/AXURE%E5%BF%AB%E6%8D%B7%E6%93%8D%E4%BD%9C/"/>
      <url>/2019/12/12/AXURE%E5%BF%AB%E6%8D%B7%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p>之前一直忙于项目或者一些事情，然后欠账太多，导致今年都没有认真记过什么东西；</p><p>最近新项目开展，本来是个技术，但奈何人手不足，只能顶缸一下需求调研，以及软件设计规划的活了；</p><p>再由于之前，没有充分调研，结果我用<strong>lunacy类sketch的软件做好设计稿</strong>，以为只用给组内的开发人员看就可以了；</p><p>结果要给客户做交互演示，<strong>懵了</strong>；</p><p>好吧，赶紧调转过来，使用业内广泛使用的axure来做交互，还好<strong>axure官方开发了sketch插件能够将sketch文件复制到axure里面</strong>；</p><p>当然以上<strong>操作只支持Mac，win下面因为没有sketch</strong>，所以自然也不支持；</p><p>废话不说了，直接上快捷键</p><table><thead><tr><th><strong>常用</strong></th><th><strong>Windows</strong></th><th><strong>OS X</strong></th></tr></thead><tbody><tr><td>剪切</td><td>CTRL + X</td><td>CMD + X</td></tr><tr><td>复制</td><td>CTRL + C</td><td>CMD + C</td></tr><tr><td>粘贴</td><td>CTRL + V</td><td>CMD + V</td></tr><tr><td>重复</td><td>CTRL + D</td><td>CMD + D</td></tr><tr><td>撤销</td><td>CTRL + Z</td><td>CMD + Z</td></tr><tr><td>重做</td><td>CTRL + Y</td><td>CMD + Y</td></tr><tr><td>全选</td><td>CTRL + A</td><td>CMD + A</td></tr><tr><td>打开</td><td>CTRL + O</td><td>CMD + O</td></tr><tr><td>新建</td><td>CTRL + N</td><td>CMD + N</td></tr><tr><td>保存</td><td>CTRL + S</td><td>CMD + S</td></tr><tr><td>另存</td><td>CTRL + SHIFT + S</td><td>CMD + SHIFT + S</td></tr><tr><td>退出</td><td>ALT + F4</td><td>CMD + Q</td></tr><tr><td>打印</td><td>CTRL + P</td><td>CMD + P</td></tr><tr><td>查找</td><td>CTRL + F</td><td>CMD + F</td></tr><tr><td>替换</td><td>CTRL + H</td><td>CMD + R</td></tr><tr><td>帮助</td><td>F1</td><td>F1</td></tr><tr><td>拼写检查</td><td>F7</td><td>–</td></tr><tr><td></td><td></td><td></td></tr><tr><td><strong>页面/树</strong></td><td><strong>Windows</strong></td><td><strong>OS X</strong></td></tr><tr><td>新建页面</td><td>CTRL + ENTER</td><td>CMD + ENTER</td></tr><tr><td>新建文件夹</td><td>CTRL + SHIFT + ENTER</td><td>CMD + SHIFT + ENTER</td></tr><tr><td>缩进选中项</td><td>TAB</td><td>TAB</td></tr><tr><td>减少缩进选中项</td><td>SHIFT + TAB</td><td>SHIFT + TAB</td></tr><tr><td>向上移动选中项</td><td>CTRL + ↑</td><td>CMD + ↑</td></tr><tr><td>向下移动选中项</td><td>CTRL + ↓</td><td>CMD + ↓</td></tr><tr><td>查询</td><td>输入即查询</td><td>输入即查询</td></tr><tr><td>搜索栏移动到结果</td><td>↓</td><td>↓</td></tr><tr><td>从结果返回搜索栏</td><td>SHIFT + TAB</td><td>SHIFT + TAB</td></tr><tr><td>退出查询</td><td>ESC</td><td>ESC</td></tr><tr><td></td><td></td><td></td></tr><tr><td><strong>发布</strong></td><td><strong>Windows</strong></td><td><strong>OS X</strong></td></tr><tr><td>预览</td><td>F5</td><td>CMD + SHIFT + P</td></tr><tr><td>预览选项</td><td>CTRL + F5</td><td>CMD + SHIFT + OPT + P</td></tr><tr><td>共享</td><td>F6</td><td>CMD + SHIFT + A</td></tr><tr><td>生成HTML</td><td>F8</td><td>CMD + SHIFT + O</td></tr><tr><td>重新生成当前页面</td><td>CTRL + F8</td><td>CMD + SHIFT + I</td></tr><tr><td>生成说明文档</td><td>F9</td><td>CMD + SHIFT + D</td></tr><tr><td></td><td></td><td></td></tr><tr><td><strong>工具</strong></td><td><strong>Windows</strong></td><td><strong>OS X</strong></td></tr><tr><td>相交选中</td><td>CTRL + 1</td><td>CMD + 1</td></tr><tr><td>包含选中</td><td>CTRL + 2</td><td>CMD + 2</td></tr><tr><td>连接线</td><td>CTRL + 3</td><td>CMD + 3</td></tr><tr><td>钢笔</td><td>CTRL + 4</td><td>CMD + 4</td></tr><tr><td>边界点</td><td>CTRL + 5</td><td>CMD + 5</td></tr><tr><td>切割</td><td>CTRL + 6</td><td>CMD + 6</td></tr><tr><td>裁剪</td><td>CTRL + 7</td><td>CMD + 7</td></tr><tr><td>连接点</td><td>CTRL + 8</td><td>CMD + 8</td></tr><tr><td>格式刷</td><td>CTRL + 9</td><td>CMD + 9</td></tr><tr><td></td><td></td><td></td></tr><tr><td><strong>画布</strong></td><td><strong>Windows</strong></td><td><strong>OS X</strong></td></tr><tr><td>向后切换选项卡</td><td>CTRL + TAB</td><td>CTRL + TAB</td></tr><tr><td>向前切换选项卡</td><td>CTRL + SHIFT + TAB</td><td>CTRL + SHIFT + TAB</td></tr><tr><td>左右移动选项卡</td><td>CTRL + ALT + ←/→</td><td>CMD + ALT + ←/→</td></tr><tr><td>选择上一个元件</td><td>CTRL + SHIFT + 9</td><td>CMD + SHIFT + 9</td></tr><tr><td>选择下一个元件</td><td>CTRL + SHIFT + 0</td><td>CMD + SHIFT + 0</td></tr><tr><td>关闭页面/母版</td><td>CTRL + W</td><td>CMD + W</td></tr><tr><td>关闭全部选项卡</td><td>CTRL + SHIFT + W</td><td>CMD + SHIFT + W</td></tr><tr><td>向上翻页</td><td>PAGE UP</td><td>PAGE UP</td></tr><tr><td>向下翻页</td><td>PAGE DOWN</td><td>PAGE DOWN</td></tr><tr><td>向左翻页</td><td>SHIFT + PAGE UP</td><td>SHIFT + PAGE UP</td></tr><tr><td>向右翻页</td><td>SHIFT + PAGE DOWN</td><td>SHIFT + PAGE DOWN</td></tr><tr><td>向上滚动</td><td>鼠标滚轮向上</td><td>鼠标滚轮向上</td></tr><tr><td>向下滚动</td><td>鼠标滚轮向下</td><td>鼠标滚轮向下</td></tr><tr><td>向左滚动</td><td>SHIFT + 鼠标滚轮向上</td><td>SHIFT + 鼠标滚轮向上</td></tr><tr><td>向右滚动</td><td>SHIFT + 鼠标滚轮向下</td><td>SHIFT + 鼠标滚轮向下</td></tr><tr><td>缩小比例</td><td>CTRL + +</td><td>CMD + +</td></tr><tr><td>放大比例</td><td>CTRL + -</td><td>CMD + -</td></tr><tr><td>还原比例</td><td>CTRL + 0</td><td>CMD + 0</td></tr><tr><td>拖动画布</td><td>按住空格拖动</td><td>按住空格拖动</td></tr><tr><td>暂时隐藏遮罩与网格</td><td>按住 [CTRL] + [SPACE]</td><td>按住[CTRL] + [SPACE]</td></tr><tr><td>显示/隐藏网格</td><td>CTRL + ‘</td><td>CMD + ‘</td></tr><tr><td>显示/隐藏全局辅助线</td><td>CTRL + .</td><td>CMD + .</td></tr><tr><td>显示/隐藏页面辅助线</td><td>CTRL + ,</td><td>CMD + ,</td></tr><tr><td></td><td></td><td></td></tr><tr><td><strong>面板</strong></td><td><strong>Windows</strong></td><td><strong>OS X</strong></td></tr><tr><td>左侧功能面板开关</td><td>CTRL + ALT+ [</td><td>CMD + ALT + [</td></tr><tr><td>右侧功能面板开关</td><td>CTRL + ALT + ]</td><td>CMD + ALT + ]</td></tr><tr><td></td><td></td><td></td></tr><tr><td><strong>账户</strong></td><td><strong>Windows</strong></td><td><strong>OS X</strong></td></tr><tr><td>登录</td><td>CTRL + F12</td><td>CMD + F12</td></tr><tr><td></td><td></td><td></td></tr><tr><td><strong>编辑</strong></td><td><strong>Windows</strong></td><td><strong>OS X</strong></td></tr><tr><td>组合</td><td>CTRL + G</td><td>CMD + G</td></tr><tr><td>取消组合</td><td>CTRL + SHIFT + G</td><td>CMD + SHIFT + G</td></tr><tr><td>上移一层</td><td>CTRL + ]</td><td>CMD + ]</td></tr><tr><td>下移一层</td><td>CTRL + [</td><td>CMD + [</td></tr><tr><td>置于顶层</td><td>CTRL + SHIFT + ]</td><td>CMD + SHIFT + ]</td></tr><tr><td>置于底层</td><td>CTRL + SHIFT + [</td><td>CMD + SHIFT + [</td></tr><tr><td>元件左侧对齐</td><td>CTRL + ALT + L</td><td>CMD + OPT + L</td></tr><tr><td>元件水平居中对齐</td><td>CTRL + ALT + C</td><td>CMD + OPT + C</td></tr><tr><td>元件右侧对齐</td><td>CTRL + ALT + R</td><td>CMD + OPT + R</td></tr><tr><td>元件顶部对齐</td><td>CTRL + ALT + T</td><td>CMD + OPT + T</td></tr><tr><td>元件垂直居中对齐</td><td>CTRL + ALT + M</td><td>CMD + OPT + M</td></tr><tr><td>元件底部对齐</td><td>CTRL + ALT + B</td><td>CMD + OPT + B</td></tr><tr><td>文本左侧对齐</td><td>CTRL + SHIFT + L</td><td>CMD + SHIFT + L</td></tr><tr><td>文本水平居中对齐</td><td>CTRL + SHIFT + C</td><td>CMD + SHIFT + C</td></tr><tr><td>文本右侧对齐</td><td>CTRL + SHIFT + R</td><td>CMD + SHIFT + ALT + R</td></tr><tr><td>水平分布</td><td>CTRL + SHIFT + H</td><td>CMD + SHIFT + H</td></tr><tr><td>垂直分布</td><td>CTRL + SHIFT + U</td><td>CMD + SHIFT + U</td></tr><tr><td>转换为动态面板</td><td>CTRL + SHIFT + ALT + D</td><td>CMD + SHIFT + OPT + D</td></tr><tr><td>转换为母版</td><td>CTRL + SHIFT + ALT + M</td><td>CMD + SHIFT + OPT + M</td></tr><tr><td>锁定位置与尺寸</td><td>CTRL + K</td><td>CMD + K</td></tr><tr><td>解锁位置与尺寸</td><td>CTRL + SHIFT + K</td><td>CMD + SHIFT + K</td></tr><tr><td>编辑位置与尺寸</td><td>CTRL + L</td><td>CMD + L</td></tr><tr><td>保持宽高比例</td><td>SHIFT + ENTER</td><td>SHIFT + ENTER</td></tr><tr><td>切割图像</td><td>CTRL + SHIFT + ALT + S</td><td>CMD + SHIFT + OPT + S</td></tr><tr><td>插入文本链接</td><td>CTRL + SHIFT + ALT + H</td><td>CMD + SHIFT + OPT + H</td></tr><tr><td>复制选中元件内容</td><td>CTRL + SHIFT + ALT + C</td><td>CMD + SHIFT + OPT + C</td></tr><tr><td>粘贴为纯文本</td><td>CTRL + SHIFT + V</td><td>CMD + SHIFT + V</td></tr><tr><td>粘贴包含锁定元件</td><td>CTRL + ALT + V</td><td>CMD + OPT + V</td></tr><tr><td>从所有视图删除</td><td>CTRL + DEL</td><td>CMD + DEL</td></tr><tr><td>焦点进入下个元件</td><td>CTRL + 0</td><td>CMD + SHIFT + 0</td></tr><tr><td>焦点进入上个元件</td><td>CTRL + 9</td><td>CMD + SHIFT + 9</td></tr><tr><td>增大脚注编号</td><td>CTRL + J</td><td>CMD + J</td></tr><tr><td>减小脚注编号</td><td>CTRL + SHIFT + J</td><td>CMD + SHIFT + J</td></tr><tr><td>增大字体尺寸</td><td>CTRL + SHIFT + &lt;</td><td>CMD + SHIFT + &lt;</td></tr><tr><td>缩小字体尺寸</td><td>CTRL + SHIFT + &gt;</td><td>CMD + SHIFT + &gt;</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 快捷键 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 快捷键 </tag>
            
            <tag> 软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>刻意练习</title>
      <link href="/2019/04/23/%E5%88%BB%E6%84%8F%E7%BB%83%E4%B9%A0/"/>
      <url>/2019/04/23/%E5%88%BB%E6%84%8F%E7%BB%83%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h3 id="我与本书的一些接触"><a href="#我与本书的一些接触" class="headerlink" title="我与本书的一些接触"></a>我与本书的一些接触</h3><p>在早之前就了解过学习三件套，但在看完学习之道以后，就有些没时间来阅读下一本，刻意练习；</p><p>在我最早的认识里面，我第一个听到关于刻意练习这个词汇最先想到的会是<strong>一万小时理论</strong>；</p><p>几乎在我听到有关于练习的套路的都是围绕着这一万小时理论来进行展开的；</p><p>随着年纪的增大，我对于这个理解上面，增加了些自己的理解，就是，<strong>有效的练习，才能在一万小时内达到专家的级别；</strong></p><p>同时在阅读本书的时候，也不禁对于一些小观点所着迷，例如下面这句话：</p><blockquote><p>一旦你已经达到了这种<strong>令你满意的技能水平</strong>，而且能做到自然而然地表现出你的水平，无论是开车、打网球还是烘焙饼干，<strong>你就已经不再进步了</strong>。</p></blockquote><p>这让我想到的是，很多时候，人的进步通常是改变过去对于自己发现问题的不满，不然没有改进的动力；</p><p>这段话以后，作者提出了另外的一个观点让我深以为然；</p><p>那就如果长时间的练习能代表一切的话，我们是否可以理解：一个开车20年的人一定比开车5年的人开得更好？</p><p>记得前两年有过这么一个节目介绍说，一个在日本的华裔，因为被安排清扫类的工作，最后成了一个清洁的匠人，让我觉得很不可思议，因为通常而言，在中国一个扫大街的大妈是无论如何也做不到这样的；</p><p>这也侧面佐证了作者的观点，不是时间越久，技术就会越好的；</p><blockquote><p>有目的的练习VS天真的练习</p></blockquote><h3 id="如何定义有目的的练习？"><a href="#如何定义有目的的练习？" class="headerlink" title="如何定义有目的的练习？"></a>如何定义有目的的练习？</h3><ol><li>有目的的练习具有定义明确的特定目标</li></ol><p>在针对一些练习的时候，只有连续三次的成功才能算做练习通过；</p><blockquote><p>　有目的的练习，主要是“积小胜为大胜”“积跬步以至千里”，最终达到长期目标。</p></blockquote><ol start="2"><li>有目的的练习具有定义明确的特定目标</li><li>有目的的练习包含反馈</li><li>有目的的练习包含反馈</li></ol><h3 id="遇到瓶颈怎么办？"><a href="#遇到瓶颈怎么办？" class="headerlink" title="遇到瓶颈怎么办？"></a>遇到瓶颈怎么办？</h3><blockquote><p>试着做不同的事情，而不是更难的事情；</p></blockquote><p>我想我总是搞歪了方向，在此之前我一直都是这样，遇到瓶颈，我觉得，我应该是没有尝试更困难的事情；</p><p>所以每次突破瓶颈的时候，我都会选择更难的事情，但最后发现，从事不一样的事情的时候，也是能有很好的收获，不必要所有的关注力都围绕着我要突破的瓶颈上；</p>]]></content>
      
      
      <categories>
          
          <category> 书籍 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 书籍 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>认识深度学习（二）卷积神经网络</title>
      <link href="/2019/03/25/%E8%AE%A4%E8%AF%86%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
      <url>/2019/03/25/%E8%AE%A4%E8%AF%86%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<p>学习一段时间的深度学习以后，并且对于深度学习中的深度以及学习有了一定的概念以后，我们就来实战一下。</p><p>那么究竟如何将复杂的数学模型转换为可编程的程序呢？</p><p>就让我们来看看深度学习中的一个概念卷积神经网络；</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 深度学习 </tag>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker归纳</title>
      <link href="/2019/03/05/Docker%E5%BD%92%E7%BA%B3/"/>
      <url>/2019/03/05/Docker%E5%BD%92%E7%BA%B3/</url>
      
        <content type="html"><![CDATA[<p>学习和使用docker已经有一段时间了，可是一直没有时间进行归纳总结；</p><p>想来最近项目稍闲，所以赶紧整理一下之前学到，并运用的一些docker知识，并作为后面自己的知识库进行运用；</p><h3 id="Docker的来由"><a href="#Docker的来由" class="headerlink" title="Docker的来由"></a>Docker的来由</h3><p>任何的软件由来，都是由一个需求而得来的，如果这个需求是个特别痛点的需求，那么解决这个需求的软件就会发展得很好；</p><p>那么docker究竟解决了用户什么样的痛点需求呢？</p><blockquote><p>Docker 的出现一定是因为目前的后端在开发和运维阶段确实需要一种虚拟化技术解决开发环境和生产环境环境一致的问题。</p><p>通过 Docker 我们可以将程序运行的环境也纳入到版本控制中，排除因为环境造成不同运行结果的可能。</p></blockquote><p>但是上述需求虽然推动了虚拟化技术的产生，但是如果没有合适的底层技术支撑，那么我们仍然得不到一个完美的产品。</p><p>因为之前学过了部分的Docker知识，但是一段时间不使用，有点生疏了，所以特地记录到博客中，至于刚才所说的Docker的一些核心技术和实现原理，留待后面进行分析了；</p><h3 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>Dockerfile是由一系列命令和参数构成的脚本，<strong>这些命令应用于基础镜像并最终创建一个新的镜像。</strong></p><p><strong>它们简化了从头到尾的流程并极大的简化了部署工作。</strong></p><p>Dockerfile从FROM命令开始，紧接着跟随者各种方法，命令和参数。其产出为一个新的可以用于创建容器的镜像。</p><p><strong>Dockerfile语法由两部分构成，注释和命令+参数</strong></p><h4 id="Dockerfile命令"><a href="#Dockerfile命令" class="headerlink" title="Dockerfile命令"></a>Dockerfile命令</h4><p>Dockerfile有十几条命令可用于构建镜像，下文将简略介绍这些命令。</p><h5 id="ADD"><a href="#ADD" class="headerlink" title="ADD"></a>ADD</h5><p>ADD命令有两个参数，源和目标。它的基本作用是从源系统的文件系统上复制文件到目标容器的文件系统。如果源是一个URL，那该URL的内容将被下载并复制到容器中。</p><pre class=" language-powershell"><code class="language-powershell">Usage: ADD <span class="token namespace">[source directory or URL]</span> <span class="token namespace">[destination directory]</span>ADD <span class="token operator">/</span>my_app_folder <span class="token operator">/</span>my_app_folder</code></pre>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 容器 </tag>
            
            <tag> docker </tag>
            
            <tag> image </tag>
            
            <tag> container </tag>
            
            <tag> swarm </tag>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>认识深度学习（一）</title>
      <link href="/2019/02/28/%E8%AE%A4%E8%AF%86%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2019/02/28/%E8%AE%A4%E8%AF%86%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="基础认识"><a href="#基础认识" class="headerlink" title="基础认识"></a>基础认识</h3><p>首先编程语言上面，我不得不说一下，我本人是java编程起家的，最早入门是C语言，然后自学了java；</p><p>直到自己感兴趣想学习一下深度学习的时候，发现python用起来很舒服，仅此而已，对于编程语言来说，合适即是真理；</p><p>只要对编程模块，数据结构这些能够有个好的理解，那么相信你不管换什么编程语言，都可以快速适应，只是熟练不熟练罢了；</p><p>不过真到自己换了python以后，发现简单，编写速度快，可能因为字符少，要求没有java那么多，顿时觉得同样的逻辑，python用的代码量更少；</p><p>python的库强大到爆炸了，我原来用java就没有那么明显的感觉…</p><p>当然不反对继续使用java，或者其他语言，反正都是用，看你怎么用了，只是想尝试一下新鲜的东西:smile:</p><p>闲话就不多扯了，开始上菜了；</p><h5 id="概念了解"><a href="#概念了解" class="headerlink" title="概念了解"></a>概念了解</h5><p>人工智能、机器学习、深度学习，他们之间的关系是什么样的呢？</p><p><img src="\img\articlePicture\learningRelationAndProgress.png" alt="三者的关系"></p><p>那么什么又是深度学习呢？</p><p>深度学习的概念源于人工神经网络的研究。</p><p>含多隐层的多层感知器就是一种深度学习结构。</p><p>深度学习通过组合低层特征形成更加抽象的高层表示属性类别或特征，以发现数据的分布式特征表示。</p><p>以上的概念来源于百度，但是这样的认识肯定很多人是一头雾水的，包括我自己，也不明白，因为有太多的专业词汇，我们理解起来略有些费劲，或者说，我们没有理解透彻；</p><p>那我们尝试着以另一种概念解读：</p><p>我的理解是，<strong>深度学习结构</strong>是模拟<strong>人脑神经元</strong>的一种分类问题的归纳，以期达到实现，让机器自己学会去实现分类，或者预测；</p><p>我这里尝试通过使用来定义了深度学习；</p><p>其实做数学建模的同学都知道，数学建模就是为了通过一堆数据，进行人为的评判，然后结合算法和数学公式再推导出一个新的公式，而这个公式就是数学建立的一个模型；</p><p>而深度学习刚好就是，让这个数据和结果对应，计算机自动的去创建一个想符合的模型，也类似于数学建模，只是，这里人不再建模了，改计算机来建立一个计算机懂的模型；</p><h3 id="理解“深度”"><a href="#理解“深度”" class="headerlink" title="理解“深度”"></a>理解“深度”</h3><p>为什么要定义为深度学习？不是快乐学习，不是认真学习呢？</p><p>这里有份博文写得很好，自认为没法实现比他更好的理解；</p><p>因为版权问题，不随便转载别人的文章，所以这里只是挂出了链接；</p><p><a href="https://www.leiphone.com/news/201708/9tDvUlxr7DpT3Yyx.html" target="_blank" rel="noopener">深度学习中的“深度”究竟怎么理解？</a></p><h3 id="理解神经网络"><a href="#理解神经网络" class="headerlink" title="理解神经网络"></a>理解神经网络</h3><p>在我们理解了深度学习的深度以后，我们如何理解神经网络这个词汇呢？</p><p>这个又与我们学习的深度学习有什么关系呢？</p><p>说起神经网络，我们第一个想到的可能就是我们的大脑神经元，没错，人工神经网络就是一种仿生学的一种，模仿的就是我们的大脑；</p><p>让我们比对一下，就可以知道这两种模型的相似之处；</p><h4 id="神经元模型"><a href="#神经元模型" class="headerlink" title="神经元模型"></a>神经元模型</h4><p>　神经元是神经网络中最基本的结构，也可以说是神经网络的基本单元，它的设计灵感完全来源于生物学上神经元的信息传播机制。</p><p>我们学过生物的同学都知道，<strong>神经元有两种状态：兴奋和抑制。</strong></p><p>一般情况下，大多数的神经元是处于抑制状态，但是一旦某个神经元收到刺激，导致它的电位超过一个阈值，那么这个神经元就会被激活，处于“兴奋”状态，进而向其他的神经元传播化学物质（其实就是信息）。</p><p>　　下图为生物学上的神经元结构示意图：</p><p><img src="https://images2015.cnblogs.com/blog/764050/201606/764050-20160619111613406-1210494225.png" alt="img"></p><p>　　1943年，McCulloch和Pitts将上图的神经元结构用一种简单的模型进行了表示，构成了一种人工神经元模型，也就是我们现在经常用到的“M-P神经元模型”，如下图所示：</p><p><img src="https://images2015.cnblogs.com/blog/764050/201606/764050-20160619112701960-1012598812.png" alt="img"></p><p>　　从上图M-P神经元模型可以看出，神经元的输出</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 深度学习 </tag>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MAVEN常用命令</title>
      <link href="/2019/02/20/MAVEN%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2019/02/20/MAVEN%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>本人属于有点懒的人，因为公司的项目一直都是用maven构建的，简单的构建，当然没有什么问题；</p><p>但是涉及到一些复杂的问题需要用到命令模式的时候，又避免不了反复去查询了；</p><p>所以只能是记到自己的博客中来了；</p><h3 id="MAVEN常用库"><a href="#MAVEN常用库" class="headerlink" title="MAVEN常用库"></a>MAVEN常用库</h3><p><a href="http://repo2.maven.org/maven2/" target="_blank" rel="noopener">Maven库</a><br><a href="http://mvnrepository.com/" target="_blank" rel="noopener">Maven依赖查询</a></p><h3 id="Maven常用命令"><a href="#Maven常用命令" class="headerlink" title="Maven常用命令"></a>Maven常用命令</h3><pre class=" language-shell"><code class="language-shell">创建Maven的普通java项目：    mvn archetype:create    -DgroupId=packageName    -DartifactId=projectName  创建Maven的Web项目：       mvn archetype:create     -DgroupId=packageName        -DartifactId=webappName     -DarchetypeArtifactId=maven-archetype-webapp    编译源代码： mvn compile 编译测试代码：mvn test-compile    运行测试：mvn test   产生site：mvn site   打包：mvn package在本地Repository中安装jar：mvn install 清除产生的项目：mvn clean   生成eclipse项目：mvn eclipse:eclipse  生成idea项目：mvn idea:idea  组合使用goal命令，如只打包不测试：mvn -Dtest package编译测试的内容：mvn test-compile  只打jar包: mvn jar:jar  只测试而不编译，也不测试编译：mvn test -skipping compile -skipping test-compile  ( -skipping 的灵活运用，当然也可以用于其他组合命令)  清除eclipse的一些系统设置:mvn eclipse:clean  </code></pre><blockquote><p> 一般使用情况是这样，首先通过cvs或svn下载代码到本机，然后执行mvn eclipse:eclipse生成ecllipse项目文件；</p><p>然后导入到eclipse就行了；修改代码后执行mvn compile或mvn test检验，也可以下载eclipse的maven插件。 </p></blockquote><pre class=" language-shell"><code class="language-shell">mvn -version/-v  显示版本信息 mvn archetype:generate        创建mvn项目 mvn archetype:create -DgroupId=com.oreilly -DartifactId=my-app   创建mvn项目  mvn package            生成target目录，编译、测试代码，生成测试报告，生成jar/war文件mvn jetty:run            运行项目于jetty上, mvn compile                    编译 mvn test                    编译并测试 mvn clean                    清空生成的文件 mvn site                    生成项目相关信息的网站 mvn -Dwtpversion=1.0 eclipse:eclipse        生成Wtp插件的Web项目 mvn -Dwtpversion=1.0 eclipse:clean        清除Eclipse项目的配置信息(Web项目) mvn eclipse:eclipse                将项目转化为Eclipse项目 </code></pre><pre class=" language-xml"><code class="language-xml">在应用程序用使用多个存储库 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repositories</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repository</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>Ibiblio<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>Ibiblio<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://www.ibiblio.org/maven/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repository</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repository</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>PlanetMirror<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>Planet Mirror<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://public.planetmirror.com/pub/maven/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repository</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repositories</span><span class="token punctuation">></span></span> </code></pre><pre class=" language-shell"><code class="language-shell">mvn deploy:deploy-file -DgroupId=com -DartifactId=client -Dversion=0.1.0` `-Dpackaging=jar -Dfile=d:\client-0.1.0.jar -DrepositoryId=maven-repository-inner -Durl=ftp://xxxxxxx/opt/maven/repository/ </code></pre><pre class=" language-shell"><code class="language-shell">发布第三方Jar到本地库中： mvn install:install-file -DgroupId=com -DartifactId=client -Dversion=0.1.0` `-Dpackaging=jar -Dfile=d:\client-0.1.0.jar -DdownloadSources=true-DdownloadJavadocs=true</code></pre><pre class=" language-shell"><code class="language-shell">mvn -e            显示详细错误 信息mvn validate        验证工程是否正确，所有需要的资源是否可用mvn test-compile    编译项目测试代码mvn integration-test     在集成测试可以运行的环境中处理和发布包。mvn verify        运行任何检查，验证包是否有效且达到质量标准。     mvn generate-sources    产生应用需要的任何额外的源代码，如xdoclet。 mvn -v 显示版本 mvn help:describe -Dplugin=help 使用 help 插件的  describe 目标来输出 Maven Help 插件的信息。mvn help:describe -Dplugin=help -Dfull 使用Help 插件输出完整的带有参数的目标列 mvn help:describe -Dplugin=compiler -Dmojo=compile -Dfull 获取单个目标的信息,设置  mojo 参数和  plugin 参数。此命令列出了Compiler 插件的compile 目标的所有信息 mvn help:describe -Dplugin=exec -Dfull 列出所有 Maven Exec 插件可用的目标 mvn help:effective-pom 看这个“有效的 (effective)”POM，它暴露了 Maven的默认设置 mvn archetype:create -DgroupId=org.sonatype.mavenbook.ch03 -DartifactId=simple -DpackageName=org.sonatype.mavenbook 创建Maven的普通java项目，在命令行使用Maven Archetype 插件 mvn exec:java -Dexec.mainClass=org.sonatype.mavenbook.weather.Main Exec 插件让我们能够在不往 classpath 载入适当的依赖的情况下，运行这个程序 mvn dependency:resolve 打印出已解决依赖的列表 mvn dependency:tree 打印整个依赖树 mvn install -X 想要查看完整的依赖踪迹，包含那些因为冲突或者其它原因而被拒绝引入的构件，打开 Maven 的调试标记运行 mvn install -Dmaven.test.skip=true` `给任何目标添加maven.test.skip 属性就能跳过测试 mvn install assembly:assembly 构建装配Maven Assembly 插件是一个用来创建你应用程序特有分发包的插件 mvn jetty:run 调用 Jetty 插件的 Run 目标在 Jetty Servlet 容器中启动 web 应用 mvn compile 编译你的项目 mvn clean install 删除再编译 mvn hibernate3:hbm2ddl 使用 Hibernate3 插件构造数据库</code></pre>]]></content>
      
      
      <categories>
          
          <category> MAVEN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MAVEN </tag>
            
            <tag> command </tag>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>聊一聊深度学习</title>
      <link href="/2018/12/26/%E8%81%8A%E4%B8%80%E8%81%8A%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
      <url>/2018/12/26/%E8%81%8A%E4%B8%80%E8%81%8A%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h3 id="原来的深度学习是什么样的？"><a href="#原来的深度学习是什么样的？" class="headerlink" title="原来的深度学习是什么样的？"></a>原来的深度学习是什么样的？</h3><p>自从阿尔法狗打败中国的柯洁以后,就到处谣传着人工智能取代人类；</p><p>当时我的表情是：<em>黑人-文号</em>；</p><p>之前我有了解过有关计算机和人类比拼的，那个时候，是“深蓝”与国际象棋大师卡斯帕罗夫的比拼，卡斯帕罗夫赢了；</p><p>当时专家的结论：如果想要计算机达到人类国际象棋世界冠军的水平，那么计算机要有每秒计算 10 亿个局面的能力。深蓝接近了这一目标，但还没有达到。</p><p>然后这个事还没完，又过了1年以后，改进版“更深的蓝”卷土重来，再次与卡斯帕罗夫大战。</p><blockquote><p>卡斯欣然接受挑战，他在 1996 年曾说：我能够感受到来自棋桌对面一种新型的智慧。但那是怪异、低效和不稳定的。我相信自己还有几年的安稳日子。</p><p>我全力要做到的是避免给予电脑任何具体的可进行针对性计算的目标。</p><p>可以说，当时的卡斯无论从技术还是心理上都不惧怕电脑。或许我们可以说当时的电脑还谈不上高级的人工智能。更准确地说是，电脑是在进行大数据库运算。</p><p>但它，已足够强大！它背后的“人类智囊团”里包括了4名国际大师。</p><p>　　比赛仍以 6 局定胜负。最终，“更深的蓝”以 3.5：2.5 击败了卡斯帕罗夫，其中第六局仅 19 个回合就通过精妙的弃子将对手的局面砸得粉碎。</p><p>比赛结束的第二天，该软件公司的股票价格上扬 3.6 个百分点，为公司带来多达两亿美元的收益。</p></blockquote><p>当时的算法应该是一种穷尽的办法，将棋子的所有可能落脚点都进行一遍计算，推导出来的结果，进行优化选择后得到的答案，说的更清楚点就是<strong>穷举法</strong>；</p><p>但是到了围棋阶段就没有办法这么用了，因为不够算了，太多了，第一步有361种选择，第二步有360种选择，以后的情况大致如此，我们就以361为界，那么变化数是$361!$，约为$10^{768}$,那得多大啊。</p><p>但是说到阿尔法狗真的有人那么聪明么，那肯定不是的，只是说人们换了一种算法罢了，但距离真正的人工智能，我想或许还有很长的一段路要走的；</p><h3 id="那么深度学习是怎么发展起来的呢？-南极熊3d打印网"><a href="#那么深度学习是怎么发展起来的呢？-南极熊3d打印网" class="headerlink" title="那么深度学习是怎么发展起来的呢？^南极熊3d打印网"></a>那么深度学习是怎么发展起来的呢？<a href="http://mini.eastday.com/mobile/180314030343551.html#" target="_blank" rel="noopener">^南极熊3d打印网</a></h3><p>作为机器学习最重要的一个分支，深度学习近年来发展迅猛，在国内外都引起了广泛的关注。</p><p>然而深度学习的火热也不是一时兴起的，而是经历了一段漫长的发展史。接下来我们了解一下深度学习的发展历程。</p><h4 id="深度学习的起源阶段"><a href="#深度学习的起源阶段" class="headerlink" title="深度学习的起源阶段"></a>深度学习的起源阶段</h4><p>1943年，心里学家麦卡洛克和数学逻辑学家皮兹发表论文《神经活动中内在思想的逻辑演算》，提出了MP模型。MP模型是模仿神经元的结构和工作原理，构成出的一个基于神经网络的数学模型，本质上是一种“模拟人类大脑”的神经元模型。MP模型作为人工神经网络的起源，开创了人工神经网络的新时代，也奠定了神经网络模型的基础。</p><p>1949年，加拿大著名心理学家唐纳德·赫布在《行为的组织》中提出了一种基于无监督学习的规则——海布学习规则(Hebb Rule)。海布规则模仿人类认知世界的过程建立一种“网络模型”，该网络模型针对训练集进行大量的训练并提取训练集的统计特征，然后按照样本的相似程度进行分类，把相互之间联系密切的样本分为一类，这样就把样本分成了若干类。海布学习规则与“条件反射”机理一致，为以后的神经网络学习算法奠定了基础，具有重大的历史意义。</p><p>20世纪50年代末，在MP模型和海布学习规则的研究基础上，美国科学家罗森布拉特发现了一种类似于人类学习过程的学习算法——感知机学习。并于1958年，正式提出了由两层神经元组成的神经网络，称之为“感知器”。感知器本质上是一种线性模型，可以对输入的训练集数据进行二分类，且能够在训练集中自动更新权值。感知器的提出吸引了大量科学家对人工神经网络研究的兴趣，对神经网络的发展具有里程碑式的意义。</p><p>但随着研究的深入，在1969年，“AI之父”马文·明斯基和LOGO语言的创始人西蒙·派珀特共同编写了一本书籍《感知器》，在书中他们证明了单层感知器无法解决线性不可分问题（例如：异或问题）。由于这个致命的缺陷以及没有及时推广感知器到多层神经网络中，在20世纪70年代，人工神经网络进入了第一个寒冬期，人们对神经网络的研究也停滞了将近20年。</p><h4 id="深度学习的发展阶段"><a href="#深度学习的发展阶段" class="headerlink" title="深度学习的发展阶段"></a>深度学习的发展阶段</h4><p>1982年，著名物理学家约翰·霍普菲尔德发明了Hopfield神经网络。Hopfield神经网络是一种结合存储系统和二元系统的循环神经网络。Hopfield网络也可以模拟人类的记忆，根据激活函数的选取不同，有连续型和离散型两种类型，分别用于优化计算和联想记忆。但由于容易陷入局部最小值的缺陷，该算法并未在当时引起很大的轰动。</p><p>直到1986年，深度学习之父杰弗里·辛顿提出了一种适用于多层感知器的反向传播算法——BP算法。BP算法在传统神经网络正向传播的基础上，增加了误差的反向传播过程。反向传播过程不断地调整神经元之间的权值和阈值，直到输出的误差达到减小到允许的范围之内，或达到预先设定的训练次数为止。BP算法完美的解决了非线性分类问题，让人工神经网络再次的引起了人们广泛的关注。</p><p>但是由于八十年代计算机的硬件水平有限，如：运算能力跟不上，这就导致当神经网络的规模增大时，再使用BP算法会出现“梯度消失”的问题。这使得BP算法的发展受到了很大的限制。再加上90年代中期，以SVM为代表的其它浅层机器学习算法被提出，并在分类、回归问题上均取得了很好的效果，其原理又明显不同于神经网络模型，所以人工神经网络的发展再次进入了瓶颈期。</p><h4 id="深度学习的爆发阶段"><a href="#深度学习的爆发阶段" class="headerlink" title="深度学习的爆发阶段"></a>深度学习的爆发阶段</h4><p>2006年，杰弗里·辛顿以及他的学生鲁斯兰·萨拉赫丁诺夫正式提出了深度学习的概念。他们在世界顶级学术期刊《科学》发表的一篇文章中详细的给出了“梯度消失”问题的解决方案——通过无监督的学习方法逐层训练算法，再使用有监督的反向传播算法进行调优。该深度学习方法的提出，立即在学术圈引起了巨大的反响，以斯坦福大学、多伦多大学为代表的众多世界知名高校纷纷投入巨大的人力、财力进行深度学习领域的相关研究。而后又在迅速蔓延到工业界中。</p><p>2012年，在著名的ImageNet图像识别大赛中，杰弗里·辛顿领导的小组采用深度学习模型AlexNet一举夺冠。AlexNet采用ReLU激活函数，从根本上解决了梯度消失问题，并采用GPU极大的提高了模型的运算速度。同年，由斯坦福大学著名的吴恩达教授和世界顶尖计算机专家Jeff Dean共同主导的深度神经网络——DNN技术在图像识别领域取得了惊人的成绩，在ImageNet评测中成功的把错误率从26％降低到了15％。深度学习算法在世界大赛的脱颖而出，也再一次吸引了学术界和工业界对于深度学习领域的关注。</p><p>随着深度学习技术的不断进步以及数据处理能力的不断提升，2014年，Facebook基于深度学习技术的DeepFace项目，在人脸识别方面的准确率已经能达到97%以上，跟人类识别的准确率几乎没有差别。这样的结果也再一次证明了深度学习算法在图像识别方面的一骑绝尘。</p><p>2016年，随着谷歌公司基于深度学习开发的AlphaGo以4:1的比分战胜了国际顶尖围棋高手李世石，深度学习的热度一时无两。后来，AlphaGo又接连和众多世界级围棋高手过招，均取得了完胜。这也证明了在围棋界，基于深度学习技术的机器人已经超越了人类。</p><p>2017年，基于强化学习算法的AlphaGo升级版AlphaGo Zero横空出世。其采用“从零开始”、“无师自通”的学习模式，以100:0的比分轻而易举打败了之前的AlphaGo。除了围棋，它还精通国际象棋等其它棋类游戏，可以说是真正的棋类“天才”。此外在这一年，深度学习的相关算法在医疗、金融、艺术、无人驾驶等多个领域均取得了显著的成果。所以，也有专家把2017年看作是深度学习甚至是人工智能发展最为突飞猛进的一年。</p><p>所以在深度学习的浪潮之下，不管是AI的相关从业者还是其他各行各业的工作者，都应该以开放、学习的心态关注深度学习、人工智能的热点动态。人工智能正在悄无声息的改变着我们的生活！</p><h4 id="发展历程简要概述"><a href="#发展历程简要概述" class="headerlink" title="发展历程简要概述"></a>发展历程简要概述</h4><p><img src="\img\articlePicture\learningDevelopment.png" alt="三者的关系"></p><h3 id="未来的深度学习会是怎么样的呢？"><a href="#未来的深度学习会是怎么样的呢？" class="headerlink" title="未来的深度学习会是怎么样的呢？"></a>未来的深度学习会是怎么样的呢？</h3><p>这里我们做一些基础的预测，不期待能有啥突破性的认识，但愿能认清一些脉络；</p><p>因为中国的工业4.0的提出，未来可能是爆发的 智能家居，智能制造，智能工作，铺助学习</p><p>这些方向都是未来很看好的，当然从投入来看，目前这几块都有不小的投入；</p><p>之后会怎样…</p><p>未完待续吧，等以后想到的了什么再来说说看…</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 深度学习 </category>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 深度学习 </tag>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>说说离我们最近的单元测试之道</title>
      <link href="/2018/11/28/%E8%AF%B4%E8%AF%B4%E7%A6%BB%E6%88%91%E4%BB%AC%E6%9C%80%E8%BF%91%E7%9A%84%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E4%B9%8B%E9%81%93/"/>
      <url>/2018/11/28/%E8%AF%B4%E8%AF%B4%E7%A6%BB%E6%88%91%E4%BB%AC%E6%9C%80%E8%BF%91%E7%9A%84%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E4%B9%8B%E9%81%93/</url>
      
        <content type="html"><![CDATA[<h3 id="为什么要单元测试？"><a href="#为什么要单元测试？" class="headerlink" title="为什么要单元测试？"></a>为什么要单元测试？</h3><p>很多时候，我一直有个疑问，为什么我写的代码还有那么多的问题，而究竟应该如何才能减少这些问题呢？</p><blockquote><p>单元测试不但会使你的工作完成的更轻松，而且会使你的设计变得更好，甚至大大减少你花在测试上面的时间。</p></blockquote><p><strong>一般而言，在代码设计之初就应当配备相应的测试计划！</strong></p><blockquote><p>间接损坏，意思就是加入一个新特性，或者修复一个bug之后，给系统的其他部分又引入了一个新的bug，类似 <strong>打地鼠游戏</strong>一样的效果。</p></blockquote><p>很多时候，我们会有这样的一个借口，就是测试代码不是我的工作，这是一个很搞笑的借口，因为你说出来的时候，甚至都没有意识到自己究竟是搞什么工作的。</p>]]></content>
      
      
      <categories>
          
          <category> 单元测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单元测试 </tag>
            
            <tag> JUNIT </tag>
            
            <tag> 思考 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫-应该知道些什么？</title>
      <link href="/2018/11/19/%E7%88%AC%E8%99%AB-%E5%BA%94%E8%AF%A5%E7%9F%A5%E9%81%93%E4%BA%9B%E4%BB%80%E4%B9%88%EF%BC%9F/"/>
      <url>/2018/11/19/%E7%88%AC%E8%99%AB-%E5%BA%94%E8%AF%A5%E7%9F%A5%E9%81%93%E4%BA%9B%E4%BB%80%E4%B9%88%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<p>好长时间，我都觉得爬虫是作为一个程序员必备的一项知识，但是长久的不接触，或者一直忙于其他事情，渐渐的有些忘记了自己最初为啥要做这个事情。</p><p>直到最近一直在学习着一些<strong>算法分析</strong>，才发现自己<strong>可用的数据很少，几乎没有</strong>，那怎么办呢？</p><p>只能去找，去抓取，这个时候，就觉得爬虫还是挺有意思的，至少我在分析一些东西的时候，很有用；</p><p>但是学习爬虫的时候，我们应该掌握些什么呢？或者说，爬虫，我们应该知道些什么呢？</p><p>好了，废话不多说，上正题…</p><hr><p>那么究竟要用什么用语言爬虫呢？</p><p>java,c,python,php?</p><p>其实只要能够进行网络通讯的，都可以实现爬虫功能；</p><p>但是为什么上网一搜索爬虫的时候，我们看到最多的就是python呢？</p><p>其实python写爬虫最简单，阅读也最轻松，就这样，简单即是最深的道理；</p><p>所以这里我就记录python的爬虫应用；</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些常用命令行</title>
      <link href="/2018/11/19/%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%A1%8C/"/>
      <url>/2018/11/19/%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<p>经常遇到一些头疼的小问题，而本人对于网络这块的常识有些薄弱，没法了，只能遇到一个问题，查一下，但架不住同类型的问题总是遇到；</p><p>归纳起来还是对于命令行的问题集中得多一些，当前主要是集中在 <strong>window上的命令行</strong>，后面如果有时间，或者有需要，我这边会补充<strong>Linux，Unix</strong>下的常用命令行；</p><p>那该怎么办呢？<strong>记下来呗！</strong></p><p>所以特地新增了这篇记下自己的一些，常用命令行；</p><p>开始就是一通 window+R -&gt; cmd 组合键，调出命令窗口</p><h3 id="查找端口的"><a href="#查找端口的" class="headerlink" title="查找端口的"></a>查找端口的</h3><pre class=" language-shell"><code class="language-shell">#查看程序端口占用情况netstat -ano#查找端口为49157的程序netstat -aon|findstr "49157"#查找进程PID为49157tasklist|findstr "8213"</code></pre><h3 id="杀死进程"><a href="#杀死进程" class="headerlink" title="杀死进程"></a>杀死进程</h3><pre class=" language-shell"><code class="language-shell">#杀死某个程序的进程taskkill /f /t /im Tencentdl.exe</code></pre><p>后面待续…</p>]]></content>
      
      
      <categories>
          
          <category> 命令行 </category>
          
          <category> window </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 命令行 </tag>
            
            <tag> cmd </tag>
            
            <tag> window </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CCF-201312</title>
      <link href="/2018/11/16/CCF-201312/"/>
      <url>/2018/11/16/CCF-201312/</url>
      
        <content type="html"><![CDATA[<p>欲解题，先解意，所以根据实际考试的经验，我必须要理解透彻题目的意思。</p><h2 id="出现次数最多的数"><a href="#出现次数最多的数" class="headerlink" title="出现次数最多的数"></a>出现次数最多的数</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><img src="\img\articlePicture\ccf_2013121.png" alt="ccf_2013121"></p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><blockquote><p>输入：一行：输入的<strong>个数</strong></p><p>输入：二行：输入<strong>具体整数</strong></p><p>输出其中出现<strong>最多且最小的数</strong></p><p>使用HashMap记录数据，这样可以剔除重复数据；</p><p>在使用的过程中，key作为记录该整数值，Value作为记录这个整数出现的次数；</p><p>循环HashMap，获取最大Value值；</p><p>再循环一次HashMap,根据最大Value值中出现Key最小的值；</p><p>上面两次循环为了避免出现相同Value的情况下，获取到最小Key；</p><p>此题考察的很<strong>基础</strong>，算是考察到了算法中的<strong>数据结构</strong></p></blockquote><h3 id="解题源码"><a href="#解题源码" class="headerlink" title="解题源码"></a>解题源码</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">.</span>Entry<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @ProjectName algorithm * @TypeDesc 输出这n个次数中出现次数最多的数。如果这样的数有多个，输出其中最小的一个 * @TypeName MostNumber      */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MostNumber</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">MostNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span> has <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> numb <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>has<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>numb<span class="token punctuation">)</span><span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">int</span> count <span class="token operator">=</span> has<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>numb<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>                has<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>numb<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                has<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>numb<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> minNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Entry<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span> en<span class="token operator">:</span>has<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>max<span class="token operator">==</span><span class="token number">0</span> <span class="token operator">||</span> max<span class="token operator">&lt;</span>en<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                max <span class="token operator">=</span> en<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Entry<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span> en<span class="token operator">:</span>has<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>max<span class="token operator">==</span>en<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>minNum <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> minNum <span class="token operator">></span> en<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    minNum <span class="token operator">=</span> en<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>minNum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="评测结果"><a href="#评测结果" class="headerlink" title="评测结果"></a>评测结果</h3><table><thead><tr><th>试题名称</th><th>代码长度</th><th>编程语言</th><th>评测结果</th><th>得分</th><th>时间使用</th></tr></thead><tbody><tr><td>出现次数最多的数</td><td>922B</td><td>JAVA</td><td>正确</td><td>100</td><td>218ms</td></tr></tbody></table><h2 id="ISBN号码"><a href="#ISBN号码" class="headerlink" title="ISBN号码"></a>ISBN号码</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p><img src="\img\articlePicture\ccf_2013122.png" alt="ccf_2013122"></p><h3 id="解提思路"><a href="#解提思路" class="headerlink" title="解提思路"></a>解提思路</h3><blockquote></blockquote><h3 id="解题源码-1"><a href="#解题源码-1" class="headerlink" title="解题源码"></a>解题源码</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ISBN</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">ISBN</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        String isbn <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> isbnNum <span class="token operator">=</span> isbn<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> fl <span class="token operator">=</span>  Integer<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>isbnNum<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String lastNum <span class="token operator">=</span> isbnNum<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> sumNum <span class="token operator">=</span> fl<span class="token operator">*</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pressNum <span class="token operator">=</span> isbnNum<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> knowNum <span class="token operator">=</span> isbnNum<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> pressNum<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> cur <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>pressNum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sumNum <span class="token operator">+=</span> cur<span class="token operator">*</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> knowNum<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> cur <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>knowNum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sumNum <span class="token operator">+=</span> cur<span class="token operator">*</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> flag <span class="token operator">=</span> sumNum<span class="token operator">%</span><span class="token number">11</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> compareNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>lastNum<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"X"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            compareNum <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            compareNum <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>lastNum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token operator">==</span>compareNum<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Right"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            String newISBN<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token operator">==</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                newISBN <span class="token operator">=</span> isbnNum<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">'-'</span><span class="token operator">+</span>isbnNum<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">'-'</span><span class="token operator">+</span>isbnNum<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">'-'</span><span class="token operator">+</span><span class="token string">'X'</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                newISBN <span class="token operator">=</span> isbnNum<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">'-'</span><span class="token operator">+</span>isbnNum<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">'-'</span><span class="token operator">+</span>isbnNum<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">'-'</span><span class="token operator">+</span>flag<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>newISBN<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="评测结果-1"><a href="#评测结果-1" class="headerlink" title="评测结果"></a>评测结果</h3><table><thead><tr><th>试题名称</th><th>代码长度</th><th>编程语言</th><th>评测结果</th><th>得分</th><th>时间使用</th><th>空间使用</th></tr></thead><tbody><tr><td>ISBN号码</td><td>1.102KB</td><td>JAVA</td><td>正确</td><td>100</td><td>156ms</td><td>21.97MB</td></tr></tbody></table><h2 id="最大的矩形"><a href="#最大的矩形" class="headerlink" title="最大的矩形"></a>最大的矩形</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p><img src="\img\articlePicture\ccf_2013123.png" alt="ccf_2013123"></p><h3 id="解提思路-1"><a href="#解提思路-1" class="headerlink" title="解提思路"></a>解提思路</h3><h3 id="解题源码-2"><a href="#解题源码-2" class="headerlink" title="解题源码"></a>解题源码</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>LinkedList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Queue<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MaxRectangle</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">MaxRectangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> recCount <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> recArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>recCount<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sumArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>recCount<span class="token punctuation">]</span><span class="token punctuation">[</span>recCount<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> recCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            recArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> recCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> x <span class="token operator">=</span> recArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            sum <span class="token operator">=</span> x<span class="token punctuation">;</span>            <span class="token keyword">boolean</span> partition <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> recCount<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> y <span class="token operator">=</span> recArray<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&lt;=</span>y<span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>partition<span class="token punctuation">)</span><span class="token punctuation">{</span>                        sumArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> recArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                        sum <span class="token operator">=</span> recArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                        partition <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>j<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            sumArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> sum<span class="token punctuation">;</span>                        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                            sum <span class="token operator">+=</span> x<span class="token punctuation">;</span>                            sumArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> sum<span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                    partition <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    sumArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> sum<span class="token punctuation">;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> sumArray<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> sumArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>max<span class="token operator">&lt;</span>sumArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    max <span class="token operator">=</span> sumArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="评测结果-2"><a href="#评测结果-2" class="headerlink" title="评测结果"></a>评测结果</h3><table><thead><tr><th>试题名称</th><th>代码长度</th><th>编程语言</th><th>评测结果</th><th>得分</th><th>时间使用</th><th>空间使用</th></tr></thead><tbody><tr><td>最大的矩形</td><td>1.085KB</td><td>JAVA</td><td>正确</td><td>100</td><td>250ms</td><td>30.05MB</td></tr></tbody></table><h2 id="有趣的数"><a href="#有趣的数" class="headerlink" title="有趣的数"></a>有趣的数</h2><h3 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h3><p><img src="\img\articlePicture\ccf_2013124.png" alt="ccf_2013124"></p><h3 id="解提思路-2"><a href="#解提思路-2" class="headerlink" title="解提思路"></a>解提思路</h3><h3 id="解题源码-3"><a href="#解题源码-3" class="headerlink" title="解题源码"></a>解题源码</h3><pre class=" language-java"><code class="language-java"></code></pre><h3 id="评测结果-3"><a href="#评测结果-3" class="headerlink" title="评测结果"></a>评测结果</h3><h2 id="I’m-stuck"><a href="#I’m-stuck" class="headerlink" title="I’m stuck!"></a>I’m stuck!</h2><h3 id="题目-4"><a href="#题目-4" class="headerlink" title="题目"></a>题目</h3><p><img src="\img\articlePicture\ccf_2013125.png" alt="ccf_2013125"></p><h3 id="解提思路-3"><a href="#解提思路-3" class="headerlink" title="解提思路"></a>解提思路</h3><h3 id="解题源码-4"><a href="#解题源码-4" class="headerlink" title="解题源码"></a>解题源码</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>LinkedList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Queue<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ImStuck</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**      * @Title main      * @Description TODO(这里用一句话描述这个方法的作用)      * @param args     * @throws      */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">ImStuck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> start <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> target <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> row <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> col <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">;</span>        sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> r <span class="token operator">&lt;</span> row<span class="token punctuation">;</span> r<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            String inLine <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> c <span class="token operator">&lt;</span> col<span class="token punctuation">;</span> c<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                map<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> inLine<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>inLine<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'S'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    start<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> r<span class="token punctuation">;</span>                    start<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>inLine<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'T'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    target<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> r<span class="token punctuation">;</span>                    target<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> canWalkT <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">boolean</span><span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> canSWalk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">boolean</span><span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> visited <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">boolean</span><span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">;</span>        canWalkT<span class="token punctuation">[</span>target<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>target<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        visited<span class="token punctuation">[</span>target<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>target<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        canSWalk<span class="token punctuation">[</span>start<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>start<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> upDownMove <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> leftRightMove <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//1.玩家可不可以从此方格移动到目标位置。</span>        Queue<span class="token operator">&lt;</span>Integer<span class="token operator">></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>target<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>target<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> r <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> c <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> nr <span class="token operator">=</span> r<span class="token operator">+</span>upDownMove<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> nc <span class="token operator">=</span> c<span class="token operator">+</span>leftRightMove<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>nr<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>nr<span class="token operator">>=</span>row<span class="token operator">||</span>nc<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>nc<span class="token operator">>=</span>col<span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>visited<span class="token punctuation">[</span>nr<span class="token punctuation">]</span><span class="token punctuation">[</span>nc<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> move <span class="token operator">=</span> <span class="token function">mapKeyToValue</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span>nr<span class="token punctuation">,</span>nc<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">boolean</span> haveMove <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> move<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">==</span>move<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        haveMove <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>haveMove<span class="token punctuation">)</span><span class="token punctuation">{</span>                    canWalkT<span class="token punctuation">[</span>nr<span class="token punctuation">]</span><span class="token punctuation">[</span>nc<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>nr<span class="token punctuation">)</span><span class="token punctuation">;</span>                    queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>nc<span class="token punctuation">)</span><span class="token punctuation">;</span>                    visited<span class="token punctuation">[</span>nr<span class="token punctuation">]</span><span class="token punctuation">[</span>nc<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>canWalkT<span class="token punctuation">[</span>start<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>start<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"I'm stuck!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//2.玩家可以从初始位置移动到此方格；</span>        <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> visitor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">boolean</span><span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">;</span>        visitor<span class="token punctuation">[</span>start<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>start<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        queue<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>start<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>start<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> r <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> c <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> moved <span class="token operator">=</span> <span class="token function">mapKeyToValue</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span>r<span class="token punctuation">,</span>c<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> moved<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> nr <span class="token operator">=</span> r<span class="token operator">+</span>upDownMove<span class="token punctuation">[</span>moved<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> nc <span class="token operator">=</span> c<span class="token operator">+</span>leftRightMove<span class="token punctuation">[</span>moved<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>nr<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>nr<span class="token operator">>=</span>row<span class="token operator">||</span>nc<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>nc<span class="token operator">>=</span>col<span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>visited<span class="token punctuation">[</span>nr<span class="token punctuation">]</span><span class="token punctuation">[</span>nc<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> move <span class="token operator">=</span> <span class="token function">mapKeyToValue</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span>nr<span class="token punctuation">,</span>nc<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">boolean</span> haveMove <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> moved<span class="token punctuation">.</span>length<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> move<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>moved<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">==</span>move<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            haveMove <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>haveMove<span class="token punctuation">)</span><span class="token punctuation">{</span>                    canSWalk<span class="token punctuation">[</span>nr<span class="token punctuation">]</span><span class="token punctuation">[</span>nc<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>nr<span class="token punctuation">)</span><span class="token punctuation">;</span>                    queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>nc<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> row<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> col<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//                System.out.print(canWalkT[i][j]+" ");</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>canSWalk<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">!</span>canWalkT<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token operator">++</span>result<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//            System.out.println();</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">mapKeyToValue</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> map<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> c<span class="token punctuation">,</span><span class="token keyword">boolean</span> reverse<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">char</span> cur <span class="token operator">=</span> map<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> newArray<span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>cur<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token string">'S'</span><span class="token operator">:</span>        <span class="token keyword">case</span> <span class="token string">'T'</span><span class="token operator">:</span>        <span class="token keyword">case</span> <span class="token string">'+'</span><span class="token operator">:</span>            newArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'-'</span><span class="token operator">:</span>            newArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'|'</span><span class="token operator">:</span>            newArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'.'</span><span class="token operator">:</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>reverse<span class="token punctuation">)</span><span class="token punctuation">{</span>                newArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                newArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'#'</span><span class="token operator">:</span>            newArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span>            newArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> newArray<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="评测结果-4"><a href="#评测结果-4" class="headerlink" title="评测结果"></a>评测结果</h3>]]></content>
      
      
      <categories>
          
          <category> CCF </category>
          
          <category> 算法 </category>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 总结 </tag>
            
            <tag> CCF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CCF之傷</title>
      <link href="/2018/11/15/CCF%E4%B9%8B%E5%82%B7/"/>
      <url>/2018/11/15/CCF%E4%B9%8B%E5%82%B7/</url>
      
        <content type="html"><![CDATA[<p>考试已经过去一段时间了，但是每每想起自己的分数，就觉得不应该忘记这种事情。</p><p>虽然在那段时间里面确实有好多事情干扰着，但是不能作为一个非标准的IT从业者所应该发生的事情。</p><p>先上一段总结吧。</p><h3 id="考前的准备情况"><a href="#考前的准备情况" class="headerlink" title="考前的准备情况"></a>考前的准备情况</h3><h4 id="学习的时间安排："><a href="#学习的时间安排：" class="headerlink" title="学习的时间安排："></a>学习的时间安排：</h4><p>未能充分重视这场考试，且开始做题的时候，较为轻松，略估分数觉得还能胜任，因此没有充分的重视起来；</p><p>因觉得提前练习不会让自己状态发挥到最好且在接到考试通知的时候有一个月忙于项目上的事情；</p><p>因此，在第二个月后，开始进行一些逐步的学习，仅在考前的半个月里面开始进行题目练习；</p><p><strong>时间安排：15天</strong></p><h4 id="时长及练习的方式："><a href="#时长及练习的方式：" class="headerlink" title="时长及练习的方式："></a>时长及练习的方式：</h4><p>开始的时候，完全没有找到感觉不知道怎么进行练习；</p><p>后面逐渐掌握方式，于是开始进行认真的摸索练习；</p><p><strong>时长：15天*2h</strong></p><p>方式：逐步的进行摸索以后，开始知道做题的重要性，在做题的过程中，一般我都是按照CCF官网给定的练习进行测试，满分一次通过，如果不是满分，则进行充分的分析以及测试；</p><h4 id="练习的题量："><a href="#练习的题量：" class="headerlink" title="练习的题量："></a>练习的题量：</h4><p><strong>15题</strong></p><h4 id="练习结果的跟进："><a href="#练习结果的跟进：" class="headerlink" title="练习结果的跟进："></a>练习结果的跟进：</h4><p>基本上是满分，所以没有太跟进题目的学习，仅仅针对一些复杂的图论算法进行跟进学习；</p><h3 id="对考试的整体评价和结果的反思"><a href="#对考试的整体评价和结果的反思" class="headerlink" title="对考试的整体评价和结果的反思"></a>对考试的整体评价和结果的反思</h3><p>考试内容的难易程度及题目理解、考试做题的经验、考试编程与实际工作的关联性及对实际工作的参考意义、个人的认识与反思。</p><h4 id="难易程度及题目理解："><a href="#难易程度及题目理解：" class="headerlink" title="难易程度及题目理解："></a>难易程度及题目理解：</h4><p>CCF的考试对与算法有一定的考校，题目由1-5难度逐渐加深。</p><p>1、2题需要在1小时内完成，剩下的3题也必须每题1小时的时间，当然前面的题越快做完越好；</p><p>3题还好，只是麻烦一些，到了4、5题的时候，感觉已经达到了赛事难度；</p><p>题目倒是能很好理解，但很多时候可能也因为自己的理解不到，所以在编写程序的时候，犯了一些致命错误因此在对给定例子的测试的时候通过了后，就没有进一步的测试；</p><p>在下来看到分数以后，我认真反思了自己做题过程中的思考方式，因当时环境问题，造成了我做题时候的心态偏急，题目在自己刚好理解以后就马上着手写程序，而没有在充分分析以后才来动手，这也是一个致命的问题；</p><h4 id="考试做题的经验："><a href="#考试做题的经验：" class="headerlink" title="考试做题的经验："></a>考试做题的经验：</h4><h4 id="参考意义："><a href="#参考意义：" class="headerlink" title="参考意义："></a>参考意义：</h4><p>与实际工作的关联系不大，因本人在公司工作的业务方向非大数据、云计算、人工智能、区块链等，而是政府行业。</p><p>因而对于特定的算法有要求的地方几乎没有，基本只是对业务的准确理解以及解析，实现；</p><p>但不能完全说没有用，因为基础的一些算法对于一些数据量大的查询还是非常有用的。</p><p>而且对于<strong>程序的理解程度可以进一步加强</strong>。</p><p>当然如果后期逐步像上面说到几个方向开展业务的话，关联性还是非常强的。</p><h4 id="认识："><a href="#认识：" class="headerlink" title="认识："></a>认识：</h4><p>通过这次考试，觉得算法挺有意思的，虽然在大学的时候，课程有系统的讲解，但那个时候对于这块认识度不够；</p><p>在后面过程中，我也培养了对于算法方面的兴趣，不在一味执着于新技术和技巧，而对于自己的基础应当重新翻查一遍巩固自己的地基；</p><p>也通过自己这次考试，对于自己在程序上面的理解瓶颈有了一定的突破，找到了一定的学习方向和思维方式；</p><h4 id="结果反思："><a href="#结果反思：" class="headerlink" title="结果反思："></a>结果反思：</h4><p>看到分数的时候我觉得很不可思议。</p><p>因本人在平时的练习过程中，在官网做完的题目几乎以100分的满分通过，就算再少也有40分，但是这已经很少了；</p><p>考试环境中虽然没有及时的给出分数，按照平时的检测结果不该这样。</p><p>后面逐渐反思，因为测试量的不足，虽然本人在做完题目以后均有对所有给定的例子进行测试，均已通过测试。</p><p>但最后发现，如果是这样的分数，那么说明在边界值的测试上面还不够，因而仅仅只获得了这个分数；</p><p>当然更多的应该归结于自己对于算法类型题目的练习量不够，之前我的总结我一直以为是自己做题和练题上面有问题；</p><p>但当我回过去看我自己的练习量的时候，我发现当我还在做CCF的时候，公司同事已经在做公司给定的题目了，对于自己对这场考试没有足够的重视，我本身也是要进行深刻反省的。</p><h3 id="个人总结"><a href="#个人总结" class="headerlink" title="个人总结"></a>个人总结</h3><p>考试虽然考过了，但是后面的学习任重道远，不能仅仅止步于考完以后的总结就完了。</p><p>当然我个人的建议是：可以重视这种考试，但更多因采取学习的态度；</p><p>如果仅仅针对于考试，那么我的建议是<strong>练习量</strong>，以及掌握<strong>准确的测试</strong>这就够了；</p><p>如果是针对于自己的提高方面，那么光是练习完全不够的；</p><p>所以针对这个事情，我决定自己一定要狂垦 <strong>算法导论</strong>，然后把之前的失地，全部一一收复。</p><p>后期会持续跟进一些算法的题目，然后进一步的分析理解。</p>]]></content>
      
      
      <categories>
          
          <category> CCF </category>
          
          <category> 算法 </category>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 总结 </tag>
            
            <tag> 教训 </tag>
            
            <tag> CCF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习之道——芭芭拉-奥克利</title>
      <link href="/2018/11/09/%E5%AD%A6%E4%B9%A0%E4%B9%8B%E9%81%93%E2%80%94%E2%80%94%E8%8A%AD%E8%8A%AD%E6%8B%89-%E5%A5%A5%E5%85%8B%E5%88%A9/"/>
      <url>/2018/11/09/%E5%AD%A6%E4%B9%A0%E4%B9%8B%E9%81%93%E2%80%94%E2%80%94%E8%8A%AD%E8%8A%AD%E6%8B%89-%E5%A5%A5%E5%85%8B%E5%88%A9/</url>
      
        <content type="html"><![CDATA[<p>开篇的过程中，作者提到了几个概念很有意思，就是考试是一个帮助你熟悉自己的知识的过程，不需要抗击考试；</p><p>学习的时候，需要进行交叉练习，如果一段时间只练习一项会很累，效果也不是很显著；</p><p>但是过于频繁的交叉练习，也会让自己失去方向，不知道要网哪个方向前进；</p><p>然后是回想，这里我印象太过深刻，小时候，我就知道每日需要像放电影一样回想自己的一天，方便自己总结，可是没有形成一个这样的习惯，只能说在今后的日子里，我需要不断改进我自己；</p><h3 id="太勤奋是一种病"><a href="#太勤奋是一种病" class="headerlink" title="太勤奋是一种病"></a>太勤奋是一种病</h3><blockquote><p>你怎么才能意识到自己处于发散模式中？那是一种什么感觉？</p></blockquote><p>相对于专注模式：沉重，对准，不偏不倚，就像用枪对准了目标一样。</p><p>发散模式，更多的是一种轻松写意的过程，犹如行云流水，不在乎于静；</p><blockquote><p>当你有意识地思考一个问题时，是哪种模式被激活了，哪种被屏蔽了呢？怎么才能解锁被屏蔽的模式呢？</p></blockquote><p>当我有意识的思考一个问题的时候，其实是<strong>专注模式被激活了</strong>，那种感觉就像时间不存在一样，感觉很棒，感觉全世界都只是你一个人；</p><p>很多时候的学习方式都是这种专注模式下不断的重复，时间一久就会觉得自己很不舒服，有点胸闷透不过气来的感觉，然后下次再学习的时候，本能会不自觉的进行抗拒。</p><p>然后就这样不久就形成了拖延的毛病，并且懒得思考了。</p><p>相应的<strong>发散模式被屏蔽了</strong>，这就是一个矛盾体，不可能有人说我既专注又发散的，这么说很奇怪，而且我们不是电脑，没法并发不是。</p><p>如何解锁呢？</p><p>像书里面说的一样，<strong>睡觉，散步，听听音乐放松</strong>，其实还有其他的，一般而言就是打游戏。</p><p>让自己放松下来，转移到其他事务上面，就可以达到解锁的目的；</p><blockquote><p>回顾一下你处于定式效应的时候，怎样才能改变思考方式，跳出预设的错误概念？</p></blockquote><p><strong>学习其他新东西，让自己的思维拓宽；</strong></p><p><strong>重新尝试一段想法，或者说将问题停下来，过一段时间这个问题总能得到更好的解决办法。</strong></p><blockquote><p>解释一下专注模式和发散模式是怎样类比手电筒的可调光束的。何时才能看得更远？何时视野更开阔，但看到的距离更近？</p></blockquote><p>专注模式:强光线集中，将所有的脑力全部集中于一个方向的出口；何时才能看得更远？这个时候更远</p><p>发散模式:散射光线，将脑力由一个出口从不同方向射出；何时视野更开阔，但看到的距离更近？就这个时候而言是这样的；</p><blockquote><p>为什么有时候对于学数学和科学的人来说，克服拖延症格外困难？</p></blockquote><p>专注模式过度集中产生了思维定式的效果，紧盯住某个细节或者方法反复验证，而这个时候需要的是发散模式的思维方式更能解决问题；</p><blockquote><p>官方给定的答案：</p><p>他们通常把自己困在了原地，盯着细节不放。想要在其中找到解决方案，而非理解问题本身。</p></blockquote><h3 id="学习即创造"><a href="#学习即创造" class="headerlink" title="学习即创造"></a>学习即创造</h3><blockquote><p>列举几项有助于从专注模式切换到发散模式的活动。</p></blockquote><p><strong>睡觉、发呆、冥想、散步、听音乐、打游戏</strong></p><blockquote><p>有时，你会确信自己已经发现了解决问题的新方法，但事实上并没有。那么如何才能更主动地意识到自己的思考过程，拥抱其他可能性呢？是否有必要永远让自己以开放的态度对待新可能？</p></blockquote><p>这里我倒着过来说，是否有必要，有，但是不是以开放态度，而是以审查的方式，对待新可能，</p><blockquote><p>为什么凭借自制力让自己停下来很重要？跳出学习、学术的范畴，你还能想到哪些让“停下”显得很重要的情形呢？</p></blockquote><blockquote><p>学习新概念时，你要在一天之内就再次复习，以免刚接触的新概念随风而逝。但结果往往是有太多事情挤在那里，要过了几天甚至是更久之后才会开始再次复习。你能否制订出一种行动计划，来保证自己及时复习新知识？</p></blockquote><h3 id="工具建议小技巧"><a href="#工具建议小技巧" class="headerlink" title="工具建议小技巧"></a>工具建议小技巧</h3><ol><li>刚坐下开始学习，有点负面小情绪很正常，你能做点什么让自己渡过难关？</li></ol><p>刚才没注意把第二个问题的答案写在了第一个问题上；但是有一段作者说的话，确实比较管用的：</p><blockquote><p>书里面，作者说是可以先看看简单的东西，允许自己适度拖延，然后将问题带到发散性思维模式中，这样总会一直想起来的；</p></blockquote><p>说实话，我一下还想不起来怎么去克服这样的小情绪，一般这样的小情绪出现的时候，我通常都是随机行动的；</p><p>例如：翻看微博，UC震惊新闻集合，刷朋友圈；</p><p>但是我发现这样做法，一点用处没有，只会分散我跟多的注意力，让我更加不能专注，拖延个严重；</p><p>这个时候，我一般快点的时候，是提醒自己，我有点恐惧，有点懒惰；</p><p>还是不够，那么我会闷气，直接网里面跳进去；</p><ol start="2"><li>要克制习惯性拖延，哪种方法对你最管用？</li></ol><p>确实是个很难的问题，而且我通常的努力总是让我变得更加的拖延，改变习惯，我得学会克制一下，得正确的告诉我自己我该做什么；</p><p>但是我并不是每次都能够想的起来告诉自己；</p><blockquote><p>书里面，作者说是可以先看看简单的东西，允许自己适度拖延，然后将问题带到发散性思维模式中，这样总会一直想起来的；</p></blockquote><p>这确实是一个好办法，但我觉得还不够，我需要坡道，连接当前问题的坡道，一般而言，当我开始真正意义上的思考和侵入里面的时候，也就是专注模式一旦真正打开的时候，我的工作效率会特别高，这个时候，很不容易被打扰到；</p><ol start="3"><li>为什么你想在前一天晚上，写下第二天的待办任务清单？</li></ol><p>这个我这一年都在尝试，我想让我的生活更加的有调理性，让我的生活能够，按照我想的，我设计的那样；</p><p>而不是想到什么，就做什么，总是有些被动，我总有一种被生活了的感觉，而不是我要这样生活；</p><ol start="4"><li>你会如何改造自己当前的负面想法？</li></ol><p>这让我想到了知乎上面有这么一个说法，说<strong>一个人一生最重要的能力，学会平静</strong></p><p>现在想想还真是这样，只有平静以待，你才能冷静的解决你遇到的任何问题；</p><p>否则的话，你总是在被各种情绪拖着，不能真正全身心的投入到你要做的事情中去；</p><p>我的想法是，行动，行动，行动，只有真正的动起来了，才能让自己忙碌得忘记掉，不然很容易沉侵在这负面的想法中；</p><p>而且负面的想法对自己是没有什么太多的用处，因为既不能解决问题，也不能让问题消失，简直就是负重石；</p><ol start="5"><li>解释一下，为什么设定一个停工时间是那么重要。</li></ol><p>我的理解是，要想跑得越快，我们就得学会停得快，就跟汽车一样，一流的车肯定配备了一流的刹车系统；</p><p>如果我们一直沉侵在工作中，不知道停工，或者说不知道是否应该停工，那么很容易陷入到一种疲态；</p><p>进而影响后面的工作，这样的效率肯定是不行的；</p><p>所以只有准确的停工，我们才能学会如何赶快开工，有静有动，方能真正的平衡；</p><h3 id="拖延的小恶魔总结篇"><a href="#拖延的小恶魔总结篇" class="headerlink" title="拖延的小恶魔总结篇"></a>拖延的小恶魔总结篇</h3><blockquote><p>小总结：</p><p>​       ·记行程日志。这样当你实现自己的目标之后，就可以回头追踪并了解哪些是有效的方法，哪些是无效的方法。<br>　　·每天都对自己承诺要完成一定的惯常事务和任务。<br>　　·在晚上睡觉前写下你计划的任务，这样你的大脑就有时间详细考虑你的目标，从而帮助你确保能够成功。<br>　　·把你的工作细化成一系列小挑战。总是确保你（和你的小恶魔）得到足够的回馈。花几分钟时间尽情地享受幸福和胜利的快感。<br>　　·要慎重选择时间，直到你完成了这个任务才能奖励自己。<br>　　·小心拖延的信号。<br>　　·让自己身处少有拖延信号干扰的新环境中，比如安静的图书馆。<br>　　·障碍总会出现，但不要把你自己的问题全都归咎于外部因素。如果每件事都是别人的错，那就是时候好好审视一下自己了。<br>　　·相信自己的新时间系统。注意力集中的时候就要努力工作，该休息的时候要足够相信自己去休息，不要有负罪感。<br>　　·如果仍然无法摆脱拖延，要有后备计划。毕竟没有人是完美的。<br>　　·做第一个吃螃蟹的人。<br>　　·享受做小白鼠的时光！</p></blockquote><ol><li><p>如果你很容易分心，有什么好方法能帮助你预防拖延呢？</p><p>给自己固定的思考时间，既要合理的利用拖延，又要让自己的不被拖延症给真正的难住；</p><p>这里面，有个很有意思的说发就是，我们要避免拖延信号，当我有这个信号意识的时候，我就知道，我的拖延症犯了，需要克服一下；</p></li><li><p>你该如何判断何时拖延是有益的，何时拖延又是有害的？</p><p>给定自己一个固定思考时间，如果超过时间了，当我还因为某个思考和事情的时候，拖延症已经严重的侵害了我自己的正常工作时间，就像这个月计划的写大纲一样，我前面20天不到都各种担心；</p><p>事实上完全没有必要，我只要开始动起来，即使收获不够，但是总能有收获，我总可以不断进步；</p></li><li><p>你是从什么地方意识到，在立刻投身其中前的驻足与回顾对你有益的？</p><p>我在编程的时候，当我还没有想起来我该做什么功能的时候，我总是想快一步完成，这个时候编写的东西，总是让人感觉乱七八糟的；</p><p>所以我需要的是重构，以及认真的理解功能点之间需要做什么，有没有可以复用的办法，如何让自己的代码能够简洁的实现自己想法；</p></li><li><p>如果你坐下是为了工作，却发现自己在浪费时间，你会采取哪些行动让自己尽快回到正轨上？</p><p>通常而言，我更多的是拖到不能再拖，依靠的是危机，以及最后的意志力来解决这个办法，当然结果很糟糕；</p><p>我决定换个思路，固定时间的让自己，在一定范围内驻足，然后选择简单的方式让自己快速切入到工作状态中去，给自己一个坡道；</p></li><li><p>回顾自己是如何应对挫折的。在面对那些困难的时候你有积极承担自己的责任吗？什么样的应对最终是有效的？、</p><p>我虽然每次都嘴上这样说，是我自己的责任，因为我知道，如果我逃避了，那么意味着我没有责任；</p><p>但是实际的结果还不够，因为仅仅这样说是远远不够的；</p><p>我得多一些全局思维，明确全局目标，告诉自己，我的目标应该是什么样的？</p><p>在这方面，横向领导力这个说法真的很重要，确实很多时候，我应该想到的事情最终的走向，而不是说，具体我的事项这就完了；</p><p>我只有把握全局，我才能够让自己真正的走向更好的一面；</p></li><li><p>为什么那些跟随自己的内心，而非经过理性分析而选择职业的人对自己的工作更有可能不满意？</p><p>因为感性认识不够呀，感性的认识总会让人拘泥于当下周围环境，但是理性的选择可以帮助自己看得更远，跳出环境；</p><p>想起自己毕业前面几年的选择，很多都是荒唐糊涂的，我都是像着自己内心的，结果到最后，内心变化很快，然后出卖了最初的自己，不用想都知道我悲催了不是；</p><p>所以在想任何问题的时候，我都应当理性为主，感性为铺，毕竟人进化的方向是理性的，而非感性；</p><p>工作同样如此；</p></li></ol><h3 id="增强你的记忆力"><a href="#增强你的记忆力" class="headerlink" title="增强你的记忆力"></a>增强你的记忆力</h3><blockquote><p>章节总结</p><p>·记忆宫殿法——将有助于记忆的形象嵌入你熟悉的场景中，让自己感受视觉记忆系统赋予的力量。<br>·学着以更加训练有素且别具创意的方式来使用记忆，会有助于集中注意力，就算为了增强记忆而创造出天马行空的关联也没关系。<br>·理解后再去记忆，你会对学习材料记忆犹新。随着思维宝库的不断强化，总有一天你会成为学习真正的主人。</p></blockquote><p>1.描述一幅能帮你记住一个重要方程式的图像。</p><p>这里我想到的是原来我们学习的月份分31还是30天，这种，是以手来区分的，具体的就是左手开始，凸起部分是31天,2月份作为一个特殊例子，需要看当年是平年还是闰年，到右手8月开始，偶数为31天，但是也是凸起部分为31天，所以香辣还算记忆深刻；</p><p>2.从任意一节课中挑出四个或更多的关键概念。说说该如何把这些概念编译为便于记忆的图像，在记忆宫殿中你又会将它们存放到何处。（为了你的老师着想，有些便于记忆的图像还是得要你好好检查一遍。一位风趣的演员曾这样说：“我不在乎它们（这里指脑中“图像”）会是什么，只要它们别到大街上撒野，小心吓坏我的马。”</p><p>其实就是记忆联系，我的理解在这里是，记忆如果被孤立起来是很难被长时间给记录的，只有你在把你自己原有的记忆拿出来，结合现有的记忆，紧密的联系起来，而且联系的时候，要深刻，这样的记忆会长久的保留，并能在你随时想到的时候给取出来；</p><p>3.用祖母也能听明白的话，解释记忆宫殿法。</p><p>其实也是上面解释的问题，就是联想形式的记忆，让自己的记忆落地，和生活中的一些紧密而且经常使用到的东西进行关联；</p><h3 id="记忆技巧多多益善"><a href="#记忆技巧多多益善" class="headerlink" title="记忆技巧多多益善"></a>记忆技巧多多益善</h3><blockquote><p>本章小结<br>　　·比喻可以帮你更快地学会难懂的概念。<br>　　·重复是在记忆消退前对其进行巩固的必要动作。<br>　　·意群和口诀可以帮你简化学习内容，构成组块，这样就能更轻松地存储记忆了。<br>　　·编故事，哪怕故事听起来会有点笨拙，但它也会让学习内容更好记。<br>　　·写和说在一定上都有加强记忆的作用。<br>　　·体育锻炼对新的神经元生长、新联结形成有强大的促进作用。</p></blockquote><p>1.拿出一张纸，给你要理解的数学或科学概念创造一个形象的类比或口诀。　</p><p>2.从在你正在读的数学或科学教材里挑一章，创立一个相关问题，它会让你想去思考更多未知。　</p><p>3.入睡前，在脑海里回顾要学的知识。为了加速这个过程，醒来时的第一件事也要这样做。</p><p>想到了之前每天放电影的事情，也同时想到了之前的——专注力管理，让你更高效</p><p>作者胖子邓，也是很厉害的一个人物；</p><p>怎么说呢，感觉厉害的人，肯定用了你不用的方法，获得了你没有的能力，时间上的大家都是一样的</p><p>唯独效率上，有高有低，所以看个人能力，对于事物的发展是不一样的；</p><h3 id="学会自我欣赏"><a href="#学会自我欣赏" class="headerlink" title="学会自我欣赏"></a>学会自我欣赏</h3><blockquote><p>本章小结</p><p>　　·一定时候，在能熟练运用组块资料之后，你应尽量不再去纠结于每一个小细节，而是自然而然地去解决问题。</p><p>　　·有些学生能快速掌握材料，和他们一起学习确实会给人不小的打击。但是“平均水平”的学生常常在主动性上、做好事情的能力上以及创造力上都有优势。</p><p>　　·把握创造力的一部分关键是要能从专注模式转换到更放松的、白日梦一般的发散模式。</p><p>　　·太过专注会阻碍你发现真正要找的答案——就像用锤子钉一颗螺钉，因为你已经认定了那是一颗钉子。当你卡在一个问题上，有时候最好的方法就是把它放下，转而解决其他问题，或者干脆小睡一会儿。</p></blockquote><p>1.想一想，自己有没有在哪个领域坚持不懈，并如愿以偿。或者，有没有一个新的领域，让你想坚持一下？在低迷时期，觉得自己停滞不前时，你有没有什么后备计划？</p><p>计算机，虽然本人也是科班出生，但想来在读书的时候，我并没有真正入门，很多时候，这些知识，跟我就像没有关系似的，体会没有那么深；</p><p>直到多年的努力工作，才渐渐的摸到了门槛，知道原来自己到底在学些什么东西，才知道自己要学什么；</p><p>至于后备的计划，自己默默努力就够了，说出来很容易遭到打脸；</p><p>2.人们经常希望自己别再发呆神游了，因为这会打断他们真正要专注的活动，比如认真听一堂重要的课。下面哪种方式对你更有效——强迫自己保持专注？或是意识到自己神游时再把自己的注意力拉回来？</p><p>我觉得很多时候，这里不是发呆神游，而是专注力的偏移，并没有让自己在核心问题上继续专注，我觉得这个问题，需要定个目标，定时的提醒自己，有没有神游，想到的问题，和现在专注的问题是否有关系；</p><h3 id="塑造你的大脑"><a href="#塑造你的大脑" class="headerlink" title="塑造你的大脑"></a>塑造你的大脑</h3><blockquote><p>  本章小结<br>　　·大脑发育的速度因人而异。许多人的大脑在25岁后才发育成熟。<br>　　·在科学界，许多令人敬仰的重量级人物，起初显然是前途渺茫的问题少年。<br>　　·在科学、数学、技术领域取得成功的专业人士，逐渐习得的一个特质，<strong>就是学会如何组块——提炼关键思想。</strong>（现今社会，学科越来越复杂，如何很好的掌握这些知识，并不是越复杂越好，而是越简单，越清晰越好）<br>　　·比喻或实体类比也能构造组块，这些组块能使一个截然不同的领域的概念对另一个领域产生影响。<br>　　·无论你当前或今后有怎样的职业道路，要有开放心态，保证自己的学习宝库中常备数学和科学知识。你能因此储存更多的组块，从而更精明地应对生活、工作中的各种困难和挑战。</p></blockquote><p>　学习提升</p><p>1.在圣地亚哥·拉蒙-卡哈尔的职业生涯中，他找到一种能将自己的艺术热忱与科学痴迷结合起来的方式。你所认识的名人、亲友或熟人身上有过相似的经历吗？你的生活中会有这种结合吗？</p><p>很遗憾，我们生活在中国不是富裕的家庭，从小我喜欢画画，可是因为没有进一步的引导，所以我没有相关的结合，但是如果让我说，画画真是一门锻炼耐心的艺术，它从不要求你，一笔而成；</p><p>多年以后我似乎忘记了这个道理，其实工作也是这样，而且很多事情也是这样，我们总是害怕下笔，总是想着一笔就好，可是，实际情况却不是这样的，它也像绘画一样，从不合适的第一笔开始，认真灌注的修正你前一笔，不断导向一个好的结果；</p><p>2.你怎样才能避免陷入这种思维方式，认为反应快的人更聪明？</p><p>其实我觉得，反应快确实很聪明，我不必和作者相同观点，但是我也觉得很多时候，人更需要的是智慧，所以如何磨练智慧才是关键的，聪明能帮助你加速，但是智慧能让你更持久…</p><p>3.中规中矩地做事有利有弊。拿卡哈尔的人生与自己做对比。什么时候按别人说的做才真正有益？自己是否曾按别人说的做却无意办了错事？</p><p>这个不是很涉及到学习方面了，这里我的理解应该说是，为什么按别人说的会错呢？</p><p>别人明明就成功了，这是因为每个人都不同，不管是思想还是身体，都有很大差别，而且还有更多这两项以外的事情；</p><p>我是一个软件工程师，但是多年的经验总结跟我说，你没有真正懂得别人的意思，没有真正分析别人给予的建议在自己身上是否行得通。</p><p>4.与卡哈尔的缺点相比，你自身的局限是什么？你怎样才能将自己的劣势转变为优势呢？</p><p>作者列举的这位科学家在我看来，还算很好的了，我自己的局限，在我长期的思想与身体不断磨合下，想做出一定的改变的时候，发现很困难；</p><p>这个是我最近才发现的，我原来的观点总是以为说，我只要改变我的思想就可以了，后面觉得不靠谱，又想改变身体，来帮助思想改变，发现很困难；</p><p>这份困难，是我长期的习惯，思想不断在我的身体上印下的痕迹，他们共同推动着我，改变着我，我以为我改变了周遭，结果是周遭改变了我；</p><p>但是好在这个发现以后会成为我最大的优势，我一直着力于改变自己，然后改变所处的环境；</p><p>在以后，我将重复利用“复利”对自己的身体投资然后逐步影响自己的思想，改变自己的一些性格；</p><h3 id="借方程的诗歌打开心灵之眼"><a href="#借方程的诗歌打开心灵之眼" class="headerlink" title="借方程的诗歌打开心灵之眼"></a>借方程的诗歌打开心灵之眼</h3><blockquote><p>　本章小结<br>　　·方程只是抽象和简化概念的方法。这说明，方程包含的深层含义，与诗歌中的深层内涵有相似之处。<br>　　·你的“心灵之眼”之所以重要，是因为它帮你在脑中排演，并把学过的知识拟人化。<br>　　·迁移是把所学知识从一个知识背景应用到别处的能力。<br>　　·关键是要掌握一个数学概念的组块精髓，这会有利于概念迁移和将之应用到新途径中。<br>　　·在学习过程中一心多用会让学习无法深入，这样会限制你迁移所学知识的能力。</p></blockquote><p>学习提升<br>1.写一首方程之诗，用几句话展现一个标准方程背后的内涵。</p><p>一般的方程其实都是一个等式，例如最基本我现在在学习的 $y = Wx+d$ 这样</p><p>一个简单的线性方程，却是一个深度学习的关键，在我学习的过程中，我逐渐的发现，原来我学数学的概念其实都是很错误的；</p><p>而原来的老师也没有强调数学的一些概念，其实很多的符号是为了标识一个动态的过程，方程的概念是为了演化，是一个动态的过程，方程从来不只静止的；</p><p>听上去好像很别扭，但是我真正理解以后，我发现，自己比以前更理解数学了，就像一个简单的$+$其实是两个数的合并过程，我原来的理解不是这样，而是一个死去的概念，就是一个加，然后得到结果；</p><p>死去的概念很容易就背下来了，但是这样就会导致，我跟数学产生了距离，到后面因为记不下一些概念，而感觉学习能力下降很多。</p><p>2.写写如何对你在学的一些概念进行自导自演。你认为这场戏里的各位角色会有哪些现实感受，又会发生怎样的互动？</p><p>还拿数学举例吧…</p><p>我原来的概念就像刚才的那个公式 $y = Wx+b$</p><p>这个公式我们上初中就认识到了的，但是这个公式居然可以用来进行深度学习，却是我在学习深度学习以后才认识到的；</p><p>原来我的理解一直就停留在了二维的平面上，然后它就仅仅是条线而已；</p><p>但是现在再来理解这个方程就不一样了，这个方程被富裕了新的概念，而这个所谓的变量x，也由原来的一维概念，转变为了多维的视角；</p><p>这个过程中，数与数的变化，是动态的关系，这个公式只是记录了动态的规律，根据W和x的变化，可以不断地升维，降维，放大/缩小,旋转，+b平移;</p><p>变化得更加鲜活，同时我对于深度学习做了一些什么事情，也更加的理解；</p><p>然后到了高中以后的学习，老师依然也不阐述一些与实际相关的知识，像$sin(x),cos(x) ,tan(x)$这些，没有真正的明白这些公式如何活过来。</p><p>后面同样是深度学习$y = a (Wx+b)$ 利用的就是a这个激活函数，来不端的弯曲，让方程得到很完美的线条…</p><p>3.拿出一个你学过的数学概念，看看这个概念是怎样应用到具体实例中的。退回一步看看这个应用实例，你是否可以体会到其背后存在的抽象概念组块。你能想出一个完全不同的方式去运用那个概念吗？</p><p>这个暂时没有，我知识理解了数学如何活着，让概念不仅仅只是停留在概念上面，让概念活性增加，结合一些生活中的实际运用，这样，才能更好的理解一些东西，上面有阐述相关的例子；</p><h3 id="学习的复兴"><a href="#学习的复兴" class="headerlink" title="学习的复兴"></a>学习的复兴</h3><blockquote><p>本章小结</p><p>　　·自主学习是一种最深入、最有效的学习方式：<br>　　·自主学习能够提高你独立思考的能力；<br>　　·有时它会帮你解答出老师的奇怪考题。<br>　　·在学习中，毅力往往比智力更重要。<br>　　·锻炼自己去接触那些你敬仰的人。你会结识学识渊博的新导师，往往他们的一席话可能会改变你的未来。但是请爱惜他们的时间。<br>　　·如果你没能快速掌握学习材料的重点，不要灰心。常让人惊讶的是，“学得慢”的学生会抓住根本问题，而这些部分通常为进度较快的学生所遗漏。真正了解前因后果能让你从更深层次理解问题。<br>　　·人人都是既有竞争意识又有合作意识。总是会有人批评或低估所有你付出的努力，你要学着对这些问题淡然处之。</p></blockquote><p>　学习提升<br>1.没有正式学习项目的引导，自学会有哪些优势和劣势？</p><p>优势：自己会获取到更加积极主动的心态，更能将学到的知识进行内化到自己的生活和下次的学习过程中；</p><p>劣势：抓不到重点，很容易浪费太多的时间，本以为是重点的地方，其实很多时候，都有人提出了更方便的方法，只需要简单理解就可以；</p><p>2.在维基百科上查询短语——自学成才的名单（list of autodidacts），看看在为数众多的自学成才者当中，你最想效仿哪一位？为什么？</p><p>看了这份名单让我更加的相信，这个世界上天才真的多到爆炸了；</p><p>太多了，我暂时也不清楚我需要效仿哪位大咖，不过书里面提到了一个学习方法：费曼学习方法，暂时效仿一下；</p><p>还有就是柳比歇夫的记录法，这个需要长期练习；</p><p>3.从熟人中选出一个你颇为钦佩但从未交谈过的人（不能是名人）。做个搭讪计划，从问候和自我介绍开始，然后采取行动。</p><p>哎，这里也让我感叹，几乎没有，我钦佩的，感觉自己逐渐长大的过程中，对于别人的认识深刻以后，很少有那种让自己钦佩的；</p><p>在这里这样说，不是为了装逼，而是认真思考过以后的，可能因为自己的工作，让自己的圈子渐渐变窄，亦或者是自己不断的赶超别人中，渐渐的发现自己于周遭的人拉近了距离，所以暂时没有吧。</p><p>原来肯定是有的，印象深刻，影响深远；</p><h3 id="避免自负"><a href="#避免自负" class="headerlink" title="避免自负"></a>避免自负</h3><blockquote><p>　本章小结<br>　　·即使你自信一切没有任何问题，专注模式还是会让你不经意地犯下致命的错误。温故知新，不同的神经活动过程可以让你重新审视结果，抓出错误。<br>　　·和愿意提出不同见解的伙伴一起讨论，可以：</p><p>　　·找出你想法中的错误；<br>　　·更容易学会随机应变，更好地应对有压力的处境；<br>　　·确保你真的理解了你想让别人解释的知识，巩固已有的知识并提高学习能力；</p><p>　　·建立起重要的职业关系，帮你做出更好的选择。<br>　　·学习中的批评，无论你是批评者还是被批评者，都应该客观对待。它们是在帮助你理解所处理的问题。</p></blockquote><p>　学习提升</p><p>1.举一个例子：你原本对某件事百分之百确定，结果却证明你是错的。经过这样或类似的事情，你是否更听得进别人对你想法的批评了呢？</p><p>其实很多时候，我经常会有这样的时候，所以我总是反思自己，可是渐渐的因为圈子问题，或者说，因为自己的职位关系，已经很少有人对我的想法进行批评了，更多的时候来自我的老婆；</p><p>这个时候我经常会想，或许我真的该好好珍惜老婆给予的批评，总是能让我及时的警醒，很多时候我像书里面的人仿佛生病一般，没有了自我的否定，总是做一些不切实际的事情，但总是受到我老婆的帮助；</p><p>虽然我的领导偶尔也批评我，但可能是我一直都是在前进努力中，所以到现在，基本没有批评的时候了，都是我自己不断的质疑和检查自己，我想或许我应该从更多的方向，提醒告诫自己；</p><p>2.如何使你们的学习小组更有效率？</p><p>这个问题确实有点难，毕竟很多人的想法都需要统一，但是不妨碍我们在学习的方式上进行交流，但我在这里想，或许更应该的是找那些总是积极主动学习的人才是；</p><p>3.如果你所在的小组讨论的不是你的学习内容，该如何处理？</p><p>类比吧，很多时候，我们应该学会就算不是自己学习的内容，也不妨坐下来认真听一听，别人是怎么样想的，或许会有意想不到的收获；</p><p> 我在课上反复强调，先思考再计算。我很不喜欢很多学生用的“公式法”，而且我发现自己必须经常提醒他们，方程不只是一个有输入有输出的表达式。方程描述了我们的物理世界如何运转（后面这段，我直到多年才理解起来，为什么说方程描述了运转，这是个抽象的概念），对于我来说，理解一个方程的关键，在于理解它所描述的故事。对方程的定性理解远比定量计算出答案更重要。</p><h3 id="参加考试"><a href="#参加考试" class="headerlink" title="参加考试"></a>参加考试</h3><p>考试本身就是效果非凡的学习经历</p><p>备考检查清单<br>　　只有经常做到以下描述的事情，才能回答“是”（偶尔做到或从没做到选“否”）。<br>　　家庭作业</p><p>1.你有没有尽力去理解课本内容？（带着目的去找相关例题不算在内。）</p><ul><li><p>[ ] 是</p></li><li><p>[ ] 否　</p></li></ul><p>2.你是否有跟同学一同解决作业问题，或者至少跟他们核对过答案？</p><ul><li><p>[ ] 是</p></li><li><p>[ ] 否　</p></li></ul><p>3.你在跟同学合作之前，有没有先试着自己大致写出每道题的解法？<br>  备考你记下的回答中“是”越多，说明你复习得越好。如果你的回答里有两个及以上的“否”，那你可能要认真考虑在下次考试前改变一下复习策略。</p><ul><li><p>[ ] 是</p></li><li><p>[ ] 否　</p></li></ul><p>4.你是否积极地参与了家庭作业的小组讨论（贡献点子，提出问题）？</p><ul><li><p>[ ] 是</p></li><li><p>[ ] 否　</p></li></ul><p>5.当你遇到困难的时候，有没有请教老师或助教？</p><ul><li><p>[ ] 是</p></li><li><p>[ ] 否　</p></li></ul><p>6.你交作业的时候，是否完全理解了所有问题的答案？</p><ul><li><p>[ ] 是</p></li><li><p>[ ] 否　</p></li></ul><p>7.当不明白家庭作业的题目解法时，你有没有在课上提问寻求解释？</p><ul><li><p>[ ] 是</p></li><li><p>[ ] 否　</p></li></ul><p>8.如果你有学习指导手册，你有在考试前仔细通读过一遍吗？确定手册上的所有题目都会做了吗？</p><ul><li><p>[ ] 是</p></li><li><p>[ ] 否　</p></li></ul><p>9.你有没有试过快速列出解题纲要，而不在基础计算上花时间？</p><ul><li><p>[ ] 是</p></li><li><p>[ ] 否　<br>10.你是否有和同学一起复习过学习指导手册和问题，并互相提问？</p></li><li><p>[ ] 是</p></li><li><p>[ ] 否　</p></li></ul><p>11.如果考前有复习课，你是否参加过，并在课上提出任何你不太确定的问题？</p><ul><li><p>[ ] 是</p></li><li><p>[ ] 否　</p></li></ul><p>12.你在考前有没有保证合理的睡眠？（如果这个问题的答案是“否”的话，那前面1~11的答案可能都不重要了。）</p><ul><li><p>[ ] 是</p></li><li><p>[ ] 否　</p></li></ul><p>总分</p><blockquote><p>　　本章小结<br>　　·考前一晚睡眠不足会让你之前所做的任何其他准备都付之东流。<br>　　·考试是一件严肃的事。像战斗机飞行员或医生一样仔细检查备考清单，能大幅度地提高你的成功率。<br>　　·就像由难入简法，一些有悖常识的策略会让你的大脑有机会反思难度更大的题目，就算当时你正专注于解答其他更直观浅显的题目。<br>　　·在压力下人的身体会释放出一些化学物质。让一切结果决然不同的关键，就在于你如何看待身体对这些化学物质的反应。如果你转变思维，不去想“我好怕这次考试”，而是想“这次考试让我好激动，我要做到最好”，你的表现会大有改观。<br>　　·如果你在考试中感到恐慌，可以暂时把注意力转移到自己的呼吸上来。放松腹部，把手放在上面，慢慢地深吸一口气。你应感到手在向外移动，甚至同时感到整个胸腔如一个膨胀的桶在向外扩张。<br>　　·你的大脑会欺骗你，让你以为自己做的就是对的，即使事实并非如此。这意味着，只要条件允许，你应该跳过它，转移一下注意力，然后从全局视角二次检查自己的答案，问自己：“这样解答真的合理吗？”</p></blockquote><p>学习提升</p><p>1.考试之前，有个尤其重要的准备步骤是什么？（提示：如果这一步没做到，其他的准备都不重要了。）</p><p>进行备考清单，并练习深呼吸，这里可能我还没有吸收到作者的更明显的意图，我需要在今后的练习中，不断思考这个问题；</p><p>2.请说明，若在考试中运用由难入简法，你如何判断何时该让自己从一道难题中抽身？</p><p>时间，分数，分数决定了自己应该倾注的时间有多少，而难易程度又告诫自己，不必浪费更多的时间，而且本身从一开始看难题只是为了让自己有个思路，即使没有，在后面的思维发散过程中，会有这样的思路；</p><p>3.据建议，深呼吸法有助于缓解恐慌感。在你看来，为什么讨论中要强调，呼吸时不仅要让上胸腔扩张也要让腹部起伏？</p><p>这里都说是深呼吸了，当然要够深了，这里其实是只有这样做，才能很好的把氧气送入大脑中，让自己能够缓解焦虑，让自己放松下来</p><p>4.你觉得在考试中，为什么检查答案前要先试着转移一下注意力？</p><p>如果不进行发散思维，你根本就是沿着前面的思路进行，我经常有这样的感觉，自己从来不检查答案，因为我没有办法说是检查出问题来，这里就是因为一直处在了专注思维中，所以总是无法发现问题出在了哪里；</p><h3 id="释放无限潜力"><a href="#释放无限潜力" class="headerlink" title="释放无限潜力"></a>释放无限潜力</h3><h4 id="10个好的学习法则"><a href="#10个好的学习法则" class="headerlink" title="10个好的学习法则"></a>10个好的学习法则</h4><p>1.运用回想。读完一页书，看向别处并回想主要观点。少做标记，没记住之前不要画重点，要先回忆。在去教室的路上或不同于先前学习空间的室内，试着回忆要点。回忆的能力，即能够得到自己心中的想法，是学好知识的关键标志之一。</p><p>  2.自我测试。任何内容皆可测试。无论何时皆可测试。抽认卡片是你的良师益友。</p><p>  3.对问题进行组块。搭建组块的过程就是理解问题、练习解题方法的过程，有了组块才能在脑中瞬间闪现答案。解决一个问题之后，要将其重新排演一遍。确保在许久没接触这道题后，你还能解答出问题的每个步骤。把问题当成一首歌，在心里学着一遍遍地唱，这样让信息合成为一个流畅的组块，任何时候都能任你提取使用。</p><p>  4.间隔开重复动作。无论学哪门课，不要安排得太集中，要像运动员一样每天安排些练习量。你的大脑就像一块肌肉，它一次只能处理某学科上一定的练习量。</p><p> 5.在练习中交替使用不同解题技巧。做任何练习的期间不要只用一种解题技巧，否则一段时间过后，你只是在模仿自己之前解题的老路子。解题方法要混合使用在不同的题型上。这么做会让你同时知道如何以及何时用一个解题方法。（书本一般都不会以这样的方式编写，所以你需要靠自己去这么做。）每一门作业和考试之后，要回顾错题，确保理解自己的犯错原因，之后重新解答一遍。想要最高效地学习，就在抽认卡片的一面用手写（别用键盘打字）下问题，再在另一面写下答案。（用手书写比起打字时构建的神经结构更坚实。）如果你想把它上传到智能手机的应用软件里，你也许会把卡片拍下来。你可以用不同的题型随机测试自己。另一个测试自己的方法，是随机翻开书本挑一个问题，看看自己能不能在很久没碰这道题之后还能给出解答。</p><p>  6.注意休息。有一种常见现象，是学数学或科学时，你会难以解答或理解一些初次遇到的问题或概念。这就是为什么每天学一点，比集中在一天学会好很多。当你对一道数学或科学上的难题灰心丧气时，可以休息一下，这样你大脑的另一部分就能在后台接着工作。</p><p>  7.使用解释性的提问和简单类比。无论何时遇到难懂概念的困扰，都要自己想一想，怎样解释才能让10岁小孩都明白这个概念？使用类比真的有用，比如电流就像水流。不要只想解释，要大声说出来或者写下来。凭着嘴上说手上写的功夫，你能把所学知识编译（将知识转换到神经记忆结构中）到更深的记忆中。</p><p>  8.专注。关掉手机和电脑上所有会干扰你的提示音和闹铃，并在计时器上设定25分钟。你要在25分钟之内集中注意力，并尽可能勤奋工作。计时器的时间一到，给自己一个小小的、有趣的奖励。一天中安排几个这样的工作期间，能实实在在地推进你的学习进度。试着规定学习时间和地点，不要瞄电脑和手机，让学习变得自然而然。</p><p>  9.困难的事情最先做。最清醒的时候，要去做一天中最困难的事情。</p><p>  10.心理对照。想象过去的你，对比通过学习能够成就的那个自己。在你的工作区域贴一张图或几句话来提醒自己的梦想。如果觉得自己缺乏动力了，就看看它们。对你和你爱的人，这么做一定值得！</p><h4 id="10个坏的学习法则"><a href="#10个坏的学习法则" class="headerlink" title="10个坏的学习法则"></a>10个坏的学习法则</h4><p>你要避免这些方法，因为它们会浪费你的时间，甚至还会让你以为自己真的在学习！<br>1.被动重复阅读。很被动地坐着看书，目光再次扫过书页上看过的内容。除非你能闭卷回忆要点，证明读过的材料进入了你的大脑，否则重复阅读就是浪费时间。</p><p>  2.满眼尽是重点标记。在文中标记重点，会让大脑以为自己已经记住了学习内容，但实际上你只是手上动动（大脑记没记就不一定了）。在书上各处适当标记是不为过的，有时它会帮你突出重点。但是，如果把它当成辅助记忆的工具，就要确保自己标记下的内容也记在脑子里了。</p><p>  3.瞟一眼解题方法，就觉得胸有成竹。这是学生学习时所犯的最糟糕的一个错误。你要做到的，是不看答案也能一步步解决问题。</p><p>  4.等到火烧眉毛才开始学习。你会在田径运动会开始前的最后一刻才开始猛练一番吗？你的大脑如同一块肌肉，它每次在一个科目上能够应付的练习量是有限的。</p><p>  5.已经清楚解法，但仍反复解答同一题型。如果练习中你只是坐在那解决相似的问题，你实际并没有在备考，而这就像一场盛大的篮球赛来临之际，你却只做控球这一种练习。</p><p>  6.与朋友一起把学习变成了闲聊。和朋友核对解题方法，拿自己知道的问题相互提问，这会让学习更有趣，同时暴露你的思维缺陷，并让你的学习更深入。但是，如果任务还没完成，共同学习却成了闲谈打趣，你可就在浪费时间了，这时就该换个学习小组了。</p><p>  7.做题前忽视读课本。还不会游泳的时候你会轻易跳进泳池吗？教科书就是你的游泳教练，它会指引你通向答案。如果嫌麻烦而疏于读书，你不仅会犯错，还会浪费时间。在你开始读书之前，快速浏览一遍章节和板块内容，能让你对它有个大致的概念。</p><p>  8.有疑问点，却不找导师或同学核对并解决。教授会习惯性地为那些充满困惑的学生指点迷津——这是我们教师的职责。让我们担心的是不来提问的学生。希望你别成为其中之一。</p><p>  9.时常分心，却还以为自己能学得足够深入。每次受到即时短信或谈话的影响，你能在学习上投入的脑力都会变得更少。每一次被打断注意力，小小的神经都会被再次连根拔起，无法在脑中扎根生长。</p><p>  10.睡眠不足。睡眠中，你的大脑会将解题技巧拼凑在一起，同时它也会对你睡前习得的任何内容进行反复练习。长时间的疲劳会让毒素在脑中堆积，毒素会破坏神经连接，让你无法用它们快速有效地思考。如果考前没睡好，就算之前做过怎样的努力也无济于事。</p><p>总结：</p><p>到这里已经把整本书给读完了，但是真正要学会的是书中真正运用的技巧，上面有我摘抄作者最精简的观点，也是整本书的核心所在，往后的日子我会多多抽时间进行复习和查阅，并把这些习惯融入到我自己的生活和学习中，让他们真正发挥出作用。</p><p>读万卷书，不如行万里路，书要读，路要走，两手一起抓，这样才能走得快，看得远；</p>]]></content>
      
      
      <categories>
          
          <category> 书籍 </category>
          
          <category> 想法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 书籍 </tag>
            
            <tag> 思考 </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>乍看很难，细看很美-傅里叶变换</title>
      <link href="/2018/09/05/%E4%B9%8D%E7%9C%8B%E5%BE%88%E9%9A%BE%EF%BC%8C%E7%BB%86%E7%9C%8B%E5%BE%88%E7%BE%8E-%E5%82%85%E9%87%8C%E5%8F%B6%E5%8F%98%E6%8D%A2/"/>
      <url>/2018/09/05/%E4%B9%8D%E7%9C%8B%E5%BE%88%E9%9A%BE%EF%BC%8C%E7%BB%86%E7%9C%8B%E5%BE%88%E7%BE%8E-%E5%82%85%E9%87%8C%E5%8F%B6%E5%8F%98%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 傅里叶变换 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 傅里叶变换 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法之旅-列表搜索</title>
      <link href="/2018/09/04/%E7%AE%97%E6%B3%95%E4%B9%8B%E6%97%85-%E5%88%97%E8%A1%A8%E6%90%9C%E7%B4%A2/"/>
      <url>/2018/09/04/%E7%AE%97%E6%B3%95%E4%B9%8B%E6%97%85-%E5%88%97%E8%A1%A8%E6%90%9C%E7%B4%A2/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 列表 </tag>
            
            <tag> 搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法之旅-图表搜索</title>
      <link href="/2018/09/04/%E7%AE%97%E6%B3%95%E4%B9%8B%E6%97%85-%E5%9B%BE%E8%A1%A8%E6%90%9C%E7%B4%A2/"/>
      <url>/2018/09/04/%E7%AE%97%E6%B3%95%E4%B9%8B%E6%97%85-%E5%9B%BE%E8%A1%A8%E6%90%9C%E7%B4%A2/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 搜索 </tag>
            
            <tag> 图表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法之旅-聚类</title>
      <link href="/2018/09/04/%E7%AE%97%E6%B3%95%E4%B9%8B%E6%97%85-%E8%81%9A%E7%B1%BB/"/>
      <url>/2018/09/04/%E7%AE%97%E6%B3%95%E4%B9%8B%E6%97%85-%E8%81%9A%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="简介-聚类算法百度百科"><a href="#简介-聚类算法百度百科" class="headerlink" title="简介^聚类算法百度百科"></a>简介<a href="https://baike.baidu.com/item/%E8%81%9A%E7%B1%BB%E7%AE%97%E6%B3%95" target="_blank" rel="noopener">^聚类算法百度百科</a></h2><p>聚类分析又称群分析，它是研究（样品或指标）分类问题的一种统计分析方法，同时也是数据挖掘的一个重要算法。</p><p>聚类（Cluster）分析是由若干模式（Pattern）组成的，通常，模式是一个度量（Measurement）的向量，或者是多维空间中的一个点。</p><p>聚类分析以相似性为基础，在一个聚类中的模式之间比不在同一聚类中的模式之间具有更多的相似性。</p><h2 id="算法起源"><a href="#算法起源" class="headerlink" title="算法起源"></a>算法起源</h2><p>俗话说：“物以类聚，人以群分”，在自然科学和社会科学中，存在着大量的<strong>分类问题</strong>。</p><p>所谓类，通俗地说，就是指相似元素的集合。</p><p>聚类分析起源于分类学，在古老的分类学中，人们主要依靠经验和专业知识来实现分类，很少利用数学工具进行定量的分类。</p><p>随着人类科学技术的发展，<strong>对分类的要求越来越高</strong>，以致有时仅凭经验和专业知识难以确切地进行分类，于是人们逐渐地把数学工具引用到了分类学中，<strong>形成了数值分类学</strong>，之后又<strong>将多元分析的技术引入到数值分类学形成了聚类分析</strong>。</p><p>聚类分析内容非常丰富，有系统聚类法、有序样品聚类法、动态聚类法、模糊聚类法、图论聚类法、聚类预报法等。</p><h2 id="算法用途"><a href="#算法用途" class="headerlink" title="算法用途"></a>算法用途</h2><p>聚类的用途是很广泛的。</p><p>在商业上，聚类可以帮助市场分析人员从消费者数据库中区分出不同的消费群体来，并且概括出每一类消费者的消费模式或者说习惯。</p><p>它作为数据挖掘中的一个模块，可以作为一个单独的工具以发现数据库中分布的一些深层的信息，并且概括出每一类的特点，或者把注意力放在某一个特定的类上以作进一步的分析；</p><p>并且，聚类分析也可以作为数据挖掘算法中其他分析算法的一个预处理步骤。</p><p>聚类分析的算法可以分为<strong>划分法</strong>（Partitioning Methods）、<strong>层次法</strong>（Hierarchical Methods）、<strong>基于密度的方法</strong>（density-based methods）、<strong>基于网格的方法</strong>（grid-based methods）、<strong>基于模型的方法</strong>（Model-Based Methods）。</p><h2 id="聚类要求"><a href="#聚类要求" class="headerlink" title="聚类要求"></a>聚类要求</h2><h3 id="可伸缩性"><a href="#可伸缩性" class="headerlink" title="可伸缩性"></a>可伸缩性</h3><p>许多聚类算法在小于 200 个数据对象的小数据集合上工作得很好；</p><p>但是，一个大规模数据库可能包含几百万个对象，在这样的大数据集合样本上进行聚类可能会导致有偏的结果。</p><p>我们需要具有高度可伸缩性的聚类算法。</p><p><strong>这里的理解应该是有弹性，聚类的分类的标准应该是弹性的区间，如果死死的固定区间，那么就会存在游离所聚之类的外面；</strong></p><h3 id="不同属性"><a href="#不同属性" class="headerlink" title="不同属性"></a>不同属性</h3><p>许多算法被设计用来聚类数值类型的数据。</p><p>但是，应用可能要求聚类其他类型的数据，如<strong>二元类型</strong>(binary)，<strong>分类/标称类型</strong>（categorical/nominal），<strong>序数型</strong>（ordinal）数据，或者这些数<strong>据类型的混合</strong>。</p><p><strong>聚类不能仅仅给定一个数值区间就可以了的，如上所述在真正的应用过程中，聚合的应该是多属性的数据，多条件的聚合；</strong></p><h3 id="任意形状"><a href="#任意形状" class="headerlink" title="任意形状"></a>任意形状</h3><p><strong>许多聚类算法基于欧几里得或者曼哈顿距离度量来决定聚类（常用聚类算法）。</strong>基于这样的距离度量的算法趋向于发现具有相近尺度和密度的<strong>球状簇</strong>。但是，一个簇可能是任意形状的。<strong>提出能发现任意形状簇的算法是很重要的。</strong></p><p><strong>应该说真正符合现实需求的聚类算法通常的是复杂的，而不是简单的球形结构，应该是任意形状，而又同时符合真正聚合需求的算法。</strong></p><h3 id="领域最小化"><a href="#领域最小化" class="headerlink" title="领域最小化"></a>领域最小化</h3><p>许多聚类算法在聚类分析中要求用户输入一定的参数，例如希望产生的簇的数目。<strong>聚类结果对于输入参数十分敏感。</strong></p><p><strong>参数通常很难确定，特别是对于包含高维对象的数据集来说。</strong>这样不仅加重了用户的负担，也使得聚类的质量难以控制。</p><p><strong>没有真正的对于数据精分，对于聚类的模型没有真正设计到位，才产生了聚类质量难于控制，让用户过多的选择。</strong></p><h3 id="处理“噪声”（干扰）"><a href="#处理“噪声”（干扰）" class="headerlink" title="处理“噪声”（干扰）"></a>处理“噪声”（干扰）</h3><p><strong>绝大多数现实中的数据库都包含了孤立点，缺失，或者错误的数据</strong>。一些聚类算法对于这样的数据敏感，可能导致低质量的聚类结果。</p><p><strong>需要考虑到这种噪点类型数据的量，以及对于聚类整个的模型有何干扰，才能真正避免这类型数据造成的影响。</strong></p><h3 id="记录顺序"><a href="#记录顺序" class="headerlink" title="记录顺序"></a>记录顺序</h3><p>一些聚类算法对于输入数据的顺序是敏感的。</p><p>例如，同一个数据集合，当以不同的顺序交给同一个算法时，可能生成差别很大的聚类结果。开发对数据输入顺序不敏感的算法具有重要的意义。</p><p><strong>应当避开涉及到数据顺序的问题，聚类算法真正需要聚合的对象是什么来操作；</strong></p><h3 id="高维度（high-dimensionality）"><a href="#高维度（high-dimensionality）" class="headerlink" title="高维度（high dimensionality）"></a>高维度（high dimensionality）</h3><p>一个数据库或者数据仓库可能包含若干维或者属性。</p><p><strong>许多聚类算法擅长处理低维的数据，可能只涉及两到三维。</strong></p><p><strong>人类的眼睛在最多三维的情况下能够很好地判断聚类的质量。</strong></p><p><strong>在高维空间中聚类数据对象是非常有挑战性的</strong>，特别是考虑到这样的<strong>数据可能分布非常稀疏</strong>，<strong>而且高度偏斜。</strong></p><p><strong>多条件的进行聚合，其实这里可以对比空间数据的聚合，会更好的理解他所说的这段话</strong></p><h3 id="基于约束"><a href="#基于约束" class="headerlink" title="基于约束"></a>基于约束</h3><p>现实世界的应用可能需要在各种约束条件下进行聚类。</p><p>假设你的工作是在一个城市中为给定数目的自动提款机选择安放位置，为了作出决定，你可以对住宅区进行聚类，同时考虑如城市的河流和公路网，每个地区的客户要求等情况。</p><p><strong>要找到既满足特定的约束，又具有良好聚类特性的数据分组是一项具有挑战性的任务。</strong></p><h3 id="解释性-可用性"><a href="#解释性-可用性" class="headerlink" title="解释性-可用性"></a>解释性-可用性</h3><p><strong>用户希望聚类结果是可解释的，可理解的，和可用的</strong>。</p><p>也就是说，<strong>聚类可能需要和特定的语义解释和应用相联系。</strong></p><p><strong>应用目标如何影响聚类方法的选择也是一个重要的研究课题。</strong></p><hr><p>记住这些约束，我们对聚类分析的学习将按如下的步骤进行。</p><p>首先，学习不同类型的数据，以及它们对聚类方法的影响。</p><p>接着，给出了一个聚类方法的一般分类。</p><p>然后我们详细地讨论了各种聚类方法，包括<strong>划分方法</strong>，<strong>层次方法</strong>，<strong>基于密度的方法</strong>，<strong>基于网格的方法</strong>，以及<strong>基于模型</strong>的方法。最后我们探讨在<strong>高维空间中的聚类</strong>和<strong>孤立点分析（outlier analysis）</strong>。</p><blockquote><p>这里的聚类要求，几乎包含了所有的种类的聚类情况，实际的应用过程中，可能不会有那么多，但是如果所涉及到的要求越高，要求精度越高，那么达成上面所有要求也成为了基本要求；</p></blockquote><h2 id="算法分类"><a href="#算法分类" class="headerlink" title="算法分类"></a>算法分类</h2><p><strong>很难对聚类方法提出一个简洁的分类，因为这些类别可能重叠，从而使得一种方法具有几类的特征</strong>，尽管如此，对于各种不同的聚类方法提供一个相对有组织的描述依然是有用的，为聚类分析计算方法主要有如下几种：</p><h3 id="划分法"><a href="#划分法" class="headerlink" title="划分法"></a>划分法</h3><p>划分法(partitioning methods)，给定一个有N个元组或者纪录的数据集，分裂法将构造K个分组，每一个分组就代表一个聚类，K&lt;N。而且这K个分组满足下列条件：</p><p>（1） 每一个分组<strong>至少包含一个数据</strong>纪录；<br>（2）<strong>每一个数据纪录属于且仅属于一个分组</strong>（注意：<strong>这个要求在某些模糊聚类算法中可以放宽</strong>）；</p><p>对于给定的K，算法首先给出一个初始的分组方法，以后通过反复迭代的方法改变分组，使得每一次改进之后的分组方案都较前一次好。</p><p>而所谓好的标准就是：<strong>同一分组中的记录越近越好，而不同分组中的纪录越远越好。大部分划分方法是基于距离的。</strong></p><p>给定要构建的分区数k，划分方法首先创建一个初始化划分。</p><p>然后，它采用一种迭代的重定位技术，通过把对象从一个组移动到另一个组来进行划分。</p><p>一个好的划分的一般准备是：同一个簇中的对象尽可能相互接近或相关，而不同的簇中的对象尽可能远离或不同。</p><p>还有许多评判划分质量的其他准则。传统的划分方法可以扩展到子空间聚类，而不是搜索整个数据空间。</p><p>当存在很多属性并且数据稀疏时，这是有用的。<strong>为了达到全局最优，基于划分的聚类可能需要穷举所有可能的划分，计算量极大。</strong></p><p>实际上，大多数应用都采用了流行的启发式方法，如<strong>k-均值和k-中心算法，渐近的提高聚类质量，逼近局部最优解。</strong></p><p><strong>这些启发式聚类方法很适合发现中小规模的数据库中小规模的数据库中的球状簇</strong>。</p><p>为了发现具有复杂形状的簇和对超大型数据集进行聚类，需要进一步扩展基于划分的方法。[^数据挖掘概念与技术]</p><p>使用这个基本思想的算法有：<strong>K-MEANS算法、K-MEDOIDS算法、CLARANS算法</strong>；</p><h3 id="层次法"><a href="#层次法" class="headerlink" title="层次法"></a>层次法</h3><p>层次法(hierarchical methods)，这种方法对给定的数据集进行层次似的分解，直到某种条件满足为止。具体又可分为“自底向上”和“自顶向下”两种方案。</p><p>例如，在“自底向上”方案中，初始时每一个数据纪录都组成一个单独的组，在接下来的迭代中，它把那些相互邻近的组合并成一个组，直到所有的记录组成一个分组或者某个条件满足为止。</p><p>层次聚类方法可以是基于距离的或基于密度或连通性的。层次聚类方法的一些扩展也考虑了子空间聚类。<strong>层次方法的缺陷在于，一旦一个步骤（合并或分裂）完成，它就不能被撤销。</strong></p><p>这个严格规定是有用的，因为不用担心不同选择的组合数目，它将产生较小的计算开销。然而这种技术不能更正错误的决定。已经提出了一些提高层次聚类质量的方法。[^数据挖掘概念与技术] </p><p>代表算法有：<strong>BIRCH算法、CURE算法、CHAMELEON算法</strong>等；</p><h3 id="密度算法"><a href="#密度算法" class="headerlink" title="密度算法"></a>密度算法</h3><p>基于密度的方法(density-based methods)，基于密度的方法与其它方法的一个根本区别是：它不是基于各种各样的距离的，而是基于密度的。</p><p>这样就<strong>能克服基于距离的算法只能发现“类圆形”的聚类的缺点</strong>。</p><p>这个方法的指导思想就是，<strong>只要一个区域中的点的密度大过某个阈值，就把它加到与之相近的聚类中去。</strong></p><p>代表算法有：<strong>DBSCAN算法、OPTICS算法、DENCLUE算法</strong>等；</p><h3 id="图论聚类法"><a href="#图论聚类法" class="headerlink" title="图论聚类法"></a>图论聚类法</h3><p>图论聚类方法解决的第一步是建立与问题相适应的图，<strong>图的节点对应于被分析数据的最小单元，图的边（或弧）对应于最小处理单元数据之间的相似性度量。</strong></p><p>因此，每一个最小处理单元数据之间都会有一个度量表达，这就确保了数据的局部特性比较易于处理。图论聚类法是以样本数据的局域连接特征作为聚类的主要信息源，因而其主要优点是易于处理局部数据的特性。</p><h3 id="网格算法"><a href="#网格算法" class="headerlink" title="网格算法"></a>网格算法</h3><p>基于网格的方法(grid-based methods)，这种方法首先将数据空间划分成为有限个单元（cell）的网格结构,所有的处理都是以单个的单元为对象的。</p><p><strong>这么处理的一个突出的优点就是处理速度很快，通常这是与目标数据库中记录的个数无关的，它只与把数据空间分为多少个单元有关。</strong></p><p>代表算法有：<strong>STING算法、CLIQUE算法、WAVE-CLUSTER算法</strong>；</p><h3 id="模型算法"><a href="#模型算法" class="headerlink" title="模型算法"></a>模型算法</h3><p>基于模型的方法(model-based methods)，基于模型的方法给每一个聚类假定一个模型，然后去寻找能够很好的满足这个模型的数据集。</p><p>这样一个模型可能是数据点在空间中的密度分布函数或者其它。</p><p>它的一个潜在的假定就是：<strong>目标数据集是由一系列的概率分布所决定的</strong>。</p><p>通常有两种尝试方向：<strong>统计的方案和神经网络的方案</strong>。</p><h2 id="具体方法"><a href="#具体方法" class="headerlink" title="具体方法"></a>具体方法</h2><h3 id="K-MEANS"><a href="#K-MEANS" class="headerlink" title="K-MEANS"></a>K-MEANS</h3><p>k均值聚类是最著名的划分聚类算法，由于简洁和效率使得他成为所有聚类算法中最广泛使用的。</p><p>给定一个数据点集合和需要的聚类数目k，k由用户指定，k均值算法根据某个距离函数反复把数据分入k个聚类中。</p><p>k是算法计算出的超参数，表示类的数量；</p><p>$k-means$可以自动分配样本到不同的类，但是不能决定究竟要分几个类。</p><p>k必须是一个比训练集样本数小的正整数。有时，类的数量是由问题内容指定的。</p><p>例如，一个鞋厂有三种新款式，它想知道每种新款式都有哪些潜在客户，于是它调研客户，然后从数据里找出三类。</p><p>也有一些问题没有指定聚类的数量，最优的聚类数量是不确定的。后面我将会详细介绍一些方法来估计最优聚类数量。[^风雪夜归子]</p><p>$k-means$的参数是类的重心位置和其内部观测值的位置。</p><p>与广义线性模型和决策树类似，$k-means$参数的最优解也是以成本函数最小化为目标。</p><p>$k-means$成本函数公式如下：</p><p>$$<br>J = \sum_{i=1}^{k}\sum_{j \in c_k}(x^{(j)}-\mu_i)^2<br>$$</p><p>$μi$是第$k$个类的重心位置。</p><p>成本函数是各个类畸变程度(distortions)之和。</p><p>每个类的畸变程度等于该类重心与其内部成员位置距离的平方和。</p><p>若类内部的成员彼此间越紧凑则类的畸变程度越小，反之，若类内部的成员彼此间越分散则类的畸变程度越大。</p><p>求解成本函数最小化的参数就是一个重复配置每个类包含的观测值，并不断移动类重心的过程。</p><p>首先，类的重心是随机确定的位置。实际上，重心位置等于随机选择的观测值的位置。</p><p>每次迭代的时候，Kmeans会把观测值分配到离它们最近的类，然后把重心移动到该类全部成员位置的平均值那里。</p><h4 id="算法详解"><a href="#算法详解" class="headerlink" title="算法详解"></a>算法详解</h4><p>先随机选取K个对象作为初始的聚类中心。</p><p>然后计算每个对象与各个种子聚类中心之间的距离，把每个对象分配给距离它最近的聚类中心。</p><p>聚类中心以及分配给它们的对象就代表一个聚类。</p><p>一旦全部对象都被分配了，每个聚类的聚类中心会根据聚类中现有的对象被重新计算。</p><p>这个过程将不断重复直到满足某个终止条件。终止条件可以是以下任何一个：</p><p>1)没有（或最小数目）对象被重新分配给不同的聚类。</p><p>2)没有（或最小数目）聚类中心再发生变化。</p><p>3)误差平方和局部最小。</p><h4 id="算法分析-k-means"><a href="#算法分析-k-means" class="headerlink" title="算法分析[^k-means]"></a>算法分析[^k-means]</h4><p>$k-means$ 算法接受输入量 k ；</p><p>然后将n个数据对象划分为 k个聚类以便使得所获得的聚类满足：同一聚类中的对象相似度较高；而不同聚类中的对象相似度较小。</p><p>聚类相似度是利用各聚类中对象的均值所获得一个“中心对象”（引力中心）来进行计算的。</p><p>$k-means$ 算法的工作过程说明如下：</p><p>首先从n个数据对象任意选择 k 个对象作为初始聚类中心；</p><p>而对于所剩下其它对象，则根据它们与这些聚类中心的相似度（距离），分别将它们分配给与其最相似的（聚类中心所代表的）聚类；</p><p>然后再计算每个所获新聚类的聚类中心（该聚类中所有对象的均值）；</p><p>不断重复这一过程直到标准测度函数开始收敛为止。</p><p>一般都采用均方差作为标准测度函数. </p><p>k个聚类具有以下特点：各聚类本身尽可能的紧凑，而各聚类之间尽可能的分开。</p><p>算法的时间复杂度上界为$O(n<em>k</em>t)$, 其中t是迭代次数。</p><p>$k-means$算法是一种基于样本间相似性度量的间接聚类方法，属于非监督学习方法。</p><p>此算法以k为参数，把n 个对象分为k个簇，以使簇内具有较高的相似度，而且簇间的相似度较低。</p><p>相似度的计算根据一个簇中对象的平均值（被看作簇的重心）来进行。</p><p>此算法首先随机选择k个对象，每个对象代表一个聚类的质心。</p><p>对于其余的每一个对象，根据该对象与各聚类质心之间的距离，把它分配到与之最相似的聚类中。然后，计算每个聚类的新质心。</p><p>重复上述过程，直到准则函数收敛。</p><p>$k-means$算法是一种较典型的逐点修改迭代的动态聚类算法，其要点是以误差平方和为准则函数。</p><p>逐点修改类中心：一个象元样本按某一原则，归属于某一组类后，就要重新计算这个组类的均值，并且以新的均值作为凝聚中心点进行下一次象元素聚类；</p><p>逐批修改类中心：在全部象元样本按某一组的类中心分类之后，再计算修改各类的均值，作为下一次分类的凝聚中心点。</p><h4 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h4><pre class=" language-java"><code class="language-java"></code></pre><h2 id="其他算法链接地址"><a href="#其他算法链接地址" class="headerlink" title="其他算法链接地址"></a>其他算法链接地址</h2><p><a href="http://blog.langaobai.top/2018/08/26/%E7%AE%97%E6%B3%95%E4%B9%8B%E6%97%85-%E6%8E%92%E5%BA%8F/" target="_blank" rel="noopener">算法之旅-排序算法</a></p><p><a href="http://blog.langaobai.top/2018/09/04/%E7%AE%97%E6%B3%95%E4%B9%8B%E6%97%85-%E8%81%9A%E7%B1%BB/" target="_blank" rel="noopener">算法之旅-聚类算法</a></p><p><a href>算法之旅-列表搜索算法</a></p><p><a href>算法之旅-图表搜索算法</a></p><p><a href>算法之旅-数学类算法</a></p><p><a href>算法之旅-数据压缩算法</a></p><p><a href>算法之旅-安全算法</a></p><p><a href>算法之旅-数据结构</a></p><p>[^数据挖掘概念与技术]: Jiawei Han．数据挖掘概念与技术：机械工业出版社，2012<br>[^风雪夜归子]: <a href="https://blog.csdn.net/u013719780/article/details/78413770" target="_blank" rel="noopener">https://blog.csdn.net/u013719780/article/details/78413770</a><br>[^k-means]: <a href="https://baike.baidu.com/item/K-MEANS%E7%AE%97%E6%B3%95#1_2" target="_blank" rel="noopener">https://baike.baidu.com/item/K-MEANS%E7%AE%97%E6%B3%95#1_2</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 聚类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你知道或不知道的单元测试</title>
      <link href="/2018/08/30/%E4%BD%A0%E7%9F%A5%E9%81%93%E6%88%96%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
      <url>/2018/08/30/%E4%BD%A0%E7%9F%A5%E9%81%93%E6%88%96%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h3 id="为什么现在才开始"><a href="#为什么现在才开始" class="headerlink" title="为什么现在才开始"></a>为什么现在才开始</h3><p>其实之前有看过关于Junit的测试，也实际操作并践行着，但是总觉得自己还有所欠缺着些东西；</p><p>于是想想，我应该把自己平时对于测试方面，Junit的学习认识，记录下来，然后定期的修改，增补，让自己的知识进行沉积；</p><h3 id="为什么要单元测试"><a href="#为什么要单元测试" class="headerlink" title="为什么要单元测试"></a>为什么要单元测试</h3><p>单元测试的过程，并不是最终面向客户的甚至不是面向项目经理，开发组长，而是面向程序员自己的；</p><p>单元测试一开始就不是冲着为了获得一些更好的整体质量而设计的；</p><p>那为什么程序员还需要单元测试？</p><p>一个没有用处的东西，他存在的理由究竟是什么？</p><p>首先，我们得明白<strong>什么是单元测试？</strong></p><blockquote><p>单元测试是开发者编写的一小段代码，用于检测代码的一个很小的、很明确的功能是否正确。</p><p>执行单元测试是为了证明某段代码的行为确实和开发者期望的一致。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试 </tag>
            
            <tag> 单元 </tag>
            
            <tag> Junit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法之旅-排序</title>
      <link href="/2018/08/26/%E7%AE%97%E6%B3%95%E4%B9%8B%E6%97%85-%E6%8E%92%E5%BA%8F/"/>
      <url>/2018/08/26/%E7%AE%97%E6%B3%95%E4%B9%8B%E6%97%85-%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="入门简介"><a href="#入门简介" class="headerlink" title="入门简介"></a>入门简介</h2><p>算法这门课程在大二大三的时候就已经系统的讲解过，但是由于当时没有深刻理解这门课程的重要性，所以学得不是很用心；</p><p>但是多年以后才明白，如果说，编程的逻辑思维对于程序员来说是一门内力的话，那么算法相当于是精妙的招式了；</p><p>因此在没有好招式之前，只能发挥出自身的一部分实力，只有不断的学习更好的算法，才能将自己的逻辑思维不断最优化的表现出来；</p><p>那么接下来就让我们重新系统的认识一些算法，总结出属于自己的算法之道；</p><p>金庸小说中，任何优秀的武功，都是以招式直接，飘逸灵动的武功最优；</p><p>而古龙的描述更直接，没有多余的招式，直接杀敌才是最好的武功；</p><p>而算法也是这样，只有最直接，最快速，消耗最少的算法才是最优的；</p><p>因此算法的优劣就可以从这几个简单的方向进行思考，如何最快速，最少的消耗解决问题，就是一个算法核心竞争力；</p><h2 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h2><p>虽然是个很简单的排序，但是条条大路通罗马，那么哪条路是最简单，最快速，而又最优的呢？</p><p>这就是一个值得商榷的问题了？</p><h3 id="时间复杂度和稳定性对比"><a href="#时间复杂度和稳定性对比" class="headerlink" title="时间复杂度和稳定性对比"></a>时间复杂度和稳定性对比</h3><table><thead><tr><th style="text-align:center">排序方法</th><th style="text-align:center">最好时间</th><th style="text-align:center">平均时间</th><th style="text-align:center">最坏时间</th><th style="text-align:center">铺助空间</th><th style="text-align:center">稳定性</th></tr></thead><tbody><tr><td style="text-align:center">直接插入</td><td style="text-align:center">$O(n)$</td><td style="text-align:center">$O(n^2)$</td><td style="text-align:center">$O(n^2)$</td><td style="text-align:center">$O(1)$</td><td style="text-align:center">稳定</td></tr><tr><td style="text-align:center">二分插入</td><td style="text-align:center">$O(n)$</td><td style="text-align:center">$O(n^2)$</td><td style="text-align:center">$O(n^2)$</td><td style="text-align:center">$O(1)$</td><td style="text-align:center">稳定</td></tr><tr><td style="text-align:center">希尔</td><td style="text-align:center"></td><td style="text-align:center">$O(n^{1.25})$</td><td style="text-align:center"></td><td style="text-align:center">$O(n)$</td><td style="text-align:center">不稳定</td></tr><tr><td style="text-align:center">冒泡</td><td style="text-align:center">$O(n)$</td><td style="text-align:center">$O(n^2)$</td><td style="text-align:center">$O(n^2)$</td><td style="text-align:center">$O(1)$</td><td style="text-align:center">稳定</td></tr><tr><td style="text-align:center">快速</td><td style="text-align:center">$O(nlgn)$</td><td style="text-align:center">$O(nlgn)$</td><td style="text-align:center">$O(n^2)$</td><td style="text-align:center">$O(nlgn)$</td><td style="text-align:center">不稳定</td></tr><tr><td style="text-align:center">直接选择</td><td style="text-align:center">$O(n^2)$</td><td style="text-align:center">$O(n^2)$</td><td style="text-align:center">$O(n^2)$</td><td style="text-align:center">$O(1)$</td><td style="text-align:center">不稳定</td></tr><tr><td style="text-align:center">堆</td><td style="text-align:center">$O(nlgn)$</td><td style="text-align:center">$O(nlgn)$</td><td style="text-align:center">$O(nlgn)$</td><td style="text-align:center"></td><td style="text-align:center">不稳定</td></tr><tr><td style="text-align:center">归并</td><td style="text-align:center">$O(nlgn)$</td><td style="text-align:center">$O(nlgn)$</td><td style="text-align:center">$O(nlgn)$</td><td style="text-align:center">$O(n)$</td><td style="text-align:center">稳定</td></tr><tr><td style="text-align:center">基数</td><td style="text-align:center">$O(d(rd+n))$</td><td style="text-align:center">$O(d(rd+n))$</td><td style="text-align:center">$O(d(rd+n))$</td><td style="text-align:center">$O(rd+n)$</td><td style="text-align:center">稳定</td></tr></tbody></table><h3 id="冒泡排序法"><a href="#冒泡排序法" class="headerlink" title="冒泡排序法"></a>冒泡排序法</h3><h4 id="冒泡排序原理-冒泡排序百度百科"><a href="#冒泡排序原理-冒泡排序百度百科" class="headerlink" title="冒泡排序原理^冒泡排序百度百科"></a>冒泡排序原理<a href="https://baike.baidu.com/item/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/4602306?fr=aladdin" target="_blank" rel="noopener">^冒泡排序百度百科</a></h4><ol><li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</li><li>对每一对相邻元素做同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的数。</li><li>针对所有的元素重复以上的步骤，除了最后一个。</li><li>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</li></ol><h4 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h4><p>若文件的初始状态是正序的，一趟扫描即可完成排序。所需的关键字比较次数$C​$和记录移动次数$M​$</p><p>均达到最小值：$C_{min}=n-1​$,$M_{min}=0​$， 所以，冒泡排序最好的时间复杂度为$O(n)​$。</p><p>　　若初始文件是反序的，需要进行$n - 1​$趟排序。每趟排序要进行$n-i​$次关键字的比较(1≤i≤n-1)，且每次比较都必须移动记录三次来达到交换记录位置。在这种情况下，比较和移动次数均达到最大值：<br>$$<br>C_{max} = \frac{n(n-1)}{2} = O(n^2)\<br>M_{max} = \frac{3n(n-1)}{2} = O(n^2)<br>$$</p><p>冒泡排序的最坏时间复杂度为$O({n^2})​$</p><p>综上，因此冒泡排序总的平均时间复杂度为$O({n^2})​$</p><h4 id="算法稳定性"><a href="#算法稳定性" class="headerlink" title="算法稳定性"></a>算法稳定性</h4><p>冒泡排序就是把小的元素往前调或者把大的元素往后调。比较是相邻的两个元素比较，交换也发生在这两个元素之间。所以，如果两个元素相等，是不会再交换的；如果两个相等的元素没有相邻，那么即使通过前面的两两交换把两个相邻起来，这时候也不会交换，所以相同元素的前后顺序并没有改变，所以冒泡排序是一种稳定排序算法。</p><h4 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**    * @Title bubbleSort     * @Description TODO(冒泡排序，第一种排序方式)     * @param array    * @return    * @throws    */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span>array<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">int</span> temp <span class="token operator">=</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    array<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> array<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**    * @Title bubbleSort     * @Description TODO(冒泡排序，第二种排序方式)     * @param array    * @return    * @throws    */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token punctuation">(</span>array<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>j <span class="token operator">>=</span> i<span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span>array<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">int</span> temp <span class="token operator">=</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    array<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> array<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>都是冒泡法排序，但是随着排序数组的数据量增大，后者的时间消耗会比第一种少很多；</p><p>这里放在一起，是为了便于思考，方便对整个算法进行梳理；</p><h4 id="算法动画演示"><a href="#算法动画演示" class="headerlink" title="算法动画演示"></a><a href="https://www.cs.usfca.edu/~galles/visualization/ComparisonSort.html" target="_blank" rel="noopener">算法动画演示</a></h4><h3 id="快速排序法"><a href="#快速排序法" class="headerlink" title="快速排序法"></a>快速排序法</h3><h4 id="算法介绍-快速排序百度百科"><a href="#算法介绍-快速排序百度百科" class="headerlink" title="算法介绍^快速排序百度百科"></a>算法介绍<a href="https://baike.baidu.com/item/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95" target="_blank" rel="noopener">^快速排序百度百科</a></h4><p>快速排序（Quicksort）是对冒泡排序的一种改进。</p><p>快速排序由C. A. R. Hoare在1962年提出。它的基本思想是：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以<strong>递归</strong>进行，以此达到整个数据变成有序<strong>序列</strong>。</p><h4 id="算法原理"><a href="#算法原理" class="headerlink" title="算法原理"></a>算法原理</h4><p>设要排序的数组是A[0]……A[N-1]，首先任意选取一个数据（通常选用数组的第一个数）作为关键数据，然后将所有比它小的数都放到它前面，所有比它大的数都放到它后面，这个过程称为一趟快速排序。值得注意的是，<strong>快速排序不是一种稳定的排序算法</strong>，也就是说，<strong>多个相同的值的相对位置也许会在算法结束时产生变动</strong>。</p><p>一趟快速排序的算法是：</p><ol><li>设置两个变量i、j，排序开始的时候：i=0，j=N-1；</li><li>以第一个数组元素作为关键数据，赋值给key，即key=A[0]；</li><li>从j开始向前搜索，即由后开始向前搜索(j–)，找到第一个小于key的值A[j]，将A[j]和A[i]互换；</li><li>从i开始向后搜索，即由前开始向后搜索(i++)，找到第一个大于key的A[i]，将A[i]和A[j]互换；</li><li>重复第3、4步，直到i=j； (3,4步中，没找到符合条件的值，即3中A[j]不小于key,4中A[i]不大于key的时候改变j、i的值，使得j=j-1，i=i+1，直至找到为止。找到符合条件的值，进行交换的时候i， j指针位置不变。另外，i==j这一过程一定正好是i+或j-完成的时候，此时令循环结束）。</li></ol><blockquote><p>从需要排序的数里面随便找出一个，然后，把<strong>比这个数小的放在这个数左边，比这个数大的放在这个数右边，一样大的和这个数放在一起</strong>，最后，<strong>左右两边各自重复上述过程</strong>，直到左边或右边只剩下一个数（或零个数）无法继续为止。</p></blockquote><h4 id="算法实现-1"><a href="#算法实现-1" class="headerlink" title="算法实现"></a>算法实现</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**    * @Title partition     * @Description TODO(    * 这里进行分区比较，将左侧大于右侧下标的数据进行交换，    * 然后当左侧下标小于右侧下标进行循环，    * 由右侧下标开始向左侧移动，当遇到右侧下标所属数值小于左侧的时候或者当右侧下标已经移动到左侧同一个下标的时候跳出循环，将右侧下标的值赋值给左侧下标值    * 左侧下标开始向右侧移动，当左侧下标所属值大于初始的左侧第一个值或者右侧下标已经等于左侧下标的时候跳出循环，将左侧下标的值赋值给右侧下标值    * 当left>=right 跳出循环    * 将left初始的key赋值给right；    * 最后返回right下标；    * )     * @param array 数组    * @param left 左侧的下标由0开始    * @param right 右侧下标由array.length-1 —— 0    * @return    * @throws     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">partition</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 三数取中</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> array<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">swap</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">></span> array<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">swap</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> key <span class="token operator">=</span> array<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">>=</span> key <span class="token operator">&amp;&amp;</span> right <span class="token operator">></span> left<span class="token punctuation">)</span> <span class="token punctuation">{</span>                right<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            array<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> key <span class="token operator">&amp;&amp;</span> right <span class="token operator">></span> left<span class="token punctuation">)</span> <span class="token punctuation">{</span>                left<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            array<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        array<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> key<span class="token punctuation">;</span>        <span class="token keyword">return</span> right<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**    * @Title swap     * @Description TODO(用于交换两个值)     * @param a 交换的值a    * @param b 交换的值b    * @throws     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> a<span class="token punctuation">;</span>        a <span class="token operator">=</span> b<span class="token punctuation">;</span>        b <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**    * @Title sort     * @Description TODO(    * 对数组进行排序    * 当左侧下标大于等于右侧下标的时候，结束排序    * 当左侧下标小于右侧下标的时候，进行分区排序，返回    * )     * @param array 需要排序的数组    * @param left 左侧下标    * @param right 右侧下标    * @throws     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">>=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token function">partition</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> left<span class="token punctuation">,</span> index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h4 id="算法动画演示-1"><a href="#算法动画演示-1" class="headerlink" title="算法动画演示"></a><a href="https://www.cs.usfca.edu/~galles/visualization/ComparisonSort.html" target="_blank" rel="noopener">算法动画演示</a></h4><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><h4 id="算法介绍-插入排序百度百科"><a href="#算法介绍-插入排序百度百科" class="headerlink" title="算法介绍^插入排序百度百科"></a>算法介绍<a href="https://baike.baidu.com/item/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/7214992?fr=aladdin" target="_blank" rel="noopener">^插入排序百度百科</a></h4><p>有一个已经有序的数据序列，要求在这个已经排好的数据序列中插入一个数;</p><p>但要求插入后此数据序列仍然有序，这个时候就要用到一种新的排序方法——插入排序法插入排序的基本操作就是将一个数据插入到已经排好序的有序数据中，从而得到一个新的、个数加一的有序数据;</p><p>算法适用于<strong>少量数据的排序</strong>，时间复杂度为$O(n^2)​$。是<strong>稳定的排序方法</strong>。</p><p>插入算法把要排序的<strong>数组分成两部分</strong>：</p><p>第一部分包含了这个数组的所有元素，但将最后一个元素除外（让数组多一个空间才有插入的位置）;</p><p>而第二部分就只包含这一个元素（即待插入元素）。在第一部分排序完成后，再将这个最后元素插入到已排好序的第一部分中。</p><blockquote><p>插入排序的基本思想是：每步将一个待排序的记录，按其关键码值的大小插入前面已经排序的文件中适当位置上，直到全部插入完为止。</p></blockquote><h4 id="算法原理-1"><a href="#算法原理-1" class="headerlink" title="算法原理"></a>算法原理</h4><p>最简单的理解可以是这样的：</p><p>假如数组<code>int a = {5,2,1,3,4}</code></p><p>选定数组中的第一数据和第二个数据进行排序，排序完毕<code>a = {[2,5],1,3,4}</code></p><p>这里我用‘[]’的意思就是表示数组a[0~1]是已经排序的了，这个过程也可以理解为将数组中的第二个数据与第一个比较后，插入了第一个数据的前面；</p><p>接下来就将第三个与前面已经排序好的数据进行比较，不断交换位置；</p><p><code>a = {[2,1,5],3,4}</code></p><p><code>a = {[1,2,5],3,4}</code></p><p>就是将第三个数据与前面排序完毕的数据不断<strong>比较</strong>，<strong>交换</strong>，然后找到合适的位置；</p><p>剩下的数据不断重复第三个数据所做的事情，然后直到这个已经排序完毕的数组占据了数组的所有数据；</p><p>来一更好理解的图</p><p><code>初始： a = {5,2,1,3,4}</code></p><p><code>一轮：a = {[2,5],1,3,4}</code><br><code>二轮：a = {[1,2,5],3,4}</code><br><code>三轮：a = {[1,2,3,5],4}</code><br><code>四轮：a = {[1,2,3,4,5]}</code></p><h4 id="算法实现-2"><a href="#算法实现-2" class="headerlink" title="算法实现"></a>算法实现</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**    * @Title insertSort     * @Description TODO(可以总结的话就是：不断的扩展数组中已经排定的序列长度，直到这个数组内部的序列达到了这个数组的最大值)     * @param arr 需要排序的数组    * @return    * @throws     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">insertSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    arr <span class="token operator">=</span> Util<span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>j<span class="token punctuation">,</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h4 id="算法动画演示-2"><a href="#算法动画演示-2" class="headerlink" title="算法动画演示"></a><a href="https://www.cs.usfca.edu/~galles/visualization/ComparisonSort.html" target="_blank" rel="noopener">算法动画演示</a></h4><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><h4 id="算法介绍-归并排序百度百科"><a href="#算法介绍-归并排序百度百科" class="headerlink" title="算法介绍^归并排序百度百科"></a>算法介绍<a href="https://baike.baidu.com/item/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F" target="_blank" rel="noopener">^归并排序百度百科</a></h4><p>归并排序（MERGE-SORT）是建立在归并操作上的一种有效的排序算法;</p><p>该算法是采用<strong>分治法（Divide and Conquer）的一个非常典型的应用</strong>。</p><p>将已有序的子序列合并，得到完全有序的序列；</p><p>即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为<strong>二路归并</strong>。</p><p>分治法将问题<strong>分(divide)</strong>成一些小的问题然后递归求解，而<strong>治(conquer)</strong>的阶段则将分的阶段得到的各答案”修补”在一起，即分而治之</p><p><a href="https://www.cnblogs.com/chengxiao/p/6194356.html" target="_blank" rel="noopener"><img src="\img\articlePicture\MergeSortDivideAndConquer.png" alt="分治"></a></p><h4 id="算法定义"><a href="#算法定义" class="headerlink" title="算法定义"></a>算法定义</h4><p>所谓归并排序是指将两个或两个以上有序的数列（或有序表），合并成一个仍然有序的数列（或有序表）。这样的排序方法经常用于多个有序的数据文件归并成一个有序的数据文件。归并排序的算法比较简单。</p><p>基本思想方法：</p><p>（1）假设已经有两个有序数列，分别存放在两个数组s，r中；并设i，j分别为指向数组的第一个单元的下标；s有n个元素，r有m个元素。</p><p>（2）再另设一个数组a，k指向该数组的第一个单元下标。</p><p>（3）算法分析（过程）：</p><h4 id="算法性能"><a href="#算法性能" class="headerlink" title="算法性能"></a>算法性能</h4><p>时间复杂度为O(nlog n) 这是该算法中最好、最坏和平均的时间性能。</p><p>空间复杂度为 O(n)</p><p>比较操作的次数介于(nlogn) / 2和nlogn - n + 1。</p><p>赋值操作的次数是(2nlogn)。归并算法的空间复杂度为：0 (n)</p><p>归并排序比较占用内存，但却是一种<strong>效率高且稳定的算法</strong>。</p><h4 id="算法实现-3"><a href="#算法实现-3" class="headerlink" title="算法实现"></a>算法实现</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>arr<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//在排序前，先建好一个长度等于原数组长度的临时数组，避免递归中频繁开辟空间</span>        <span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span><span class="token keyword">int</span> left<span class="token punctuation">,</span><span class="token keyword">int</span> right<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>temp<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>left<span class="token operator">+</span>right<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>            <span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>left<span class="token punctuation">,</span>mid<span class="token punctuation">,</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//左边归并排序，使得左子序列有序</span>            <span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>right<span class="token punctuation">,</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//右边归并排序，使得右子序列有序</span>            <span class="token function">merge</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>left<span class="token punctuation">,</span>mid<span class="token punctuation">,</span>right<span class="token punctuation">,</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将两个有序子数组合并操作</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span><span class="token keyword">int</span> left<span class="token punctuation">,</span><span class="token keyword">int</span> mid<span class="token punctuation">,</span><span class="token keyword">int</span> right<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temp<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> left<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//左序列指针</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//右序列指针</span>        <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//临时数组指针</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>mid <span class="token operator">&amp;&amp;</span> j<span class="token operator">&lt;=</span>right<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                temp<span class="token punctuation">[</span>t<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                temp<span class="token punctuation">[</span>t<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>mid<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//将左边剩余元素填充进temp中</span>            temp<span class="token punctuation">[</span>t<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>j<span class="token operator">&lt;=</span>right<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//将右序列剩余元素填充进temp中</span>            temp<span class="token punctuation">[</span>t<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将temp中的元素全部拷贝到原数组中</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span><span class="token punctuation">{</span>            arr<span class="token punctuation">[</span>left<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">[</span>t<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h4 id="算法动画演示-3"><a href="#算法动画演示-3" class="headerlink" title="算法动画演示"></a><a href="https://www.cs.usfca.edu/~galles/visualization/ComparisonSort.html" target="_blank" rel="noopener">算法动画演示</a></h4><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><h4 id="算法介绍-选择排序百度百科"><a href="#算法介绍-选择排序百度百科" class="headerlink" title="算法介绍^选择排序百度百科"></a>算法介绍<a href="https://baike.baidu.com/item/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F" target="_blank" rel="noopener">^选择排序百度百科</a></h4><p>选择排序（Selection sort）是一种简单直观的排序算法。</p><p>它的工作原理是每一次从待排序的数据元素中<strong>选出最小（或最大）</strong>的一个元素，<strong>存放在序列的起始位置</strong>，直到全部待排序的数据元素排完。</p><p> 选择排序是<strong>不稳定的排序方法</strong>。</p><h4 id="算法性能-1"><a href="#算法性能-1" class="headerlink" title="算法性能"></a>算法性能</h4><p>选择排序的交换操作介于 <code>0</code>和 <code>(n-1)</code> 次之间。选择排序的比较操作为 <code>n(n - 1）/2</code> 次之间。</p><p>选择排序的赋值操作介于 <code>0</code> 和 <code>3 (n - 1）</code> 次之间。</p><p>比较次数<code>O(n^2）</code>，比较次数与关键字的初始状态无关，总的比较次数<code>N=(n-1）+(n-2）+...+1=n*(n-1）/2</code>。</p><p>交换次数<code>O(n）</code>，最好情况是，已经有序，交换0次；</p><p>最坏情况交换n-1次，逆序交换n/2次。<strong>交换次数比冒泡排序少多了</strong>，由于<strong>交换所需CPU时间比比较所需的CPU时间多</strong>，n值较小时，<strong>选择排序比冒泡排序快</strong>。</p><p>选择排序是给每个位置选择当前元素最小的;</p><p>比如给第一个位置选择最小的，在剩余元素里面给第二个元素选择第二小的，依次类推，直到第<code>n-1</code>个元素，第n个元素不用选择了，因为只剩下它一个最大的元素了。</p><p>那么，在一趟选择，如果一个元素比当前元素小，而该小的元素又出现在一个和当前元素相等的元素后面，那么交换后稳定性就被破坏了。</p><p>比较拗口，举个例子，序列<code>5 8 5 2 9</code>，我们知道第一遍选择第1个元素5会和2交换，那么原序列中<strong>两个5的相对前后顺序就被破坏了</strong>，<strong>所以选择排序是一个不稳定的排序算法</strong>。</p><h4 id="算法实现-4"><a href="#算法实现-4" class="headerlink" title="算法实现"></a>算法实现</h4><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**    * @Title selectionSort     * @Description TODO    * 选择排序    * 选择无需区中的最小数不断存储在最前面，循环这个过程，直到数组完成所有排序    * @param arr    * @throws     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">selectionSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> minIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            minIndex <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 无序区的最小数据数组下标</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 在无序区中找到最小数据并保存其数组下标</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    minIndex <span class="token operator">=</span> j<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 将最小元素放到本次循环的前端</span>            Util<span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> minIndex<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h4 id="算法动画演示-4"><a href="#算法动画演示-4" class="headerlink" title="算法动画演示"></a><a href="https://www.cs.usfca.edu/~galles/visualization/ComparisonSort.html" target="_blank" rel="noopener">算法动画演示</a></h4><h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><h4 id="算法介绍-堆排序百度百科"><a href="#算法介绍-堆排序百度百科" class="headerlink" title="算法介绍^堆排序百度百科"></a>算法介绍<a href="https://baike.baidu.com/item/%E5%A0%86%E6%8E%92%E5%BA%8F" target="_blank" rel="noopener">^堆排序百度百科</a></h4><p>堆排序(Heapsort)是指利用堆积树（堆）这种数据结构所设计的一种排序算法，<strong>它是选择排序的一种</strong>。</p><p>可以利用数组的特点快速定位指定索引的元素。</p><p><strong>堆分为大根堆和小根堆，是完全二叉树。</strong></p><p>大根堆的要求是每个节点的值都不大于其父节点的值，即A[PARENT[i]] &gt;= A[i]。</p><p>在数组的非降序排序中，需要使用的就是大根堆，因为根据大根堆的要求可知，最大的值一定在堆顶；</p><blockquote><p>堆</p><p>　　堆是具有以下性质的完全二叉树：每个结点的值都大于或等于其左右孩子结点的值，称为大顶堆；或者每个结点的值都小于或等于其左右孩子结点的值，称为小顶堆。如下图：</p></blockquote><p><a href="https://www.cnblogs.com/chengxiao/p/6129630.html" target="_blank" rel="noopener"><img src="\img\articlePicture\HeapCompare.png" alt="大顶堆和小顶堆"></a></p><p>同时，我们对堆中的结点按层进行编号，将这种逻辑结构映射到数组中就是下面这个样子</p><p><a href="https://www.cnblogs.com/chengxiao/p/6129630.html" target="_blank" rel="noopener"><img src="\img\articlePicture\HeapToArray.png" alt="堆映射为数组的逻辑结构"></a></p><p>该数组从逻辑上讲就是一个堆结构，我们用简单的公式来描述一下堆的定义就是：</p><p><strong>大顶堆：arr[i] &gt;= arr[2i+1] &amp;&amp; arr[i] &gt;= arr[2i+2]</strong>  </p><p><strong>小顶堆：arr[i] &lt;= arr[2i+1] &amp;&amp; arr[i] &lt;= arr[2i+2]</strong>  </p><h4 id="算法起源"><a href="#算法起源" class="headerlink" title="算法起源"></a>算法起源</h4><p>1991年的计算机先驱奖获得者、斯坦福大学计算机科学系教授罗伯特·弗洛伊德(Robert W．Floyd）和威廉姆斯(J．Williams）在1964年共同发明了著名的堆排序算法（ Heap Sort )</p><h4 id="算法基本思想"><a href="#算法基本思想" class="headerlink" title="算法基本思想"></a>算法基本思想</h4><blockquote><p>堆排序的基本思想是：将待排序序列构造成一个大顶堆，此时，整个序列的最大值就是堆顶的根节点。将其与末尾元素进行交换，此时末尾就为最大值。然后将剩余n-1个元素重新构造成一个堆，这样会得到n个元素的次小值。如此反复执行，便能得到一个有序序列了</p></blockquote><h4 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h4><p>堆排序的时间，主要由建立初始堆和反复重建堆这两部分的时间开销构成，它们均是通过调用Heapify实现的。<br>平均性能 $O(N*logN)$。<br>其他性能<br>由于建初始堆所需的比较次数较多，所以堆排序不适宜于记录数较少的文件。<br>堆排序是就地排序，辅助空间为$O(1)$.<br>它是不稳定的排序方法。</p><p>（<strong>排序的稳定性</strong>是指如果在排序的序列中，存在前后相同的两个元素的话，<strong>排序前 和排序后他们的相对位置不发生变化</strong>）</p><h4 id="算法实现-5"><a href="#算法实现-5" class="headerlink" title="算法实现"></a>算法实现</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>arr<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.构建大顶堆</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>arr<span class="token punctuation">.</span>length<span class="token operator">/</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//从第一个非叶子结点从下至上，从右至左调整结构</span>            <span class="token function">adjustHeap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>i<span class="token punctuation">,</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//2.调整堆结构+交换堆顶元素与末尾元素</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            Util<span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将堆顶元素与末尾元素进行交换</span>            <span class="token function">adjustHeap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//重新对堆进行调整</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 调整大顶堆（仅是调整过程，建立在大顶堆已构建的基础上）     * @param arr     * @param i     * @param length     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">adjustHeap</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>arr<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token keyword">int</span> length<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//先取出当前元素i</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span>i<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span>length<span class="token punctuation">;</span>k<span class="token operator">=</span>k<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//从i结点的左子结点开始，也就是2i+1处开始</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span>length <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">&lt;</span>arr<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//如果左子结点小于右子结点，k指向右子结点</span>                k<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">></span>temp<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//如果子节点大于父节点，将子节点值赋给父节点（不用进行交换）</span>                arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>                i <span class="token operator">=</span> k<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将temp值放到最终的位置</span>    <span class="token punctuation">}</span></code></pre><h4 id="算法动画演示-5"><a href="#算法动画演示-5" class="headerlink" title="算法动画演示"></a><a href="https://www.cs.usfca.edu/~galles/visualization/HeapSort.html" target="_blank" rel="noopener">算法动画演示</a></h4><h2 id="其他算法链接地址"><a href="#其他算法链接地址" class="headerlink" title="其他算法链接地址"></a>其他算法链接地址</h2><p><a href="http://blog.langaobai.top/2018/08/26/%E7%AE%97%E6%B3%95%E4%B9%8B%E6%97%85-%E6%8E%92%E5%BA%8F/" target="_blank" rel="noopener">算法之旅-排序算法</a></p><p><a href="http://blog.langaobai.top/2018/09/04/%E7%AE%97%E6%B3%95%E4%B9%8B%E6%97%85-%E8%81%9A%E7%B1%BB/" target="_blank" rel="noopener">算法之旅-聚类算法</a></p><p><a href>算法之旅-列表搜索算法</a></p><p><a href>算法之旅-图表搜索算法</a></p><p><a href>算法之旅-数学类算法</a></p><p><a href>算法之旅-数据压缩算法</a></p><p><a href>算法之旅-安全算法</a></p><p><a href>算法之旅-数据结构</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 排序 </tag>
            
            <tag> 快速排序 </tag>
            
            <tag> 冒泡排序 </tag>
            
            <tag> 选择排序 </tag>
            
            <tag> 归并排序 </tag>
            
            <tag> 插入排序 </tag>
            
            <tag> 堆排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些版本命名小常识</title>
      <link href="/2018/08/24/%E4%B8%80%E4%BA%9B%E7%89%88%E6%9C%AC%E5%91%BD%E5%90%8D%E5%B0%8F%E5%B8%B8%E8%AF%86/"/>
      <url>/2018/08/24/%E4%B8%80%E4%BA%9B%E7%89%88%E6%9C%AC%E5%91%BD%E5%90%8D%E5%B0%8F%E5%B8%B8%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h5 id="1-Alpha版-内部测试版"><a href="#1-Alpha版-内部测试版" class="headerlink" title="1.Alpha版(内部测试版)"></a>1.Alpha版(内部测试版)</h5><p>  一般只在软件开发公司内部运行，不对外公开。主要是开发者自己对产品进行测试，检查产品是否存在缺陷、错误，验证产品功能与说明书、用户手册是否一致。Alpha版本的产品仍然需要完整的功能测试，而其功能亦未完善，但是可以满足一般需求。因为它是整个软件释出周期中的第一个主要阶段，所以它的名称是“Alpha”，希腊字母中的第一个字母。</p><p>  Alpha版本通常会送交到开发软件的组织或社群中的各个软件测试者，用作内部测试。在市场上，越来越多公司会邀请外部的客户或合作伙伴参与其软件的Alpha测试阶段。这令软件在此阶段有更大的可用性测试。</p><p>  在测试的第一个阶段中，开发者通常会进行白盒测试。其他测试会在稍后时间由其他测试团体以黑盒或灰盒技术进行，不过有时会同时进行。</p><h5 id="2-Beta版-外部测试版"><a href="#2-Beta版-外部测试版" class="headerlink" title="2.Beta版(外部测试版)"></a>2.Beta版(外部测试版)</h5><p>   软件开发公司为对外宣传，将非正式产品免费发送给具有典型性的用户，让用户测试该软件的不足之处及存在问题，以便在正式发行前进一步改进和完善。一般可通过Internet免费下载，也可以向软件公司索取。</p><p>  Beta版本是第一个对外公开的软件版本，是由公众参与的测试阶段。一般来说，Beta包含所有功能，但可能有一些已知问题和较轻微的臭虫(Bug)。</p><p>  Beta版本的测试者通常是开发软件的组织的客户，他们会以免费或优惠价钱得到软件，但会成为组织的免费测试者。</p><p>  Beta版本主要测试产品的支援和市场反应（在邀请Beta用户时）等。</p><h5 id="3-Demo版-演示版"><a href="#3-Demo版-演示版" class="headerlink" title="3.Demo版(演示版)"></a>3.Demo版(演示版)</h5><p>   主要是演示正式软件的部分功能，用户可以从中得知软件的基本操作，为正式产品的发售扩大影响。如果是游戏的话，则只有一两个关卡可以玩。该版本也可以从Internet上免费下载。</p><h5 id="4-Enhanced版-增强版或加强版"><a href="#4-Enhanced版-增强版或加强版" class="headerlink" title="4.Enhanced版(增强版或加强版)"></a>4.Enhanced版(增强版或加强版)</h5><p>   如果是一般软件，一般称作“增强版”，会加入一些实用的新功能。如果是游戏，一般称作“加强版”，会加入一些新的游戏场景和游戏情节等。这是正式发售的版本。</p><h5 id="5-Free版-自由版"><a href="#5-Free版-自由版" class="headerlink" title="5.Free版(自由版)"></a>5.Free版(自由版)</h5><p>   这一般是个人或自由软件联盟组织的成员制作的软件，希望免费给大家使用，没有版权，一般也是通过Internet免费下载。</p><h5 id="6-Full-Version版-完全版"><a href="#6-Full-Version版-完全版" class="headerlink" title="6.Full Version版(完全版)"></a>6.Full Version版(完全版)</h5><p>  也就是正式版，是最终正式发售的版本。</p><h5 id="7-Shareware版-共享版"><a href="#7-Shareware版-共享版" class="headerlink" title="7.Shareware版(共享版)"></a>7.Shareware版(共享版)</h5><p>  有些公司为了吸引客户，对于他们制作的某些软件，可以让用户通过Internet免费下载的方式获取。不过，此版本软件多会带有一些使用时间或次数的限制，但可以利用在线注册或电子注册成为正式版用户。</p><h5 id="8-Release版-发行版"><a href="#8-Release版-发行版" class="headerlink" title="8.Release版(发行版)"></a>8.Release版(发行版)</h5><p>  不是正式版，带有时间限制，也是为扩大影响所做的宣传策略之一。比如Windows Me的发行版就限制了只能使用几个月，可从Internet上免费下载或由公司免费奉送。</p><p>  Release Candidate（简称RC）指可能成为最终产品的版本，如果没有再出现问题则可释出正式版本。在此阶段，产品包含所有功能亦不会出现严重问题。通常此阶段的产品是接近完整的。</p><p>  微软公司很多时会使用此名称。在1990年代，苹果电脑把在这阶段的产品称为“Golden Master”，而最后的Golden Master为正式版本。这阶段亦称Gamma（更后期的称为Delta，及其后的希腊字母）。</p><h5 id="9-Uprgade版-升级版"><a href="#9-Uprgade版-升级版" class="headerlink" title="9.Uprgade版(升级版)"></a>9.Uprgade版(升级版)</h5><p>  当你有某个软件以前的正式版本时，可以购买升级版，将你的软件升级为最新版。升级后的软件与正式版在功能上相同，但价格会低些，这主要是为了给原有的正版用户提供优惠。</p><h5 id="10-Retail版-（零售版）"><a href="#10-Retail版-（零售版）" class="headerlink" title="10.Retail版 （零售版）"></a>10.Retail版 （零售版）</h5><p>  一般只针对个人的功能不是很全的版本，价格比较低，升级时间也有限制。</p><h5 id="11-Cardware版"><a href="#11-Cardware版" class="headerlink" title="11.Cardware版"></a>11.Cardware版</h5><p>  属共享软件的一种，只要给作者回复一封电邮或明信片即可。（有的作者并由此提供注册码等），目前这种形式已不多见。</p><h5 id="12-Plus版（增强版）"><a href="#12-Plus版（增强版）" class="headerlink" title="12.Plus版（增强版）"></a>12.Plus版（增强版）</h5><p>  不过这种大部分是在程序界面及多媒体功能上增强。</p><h5 id="13-Preview版（预览版）"><a href="#13-Preview版（预览版）" class="headerlink" title="13.Preview版（预览版）"></a>13.Preview版（预览版）</h5><p>  软件商为了满足那些对新版本很关注的人，发布的可以看到大部分功能的测试软件。</p><h5 id="14-Corporation-amp-Enterprise版（企业版）"><a href="#14-Corporation-amp-Enterprise版（企业版）" class="headerlink" title="14.Corporation &amp; Enterprise版（企业版）"></a>14.Corporation &amp; Enterprise版（企业版）</h5><p>  只针对企业发布的全功能版本，价格比较昂贵，服务非常齐全。</p><h5 id="15-Standard版（标准版）"><a href="#15-Standard版（标准版）" class="headerlink" title="15.Standard版（标准版）"></a>15.Standard版（标准版）</h5><p>  软件商推荐大家使用的版本，这种版本一般比较稳定，BUG少。</p><h5 id="16-Mini版"><a href="#16-Mini版" class="headerlink" title="16.Mini版"></a>16.Mini版</h5><p>  迷你版也叫精简版只有最基本的功能，为那些想节省硬盘空间或者不追求华丽的人准备的。</p><h5 id="17-Rip"><a href="#17-Rip" class="headerlink" title="17.Rip"></a>17.Rip</h5><p>  是指从原版文件（一般是指光盘或光盘镜像文件）直接将有用的内容（核心内容）分离出来，剔除无用的文档，例如PDF说明文件啊，视频演示啊之类的东西，也可以算做是精简版吧…但主要内容功能是一点也不能缺少的！</p><p>  另：DVDrip是指将视频和音频直接从DVD光盘里以文件方式分离出来。</p><h5 id="18-trial-试用版"><a href="#18-trial-试用版" class="headerlink" title="18. trial 试用版"></a>18. trial 试用版</h5><p>  （含有某些限制，如时间、功能，注册后也有可能变为正式版）</p><h5 id="19-RTM-版"><a href="#19-RTM-版" class="headerlink" title="19.RTM 版"></a>19.RTM 版</h5><p>  这基本就是最终的版本，英文是 Release To Manufactur，意思是发布到生产商。</p><h5 id="20-Unregistered"><a href="#20-Unregistered" class="headerlink" title="20.Unregistered"></a>20.Unregistered</h5><p>  未注册版，通常没有时间限制，在功能上相对于正式版做了一定的限制。可注册或购买成为正式版。</p><h5 id="21-Regged"><a href="#21-Regged" class="headerlink" title="21.Regged"></a>21.Regged</h5><p>已注册版</p><h5 id="22-Lite"><a href="#22-Lite" class="headerlink" title="22.Lite"></a>22.Lite</h5><p>精简版。</p><h5 id="23-Full-version"><a href="#23-Full-version" class="headerlink" title="23.Full version"></a>23.Full version</h5><p>完整版，属于正式版</p><h5 id="24-SC"><a href="#24-SC" class="headerlink" title="24.SC"></a>24.SC</h5><p>Simplified Chinese简体中文版。</p><h5 id="25-CN"><a href="#25-CN" class="headerlink" title="25.CN"></a>25.CN</h5><p>简体中文版</p><h5 id="26-GBK"><a href="#26-GBK" class="headerlink" title="26.GBK"></a>26.GBK</h5><p>简体中文汉字内码扩展规范版。</p><h5 id="27-TC"><a href="#27-TC" class="headerlink" title="27.TC"></a>27.TC</h5><p> Traditional Chinese繁体中文版。</p><h5 id="28-CHT"><a href="#28-CHT" class="headerlink" title="28.CHT"></a>28.CHT</h5><p>繁体中文版</p><h5 id="29-BIG5"><a href="#29-BIG5" class="headerlink" title="29.BIG5"></a>29.BIG5</h5><p>繁体中文大五码版。</p><h5 id="30-EN"><a href="#30-EN" class="headerlink" title="30.EN"></a>30.EN</h5><p>英文版</p><h5 id="31-Multilanguage"><a href="#31-Multilanguage" class="headerlink" title="31.Multilanguage"></a>31.Multilanguage</h5><p>语言版</p><h5 id="32-UTF8"><a href="#32-UTF8" class="headerlink" title="32.UTF8"></a>32.UTF8</h5><p>Unicode Transformation Format 8 bit，对现有的中文系统不是好的解决方案。</p><h5 id="33-γ（Gamma）版"><a href="#33-γ（Gamma）版" class="headerlink" title="33.γ（Gamma）版"></a>33.γ（Gamma）版</h5><p>相当成熟的测试版，与即将发行的正式版相差无几。</p><h5 id="34-SR版"><a href="#34-SR版" class="headerlink" title="34.SR版"></a>34.SR版</h5><p>修正版或更新版，修正了正式版推出后发现的Bug。</p><p>Final版：正式版。</p><h5 id="35-OEM"><a href="#35-OEM" class="headerlink" title="35.OEM"></a>35.OEM</h5><p>Original Equipment Manufacturer 是给电脑生产厂的版本，无需多说。</p><h5 id="36-FPP"><a href="#36-FPP" class="headerlink" title="36.FPP"></a>36.FPP</h5><p>  Full Packaged Product (FPP)/Retail 就是零售版（盒装软件），这种产品的光盘的卷标都带有”FPP”字样，比如英文WXP Pro的FPP版本的光盘卷标就是WXPFPP_EN，其中WX表示是Windows XP，P是Professional（H是Home），FPP表明是零售版本，EN是表明是英语。获得途径除了在商店购买之外，某些MSDN用户也可以得到。</p><h5 id="37-VLO"><a href="#37-VLO" class="headerlink" title="37.VLO"></a>37.VLO</h5><p>  Volume Licensing for Organizations (VLO) 团体批量许可证（大量采购授权合约），这是为团体购买而制定的一种优惠方式。这种产品的光盘的卷标都带有”VOL”字样，取”Volume”前3个字母，以表明是批量，比如英文WXP Pro的VOL版本的光盘卷标就是WXPVOL_EN，其中WX表示是Windows XP，P是Professional（VOL没有Home版本），VOL表明是团体批量许可证版本，EN是表明是英语。获得途径主要是集团购买，某些MSDN用户也可以得到。</p><h4 id="版本号"><a href="#版本号" class="headerlink" title="版本号"></a>版本号</h4><p>V（Version）：即版本，通常用数字表示版本号。(如:EVEREST Ultimate v4.20.1188 Beta )</p><p>Build：用数字或日期标示版本号的一种方式。(如:VeryCD eMule v0.48a Build 071112)</p><p>SP：Service Pack，升级包。(如:Windows XP SP 2/VistaSP 1/Windows7SP1)</p>]]></content>
      
      
      <categories>
          
          <category> 版本管理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 版本 </tag>
            
            <tag> 小常识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于subversion的一些知识</title>
      <link href="/2018/05/31/%E5%85%B3%E4%BA%8Esubversion%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9F%A5%E8%AF%86/"/>
      <url>/2018/05/31/%E5%85%B3%E4%BA%8Esubversion%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<p>前面，有一篇文章专门提到了，<strong>重新认识版本管理</strong>，并提到的<strong>版本管理的重要性</strong>；</p><p>作为一名程序员，少不了对自己的要求越来越严格，但是如何严谨的规范和约束自己，包括自己所在的团队呢？</p><p>在之前，我的一位大佬，跟我们说了这么一段话：</p><blockquote><p>做事情呢，一定要讲究 <strong>道</strong>，<strong>法</strong>，<strong>术</strong>，<strong>器</strong>；</p></blockquote><p>前面的各有各的说法，我们着重讲解一下，这个<strong>器</strong>；</p><p>这里我将聚焦在更详细的地方，当然是有出处的——出自《版本管理之道-使用subversion》；</p><p>感兴趣的朋友不妨去下载看看，或者购买纸质的书籍，也不算厚，相信即使你是初学者，一个星期的时间也能读完本书并掌握基础的技能；</p><p>这里算是我的学习笔记，不完全抄自本书，会结合部分自己的见解加以深入思考；</p><h2 id="SVN的基础内容"><a href="#SVN的基础内容" class="headerlink" title="SVN的基础内容"></a>SVN的基础内容</h2><h3 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h3><p>版本从何而来呢？每一次的增、删、改都会在SVN（subversion的简写，后面均称为SVN）中标记一个新版本；</p><p>用过CVS（<em>Concurrent Versions System 并行版本系统的简称</em>），就会知道这里有点区别；</p><p><strong>CVS</strong>记录的是<strong>单个文件的版本</strong>,而<strong>SVN</strong>记录的是整个<strong>项目仓库的版本</strong>;</p><h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><p>很多时候，我们都无法记住r677到底用于干什么的？但我们准能记住V3.0这种，第三正式版本；</p><p>版本控制系统让你可以给<strong>某一时刻的一组文件、或者一些目录或者整个项目分配一个名字</strong>。</p><p>如果你们的项目开发到达了一定程度，你标记为 <strong>v2.0 beta</strong>，你以后就能用这个标签签出他们；</p><blockquote><p>标签是一种很好的跟踪项目代码开发过程中发生重要事件的方式；</p></blockquote><h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><p>当我们一个项目组对同一份源代码添加，修改内容，并进行签入和签出的时候，大家都共享这份源代码；</p><p>我们将这份居于主要地位的源代码称为<strong>主干</strong>；</p><p><img src="\img\articlePicture\svnTunk.gif" alt="主干"></p><p>那么<strong>分支</strong>又是一个怎样的需求呢？为什么会产生分支这种情况；</p><p>我们可以把主干和分支想象成你所在的时空和另外一个由你本身所做的出改变而产生的另外一个时空；</p><p>通俗一点说，当我们开发到一定过程的时候， 我们需要发布V2.0版本了，这个时候，上线是需要稳定，和减少bug的；</p><p>你不可能说拿着一堆在开发的东西就给客户，至少你需要粉饰一下，而你能怎么做呢？</p><ol><li>让大家都停下手中的活，向着发布的方向进行改动？</li><li>拷贝到其他地方，重新开始，那怎么比对项目最开始的地方，进行跟踪和修正呢？（别跟我说重开一个服务器什么的）</li></ol><p>这个时候，就产生了这样的需求“分支”；</p><blockquote><p>老实说，我还是觉得这样的解释，弱化了分支的功能，有点强行解释的味道，后面我加深理解，再做扩展；</p></blockquote><p>分支产生以后，主开发团队可以继续对着之前的主线干活；</p><p>而发布团队，则对分支进行修正，比对而又能对过去的问题进行持续的跟踪；</p><p>这里作者还说了一个问题，有人被分支搞到头大，是因为过度使用分支，而这样最后会发现，你在合并的时候，痛苦异常；</p><h3 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h3><p>在这里想到了继续用<strong>盗梦空间</strong>的话题比喻最为合适；</p><p>当我们进入第三层梦的时候，小李子终于修正了富二代费舍的思想，这个时候，需要就需要回归主干，进行<strong>合并</strong>了；</p><p>当然在主干中的行为，修正一些bug，也可以及时的合并到分支上来，也可以想像一下小李子的第二层梦对他第三层梦的影响，在合并的影响下传递到了第三层梦中了。</p><h3 id="加锁"><a href="#加锁" class="headerlink" title="加锁"></a>加锁</h3><p>学过编程的都知道，加锁，在编程中加锁以后的线程，只能是单个线程访问，不能是多线程同时访问；</p><p>顾明思议，当两个人都要操作同一个源文件的时候，就像我要进房间，而又不允许别人进这个房间，那么我就选择<strong>加锁处理</strong>；</p><h4 id="严格加锁"><a href="#严格加锁" class="headerlink" title="严格加锁"></a>严格加锁</h4><p>被加锁的文件一开始都是<strong>只读</strong>状态，要编辑和修改必须征询项目仓库的同意，在没有其他人编辑同一个文件的时候，项目仓库就会授权给你，其他人这个时候要编辑，仓库就会拒绝；</p><h4 id="乐观加锁"><a href="#乐观加锁" class="headerlink" title="乐观加锁"></a>乐观加锁</h4><p>也就是当你进行签入的时候，项目仓库会先行更新你的本地文件，再让你进行签入；</p><p>但这个时候，版本控制系统不会简单的以项目仓库中最新版本的文件去覆盖你辛苦改过的文件，而是<strong>尝试着去合并项目仓库中所有的改动和你的改动</strong>；</p><p>一般而言严格加锁在使用过程中会出现很多问题，例如：一个人必须要等其他人编辑结束并签入之后才能继续他的工作；</p><p>因此用得更多的反而是乐观加锁处理；</p><h2 id="SVN备份-一关开发室"><a href="#SVN备份-一关开发室" class="headerlink" title="SVN备份^一关开发室"></a>SVN备份<a href="https://www.cnblogs.com/blogs2014/p/5039213.html" target="_blank" rel="noopener">^一关开发室</a></h2><h3 id="1-导出"><a href="#1-导出" class="headerlink" title="1. 导出"></a>1. 导出</h3><p>1.进入svn安装路径bin文件夹下，使用 cd 命令</p><p>在windows下，<kbd>win</kbd><kbd>+</kbd><kbd>R</kbd> 键入 <code>cmd</code> 回车 打开命令窗口cmd，进入下列目录（<code>svn服务器安装目录bin</code>）： </p><p><code>&quot;c:\Program Files\VisualSVN Server\bin\&quot;</code></p><p><img src="\img\articlePicture\svnbinToc.png" alt="svn目录"></p><p>2.备份/导出（svnadmin dump C:\Repositories\需导出库 &gt; E:**文件夹\full.svn.bak）</p><p>输入下列命令并执行：</p><p><code>svnadmin dump C:\Repositories\Hash加密（MD5、Sha1） &gt; E:\svnbak\full.svn.bak</code></p><p> <img src="\img\articlePicture\svnadmindump.gif" alt="svnadmindump"></p><p>3、full.svn.bak为备份文件。将其文件拷贝到目标机器,或是存储备份。</p><h3 id="2-导入-还原："><a href="#2-导入-还原：" class="headerlink" title="2. 导入/还原："></a>2. 导入/还原：</h3><p>1、在目标机器创建仓库：</p><p><code>svnadmin create D:/repositories/TestProject  (可右键**管理Server**新建)</code></p><p>并注意检查是否需要修改文件夹权限 </p><p>2、执行命令svnadminload:</p><p><code>svnadmin load D:/repositories/TestProject **&lt;** E:\svnbak\full.svn.bak</code></p><p>图解：</p><p> <img src="\img\articlePicture\svnadmindumpload.gif" alt="svnadmindumpload"></p><p>注释：该种方式适用于重装服务器、移动代码库 使用。</p><p>问题：</p><p>1.svn不知道这样的主机</p><p>重做服务器后，计算机名称肯定是不一样的。我们之前的项目还是老计算机名字，只要<strong>更改一下计算机名字</strong>即可实现。或者更改 </p><p><img src="\img\articlePicture\svnRname.gif" alt="svnRname"></p><h3 id="3-目录式导入导出"><a href="#3-目录式导入导出" class="headerlink" title="3. 目录式导入导出"></a>3. 目录式导入导出</h3><p>找到<code>VisualSvn Server</code>中的<strong>操作</strong>点击<strong>Stroage</strong>查找到svn管理目录，直接进行拷贝备份；</p><p>移植到新目录也是这样，这个方法简单粗暴了点，而且也并非官方支持，<em>谨慎使用吧</em>；</p>]]></content>
      
      
      <categories>
          
          <category> 版本管理 </category>
          
          <category> 书籍 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SVN </tag>
            
            <tag> 版本管理 </tag>
            
            <tag> 程序员必修三部曲 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>习惯的力量</title>
      <link href="/2018/05/07/%E4%B9%A0%E6%83%AF%E7%9A%84%E5%8A%9B%E9%87%8F/"/>
      <url>/2018/05/07/%E4%B9%A0%E6%83%AF%E7%9A%84%E5%8A%9B%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><blockquote><p>人每天的活动中，有超过40%是习惯的产物，而不是自己主动决定的。</p></blockquote><p>开篇就引人入胜，一个人的工作时间是8小时一天，那么40%也就是3.2小时，接近一半的时间我们都是<strong>自动驾驶模式</strong></p><p>因此习惯就是我们需要挖掘的一个宝藏，<strong>用于提升工作效率，还是生活节奏，或者提升生活方式的不二选择。</strong></p><blockquote><p>我们每天做出的大部分选择似乎都是精心考虑的决策结果，其实不然。这些选择都是习惯的结果。</p></blockquote><p>每天清晨醒来，我知道大部分的人应该是和我一样，都是打开手机，然后刷一下，不管是刷新闻，还是刷微博或者朋友圈。</p><p>之前我一直没有思考早上起来第一瞬间，我该有的行为，只是顺应着。</p><p>但当我认真思考的时候，我发现，其实我还在睡觉，大脑深层次的本我并没有振作着醒来，而是使用<strong>自动驾驶模式</strong>；</p><p><strong>尽管我不想这样，但是这就是习惯。</strong></p><p><strong>既然习惯成为了我们手中，具有优先选择权的一项活动，那么我们没有理由不掌握它，为我们选择对的！</strong></p><h4 id="个体习惯"><a href="#个体习惯" class="headerlink" title="个体习惯"></a>个体习惯</h4><p>在我们认识到习惯给我们带来了巨大的影响，这个时候我们不得不沉思；</p><p>习惯到底怎么形成的呢？怎么就会变成了习惯？</p><p>如何改变创造自己认为对的习惯？</p><p>能成功么？是否有可行性呢？</p><h5 id="习惯的运作方式"><a href="#习惯的运作方式" class="headerlink" title="习惯的运作方式"></a>习惯的运作方式</h5><p>记忆是否真的很重要，哪一段记忆更重要？</p><p>科学家们，在通过对<strong>尤金-保利</strong>失去部分脑组织功能却任然能正常生活的行为研究之后；</p><p>发现了他虽然已经遗失了记忆，但<strong>在大脑深处，也就是脊柱和大脑结合的位置——基底核</strong>仍然在正常工作；</p><p>这部分组织控制着个人的<strong>自动行为</strong>，包括了比如呼吸和吞咽等行为；</p><p>在20世纪90年代，麻省理工的研究人员又针对<strong>基底核</strong>，采用老鼠穿越迷宫时候的脑活动研究，发现老鼠在熟悉路线以前，脑活动频繁，熟悉之后，快速前进大脑几乎没有活动；</p><p>这个过程被称为<strong>“组块化”</strong>，也就是大脑将一系列的行为变成一种自动的惯常行为，而这也是习惯形成的基础。</p><p>我们每天生活就靠这些行为组块（数量没有几百，也有几十），例如刷牙，穿衣服等。</p><p>发生这一现象的原因，科学家归结为：大脑一直在寻找可以省力的方式；</p><p><strong>因为习惯能让大脑得到更多的休息，这种省力的本能是一种大优势。</strong></p><p>这也就解释了，你走路的时候，不会想着先抬起左脚还是右脚，要抬多高的问题。</p><p>习惯是如何产生的。</p><p>这里我用一个大家较为熟悉概念来跟大家说明这个问题，当然其中如果有理解偏差的肯定会有，毕竟这是我消化吸收之后再加工的；</p><p><strong>电脑</strong>——大家都很熟悉的一个东西，电脑在设计之初有模范过人脑的部分功能，所以用电脑比喻一下人脑其实也算合适；</p><p>电脑在运行的时候，一些需要经常处理计算的程序是会被加载到内存里面；</p><p>而这套理论放到人的身上的时候，似乎也是很使用，人的很多行为都是习惯组成，所以最快速的，最平常的一些全部都被加载到身体的<strong>内存</strong>里了；</p><blockquote><p>在大部分的企业中，人们之间有一份心照不宣的默契，个人有野心是好的，但是你折腾过了头，你的同事会联合起来对付你。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 书籍 </category>
          
          <category> 管理 </category>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 管理 </tag>
            
            <tag> 习惯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>版本管理——重新认识版本管理</title>
      <link href="/2018/04/19/%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E2%80%94%E2%80%94%E9%87%8D%E6%96%B0%E8%AE%A4%E8%AF%86%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/"/>
      <url>/2018/04/19/%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E2%80%94%E2%80%94%E9%87%8D%E6%96%B0%E8%AE%A4%E8%AF%86%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h4 id="为什么要重新认识？"><a href="#为什么要重新认识？" class="headerlink" title="为什么要重新认识？"></a>为什么要重新认识？</h4><p>我想大多数的人，在最开始的时候，进入编程这块以后，很快由别人带领之下使用了SVN、GIT等的版本管理工具；</p><p>对于如何使用，在多次练习的情况下，对与版本管理有了不小的心得；</p><p>更甚者已经是玩得飞起了，但是我要说的是，我不是，我只用了很多基础的功能，还有更多的东西等待我去挖掘；</p><p>但我相信很多人虽然对版本管理软件很熟悉，但是对于版本管理这个概念还是很陌生，不知道它的真正用处。</p><p>而没有学过的版本管理的人，那么这篇文章将带你认真了解版本管理；</p><h4 id="为什么要使用版本管理"><a href="#为什么要使用版本管理" class="headerlink" title="为什么要使用版本管理"></a>为什么要使用版本管理</h4><pre class=" language-txt"><code class="language-txt">需求第一版.md需求第二版.md需求第二版修改小部分.md需求第二版修改大部分.md需求第二版终极版.md需求究极版.md需求究极版再改.md</code></pre><p>请问，同志，上面的需求版本究竟有几个？他发布了几个？改动了多少？</p><p>这是一个很头疼的问题，你根本不清楚他的一个版本变化过程，在比较上也很困难（难道你一个个文件打开了进行比对？）</p><p>如果说究极版再改部分需要前面的第二版的某部分已经删除了，你是不是得一段段的查找？</p><p>你修改的时候不希望破坏掉修改前的状态，最好就是每修改一段事件，能够保存一个状态，类似系统的自动快照一样，当后面出现问题的时候，可以自由选择复原到之前的某个快照状态； <a href="https://www.cnblogs.com/newlifechou/p/8196395.html" target="_blank" rel="noopener">^博客园</a></p><p>还有一个原因，那就是，最后发布软件的时候很多时候会有多个版本，而生成软件的源代码却往往只有一份，只是在最后编译生成的时候用到不同的部分，大部分代码还是共用的，所以往往需要版本控制，几个版本复制几个文件夹出来； <a href="https://www.cnblogs.com/newlifechou/p/8196395.html" target="_blank" rel="noopener">^博客园</a></p><p>版本控制的过程也是过程追踪记录，成就达成的过程。 <a href="https://www.cnblogs.com/newlifechou/p/8196395.html" target="_blank" rel="noopener">^博客园</a></p><h5 id="标准定义-百度百科"><a href="#标准定义-百度百科" class="headerlink" title="标准定义^百度百科"></a>标准定义<a href="https://baike.baidu.com/item/%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/2511538?fr=kg_qa" target="_blank" rel="noopener">^百度百科</a></h5><p>版本管理是为满足不同需求，对同一产品或系统进行局部的改进 和改型所产生的产品或系统系列的变更情况进行记录、跟 踪、维护和控制的过程。 </p><p>主要功能：</p><ol><li><strong>集中管理</strong>档案，安全授权机制：档案集中地存放在服务器上，经<strong>系统管理员</strong>授权给各个用户。用户通过check in和check out的方式访问服务器上的文件，未经授权的用户则无法访问服务器上的文件;</li><li>软件版本升级管理：每次登入时，在服务器上都会生成新的版本，任何版本都可以随时检出编辑;</li><li>加锁功能：在文件更新时保护文件，避免不同的用户更改同一文件时发生冲突;</li><li>提供不同版本源程序的比较;</li></ol><h5 id="使用定义-CSDN博客"><a href="#使用定义-CSDN博客" class="headerlink" title="使用定义^CSDN博客"></a>使用定义<a href="https://blog.csdn.net/cfj68583589/article/details/8523173" target="_blank" rel="noopener">^CSDN博客</a></h5><ol><li>数据备份；</li><li>版本管理，避免版本管理换乱</li><li>提高代码质量；</li><li>提高协同、多人开发的效率；</li><li>明确分工责任；</li></ol><p>既然知道了版本管理如此重要，那么大家又是使用什么方式进行版本管理的呢？</p><p>这就不得不提到的，版本管理发展历程；</p><h4 id="版本发展历程"><a href="#版本发展历程" class="headerlink" title="版本发展历程"></a>版本发展历程</h4><h5 id="手工帐"><a href="#手工帐" class="headerlink" title="手工帐"></a>手工帐</h5><p>最早的时候，我相信，还没有推出现有的版本管理工具的时候，使用的就是手工帐的方式，分别记录各个文件到了哪个版本；</p><p>其实就现有的版本工具而言，只能做到文本式的版本管理，而对应的二进制文件，或者其他的设计图片类文件，还无法使用版本管理工具进行管理；</p><p>只能是依然采用手工帐的方式，当然在计算机的软硬件发展的情况下，就算是手工帐也比之前的手工帐方便许多；</p><h5 id="早期VCS阶段-纵一苇"><a href="#早期VCS阶段-纵一苇" class="headerlink" title="早期VCS阶段^纵一苇"></a>早期VCS阶段<a href="https://www.cnblogs.com/zhangzl419/p/4280202.html" target="_blank" rel="noopener">^纵一苇</a></h5><p>这类系统要求系统的用户必须登录到版本库所在的服务器才能访问版本库。            </p><p>局限性：存在可扩展性方面的问题。</p><h5 id="集中式VCS阶段-纵一苇"><a href="#集中式VCS阶段-纵一苇" class="headerlink" title="集中式VCS阶段 ^纵一苇"></a>集中式VCS阶段 <a href="https://www.cnblogs.com/zhangzl419/p/4280202.html" target="_blank" rel="noopener">^纵一苇</a></h5><p>CVS和SVN解决上述早期版本控制工具的可扩展性问题。</p><p>这类版本控制工具允许程序员通过网络来获取版本库中的代码，并且在修改之后提交回来。</p><p>这类系统解决可扩展性问题是通过客户端来解决的，客户端可以有无数个，但是版本库所在的服务端也还是只有一个，客户端可以随意安装，这样就解决了可扩展性的问题。           </p><p>具体的使用方法：每一个程序员在本地有一个工作目录树，其内容是该版本库中最新的代码。当他们在工作目录树中完成代码修改之后，就把改动提交会该代码库。           </p><p>局限性：在本地工作目录树中只会看到代码的最新版本，如果想要查询历史修改记录，就必须与服务器上的版本库打交道。</p><p>这样要和远程的版本库打交道，就必须使用网络，但是即使今天的互联网处于永不断线的状态，有的时候还是不能上网。</p><p>所以分布式版本控制工具就解决了这个问题，以git为代表的分布式版本控制工具使每个用户在本地都有自己的版本库，而不是连接到公共服务器上的一个公共版本库中去。</p><h5 id="分布式版本控制工具阶段-纵一苇"><a href="#分布式版本控制工具阶段-纵一苇" class="headerlink" title="分布式版本控制工具阶段 ^纵一苇"></a>分布式版本控制工具阶段 <a href="https://www.cnblogs.com/zhangzl419/p/4280202.html" target="_blank" rel="noopener">^纵一苇</a></h5><p>所有的版本控制工具都存储在本地版本库中，向版本库提交代码无需链接远程版本库，所有的历史记录都存储在本地版本库中，向版本库提交代码无须连接远程版本库，而是所有的版本数据都存放在本地版本库中。          </p><p> 分布式版本控制工具程序员之间如何传递各自的修改，如何同步呢？程序员还是将修改上传到项目的主版本库中去。</p><p>有两种实现方式：</p><ol><li>通过git的push操作直接把修改上传到主版本库；</li><li>生成包含少量修改的补丁包，把补丁包提交给项目维护人员，再由项目维护人员更新主版本库。  </li></ol><p>如果想了解更多的，可以看看<a href="http://www.cnblogs.com/vamei/archive/2013/02/21/2918069.html" target="_blank" rel="noopener">版本管理三国志</a>，这篇博主对于版本管理有着更深刻的认识；</p><p>在知道这些以后，那么我们选择哪款软件，或者说选择什么样的管理方式呢？</p><h4 id="版本控制软件分类"><a href="#版本控制软件分类" class="headerlink" title="版本控制软件分类"></a>版本控制软件分类</h4><h5 id="集中式版本管理"><a href="#集中式版本管理" class="headerlink" title="集中式版本管理"></a>集中式版本管理</h5><p>集中式顾名思义就是代码集中到服务器，用的时候每个人把自己需要的被授权的那部分代码下载到自己的计算机上；</p><p>提交也是最后提交到服务器上，服务器可以对代码做很好的控制，但是需要有网络，网络断了，就没法工作了。  </p><p>代表就是SVN,Team Foundation等 </p><h5 id="分布式版本控制"><a href="#分布式版本控制" class="headerlink" title="分布式版本控制"></a>分布式版本控制</h5><p>分布式自然就是每个人的地方多有一份完全的代码，提交和管理都是在本地进行；</p><p>虽然有远端仓库，不过那是最终提交用的，没联网本地也是完整代码的，只是每次需要最新的代码的时候才必须联网；</p><p>分布式的代表就是git，对应的网上仓库比较有名的就是github. </p><hr><p>在清楚的了解这么多之后，我们就要落到实处了，那么究竟如何管理好我们手头上的代码，<strong>如何有效的进行版本管理呢</strong>？</p><p>我想这才是大家关心的重点，也是我为什么需要重新认识版本管理这个概念；</p><p>这里我先留个空，后面来填写这个坑，我会着重<strong>SVN</strong>,<strong>GIT</strong>这两个具有代表性的版本控制工具进行深入的了解和体会。</p>]]></content>
      
      
      <categories>
          
          <category> 版本管理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 版本 </tag>
            
            <tag> 管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>专注力管理-让你的努力更高效</title>
      <link href="/2018/04/17/%E4%B8%93%E6%B3%A8%E5%8A%9B%E7%AE%A1%E7%90%86-%E8%AE%A9%E4%BD%A0%E7%9A%84%E5%8A%AA%E5%8A%9B%E6%9B%B4%E9%AB%98%E6%95%88/"/>
      <url>/2018/04/17/%E4%B8%93%E6%B3%A8%E5%8A%9B%E7%AE%A1%E7%90%86-%E8%AE%A9%E4%BD%A0%E7%9A%84%E5%8A%AA%E5%8A%9B%E6%9B%B4%E9%AB%98%E6%95%88/</url>
      
        <content type="html"><![CDATA[<h4 id="怎么接触到这本书的"><a href="#怎么接触到这本书的" class="headerlink" title="怎么接触到这本书的"></a>怎么接触到这本书的</h4><p>最开始的时候，我也不知道这本书，后面公司组织培训，然后有同事专门对这本书的内容进行了讲解；</p><p>我觉得是本难得的好书，里面干货多多，值得学习一番，或许此前我已经接触过类似，擦边的书籍，但是不妨碍自己再次反思一番；</p><h4 id="本书给我带来的体验"><a href="#本书给我带来的体验" class="headerlink" title="本书给我带来的体验"></a>本书给我带来的体验</h4><h5 id="努力得越多，越不明白"><a href="#努力得越多，越不明白" class="headerlink" title="努力得越多，越不明白"></a>努力得越多，越不明白</h5><p>接触这本书以后，顿时有种醍醐灌顶的感觉，或许很多时候，我其实有想过类似的问题，但是效果却一直不是很好；</p><p>套用书里面的话说，我投入了很多<strong>士兵</strong>（时间），但没有一个好的<strong>将军</strong>（专注力），导致于我失败了一次又一次的战役；</p><p>但这样的事情又每天都上演着，一直以为自己是努力不够，忘却了一个人一天最多有24h，就算压缩睡眠时间到6h，剩下的也就是18h，不可能比别人更多；</p><p>相信有的人一天只睡4-5h，那么是不是那堆人比自己更努力，更厉害了？</p><p>可是卖菜大妈一直都还是卖菜大妈，不管起的多早；</p><h5 id="努力-效果"><a href="#努力-效果" class="headerlink" title="努力!=效果"></a>努力!=效果</h5><p>我相信很多时候，我的行为不管在我自己，还是在别人看来我都是努力的，但是收到的<strong>效果</strong>，我却一直都不满意；</p><p>在和身边的很多同学比较一番之后，我发现了，<strong>我努力带来的结果，仅仅只是好上一点点，收效甚微</strong>；</p><p>仔细反省一番之后，<strong>诚如书中所说的那样，我有意无意的陷入了一种颇为讽刺的自我陶醉中</strong>；</p><p>而书里面给出了这样的一句话：<strong>努力的核心是专注</strong>；</p><p><img src="\img\articlePicture\AbsorbedStrive.jpg" alt="@努力！=走上人生巅峰"></p><p><strong>警惕自己的努力，它可能是无效的努力。</strong></p><p>这句话，简直是直击要害，如果严格点，很时候，你做的事情，一点价值都没有，完全否定了；</p><p>实际情况偏偏是这样，太多时候，如果没有经过认真反思，和专注的努力，最后的效果可以说跟没效果是没区别的；</p><h5 id="聚焦核心"><a href="#聚焦核心" class="headerlink" title="聚焦核心"></a>聚焦核心</h5><p>书籍里面将努力的<strong>瞄准</strong>定位到了<strong>专注力</strong>上面；</p><p>而围绕专注力收到的影响，归为了三类：</p><ul><li>目标</li><li>能力</li><li>心态</li></ul><p>在这三类的影响之下，很多人走神了，更夸张点的失神了，完全启动了<strong>自动驾驶模式</strong>；</p><p>根据这三点，又做再次的延伸，如何针对性的解决；</p><h4 id="是什么让我觉得这是本好书"><a href="#是什么让我觉得这是本好书" class="headerlink" title="是什么让我觉得这是本好书"></a>是什么让我觉得这是本好书</h4><h5 id="书短"><a href="#书短" class="headerlink" title="书短"></a>书短</h5><p>很奇怪，跟原来的印象不一样了，我们都知道很多的经典，都是很长的；</p><p>而且在我们的意识里面，我们会最先想到的是，读的书越厚，那么获取到的越多；</p><p>这样我就陷入了最早开始说的，陷入了一种没有效果的死循环；</p><p>真正有用，而且专注的必然不会太长，而需要消化的时间必然不是很短的一个过程；</p><h5 id="内容精简"><a href="#内容精简" class="headerlink" title="内容精简"></a>内容精简</h5><p>跟现在的书比起来，动不动就是各种方法，这本书的内容算少的；</p><p>或许因为少，所以这本书的定位，是一小时电子书；</p><p>让我们本身就专注在一小时内理解本书的用意和具体的操作方法；</p><h5 id="方法实用"><a href="#方法实用" class="headerlink" title="方法实用"></a>方法实用</h5><p>书里面推荐了一些方法，很多人之前其实都接触过；</p><p>例如现在较为流行的<strong>番茄工作法</strong>等；</p><blockquote><p>一小时你能做什么，如何让它更高效，这部书给你答案；</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 书籍 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 专注 </tag>
            
            <tag> 管理 </tag>
            
            <tag> 高效 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>json与bson的区别</title>
      <link href="/2018/03/10/json%E4%B8%8Ebson%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2018/03/10/json%E4%B8%8Ebson%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>bson是由10gen开发的一个数据格式，目前主要用于mongoDB中，是mongoDB的数据存储格式。bson基于json格式，选择json进行改造的原因主要是json的通用性及json的schemaless(无模式)的特性。</p><h3 id="bson主要方向"><a href="#bson主要方向" class="headerlink" title="bson主要方向"></a>bson主要方向</h3><h4 id="更快的遍历速度"><a href="#更快的遍历速度" class="headerlink" title="更快的遍历速度"></a>更快的遍历速度</h4><p>对json格式来说，太大的json结构会导致数据遍历非常慢。在json中，要跳过一个文档进行数据读取，需要对此文档进行扫描才行，需要进行麻烦的数据结构匹配，比如括号的匹配。 </p><p>而bson对json的一大改进就是，它会将json的每一个元素的长度存在元素的头部，这样你只需要读取到元素长度就能直接seek到指定的点上进行读取了。</p><h4 id="操作更简易"><a href="#操作更简易" class="headerlink" title="操作更简易"></a>操作更简易</h4><p>对json来说，数据存储是无类型的，比如你要修改基本一个值，从9到10，由于从一个字符变成了两个，所以可能其后面的所有内容都需要往后移一位才可以。 </p><p>而使用bson，你可以指定这个列为数字列，那么无论数字从9长到10还是100，我们都只是在存储数字的那一位上进行修改，不会导致数据总长变大。 </p><p>当然，在mongoDB中，如果数字从整形增大到长整型，还是会导致数据总长变大的。</p><h4 id="增加了额外的数据类型"><a href="#增加了额外的数据类型" class="headerlink" title="增加了额外的数据类型"></a>增加了额外的数据类型</h4><p>json是一个很方便的数据交换格式，但是其类型比较有限。 </p><p>bson在其基础上增加了“byte array”数据类型。这使得二进制的存储不再需要先base64转换后再存成json，大大减少了计算开销和数据大小。 </p><p>当然，在有的时候，bson相对json来说也并没有空间上的优势，比如对{“field”:7}，在json的存储上7只使用了一个字节，而如果用bson，那就是至少4个字节（32位）</p><p>目前在10gen的努力下，bson已经有了针对多种语言的编码解码包。并且都是<em>Apache2 license</em>下开源的。并且还在随着mongoDB进一步地发展。</p><h3 id="json与bson对比"><a href="#json与bson对比" class="headerlink" title="json与bson对比"></a>json与bson对比</h3><h4 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h4><p>json是像<strong>字符串存储</strong>的，bson是按<strong>结构存储</strong>的（像数组 或者说struct）</p><h4 id="存储空间"><a href="#存储空间" class="headerlink" title="存储空间"></a>存储空间</h4><p>bson&gt;json</p><h4 id="操作速度"><a href="#操作速度" class="headerlink" title="操作速度"></a>操作速度</h4><p>bson&gt;json。比如，遍历查找：json需要扫字符串，而bson可以直接定位</p><h4 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h4><p>json也要大动大移，bson就不需要。</p><p>在大多数情况下，JSON和BSON非常相似，但BSON可以提供额外的速度冲击。当然，两者都是应用程序存储和检索数据非常方便的方法。</p><blockquote><p>转自<a href="http://blog.csdn.net/xiaojin21cen/article/details/60953980" target="_blank" rel="noopener">张山的博客专栏</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据格式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BSON </tag>
            
            <tag> JSON </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB</title>
      <link href="/2018/03/10/MongoDB/"/>
      <url>/2018/03/10/MongoDB/</url>
      
        <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>最近学习到React-Native，需要学习一下Facebook推出的f8app例子；</p><blockquote><p>MongoDB介绍</p></blockquote><p>MongoDB 是一个基于分布式文件存储的数据库。由<strong>C++语言编写</strong>。<strong>旨在为WEB</strong>应用提供可扩展的高性能数据存储解决方案。</p><p>MongoDB <strong>是一个介于关系数据库和非关系数据库之间的产品</strong>，是非关系数据库当中功能最丰富，最像关系数据库的(<em>听着像小品界最会唱歌的小沈阳</em>)。他支持的数据结构非常松散，是类似json的bson(<strong>Binary Serialized Document Format</strong>)<strong>是一种二进制形式的存储格式</strong>，因此可以存储比较复杂的数据类型。</p><p>Mongo最大的特点是他支持的查询语言非常强大，<strong>其语法有点类似于面向对象的查询语言</strong>，几乎可以实现类似关系数据库单表查询的绝大部分功能，而且还支持对数据建立索引。</p><p>这里不得不说一下，其实他是NoSQL(NoSQL = Not Only SQL,意即“不仅仅是SQL”)数据库的一种。</p><p>扩展一下，HBase数据库也是NoSQL的一种。</p><blockquote><p>特点</p></blockquote><ol><li>支持RUBY，PYTHON，JAVA，C++，PHP，C#等多种语言。</li><li>文件存储格式为BSON（一种JSON的扩展）。<a href="http://blog.langaobai.top/2018/03/10/json与bson的区别/" target="_blank" rel="noopener">JSON与BSON</a></li><li>可通过网络访问。</li></ol><p>此处抄于百度词条，如果有错，不要找我…</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>而其中需要用到MongDB，我下载的是3.6版本的，需要下载的请点击<a href="https://www.mongodb.com/download-center#atlas" target="_blank" rel="noopener">MongoDB</a></p><p>一路点击<kbd>Next</kbd>就可以了，当然前提是你知道你要安装在什么地方。</p><p>直达最后，安装界面提示你，可能要花些时间，但是这个时间很说不准，万一卡了呢，那么你只能关闭了，不过不要担心，下次开机的时候，其实你已经安装好了，不行你就再装一遍。</p><h3 id="API学习"><a href="#API学习" class="headerlink" title="API学习"></a>API学习</h3><p>安装好以后，我们就该学习了，<a href="https://docs.mongodb.com/" target="_blank" rel="noopener">MongoDB API</a></p><p>未完待续…</p>]]></content>
      
      
      <categories>
          
          <category> MongDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MongDB </tag>
            
            <tag> BSON </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle常用命令</title>
      <link href="/2018/03/09/Oracle%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2018/03/09/Oracle%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h3 id="Oracle表空间创建"><a href="#Oracle表空间创建" class="headerlink" title="Oracle表空间创建"></a>Oracle表空间创建</h3><ol><li>创建临时表空间<pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">temporary</span> <span class="token keyword">tablespace</span> YNMZCK_TEMP  tempfile <span class="token string">'D:\Install_file\app\Administrator\oradata\orcl\YNMZCK_TEMP.dbf'</span> size 50m  autoextend <span class="token keyword">on</span>  <span class="token keyword">next</span> 50m maxsize 20480m  extent management <span class="token keyword">local</span><span class="token punctuation">;</span></code></pre></li><li>创建数据表空间<pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">tablespace</span> YNMZCK  logging  datafile <span class="token string">'D:\Install_file\app\Administrator\oradata\orcl\YNMZCK.dbf'</span> size 50m  autoextend <span class="token keyword">on</span>  <span class="token keyword">next</span> 50m maxsize 20480m  extent management <span class="token keyword">local</span><span class="token punctuation">;</span></code></pre></li><li><p>创建用户并指定表空间</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">user</span> YNMZCK identified <span class="token keyword">by</span> YNMZCK<span class="token keyword">default</span> <span class="token keyword">tablespace</span> YNMZCK  <span class="token keyword">temporary</span> <span class="token keyword">tablespace</span> YNMZCK_TEMP<span class="token punctuation">;</span></code></pre></li><li><p>给用户授予权限</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">grant</span> <span class="token keyword">connect</span><span class="token punctuation">,</span>resource<span class="token punctuation">,</span><span class="token number">dba</span> <span class="token keyword">to</span> YNMZCK<span class="token punctuation">;</span></code></pre></li></ol><h3 id="Oracle导入-导出dmp"><a href="#Oracle导入-导出dmp" class="headerlink" title="Oracle导入/导出dmp"></a>Oracle导入/导出dmp</h3><ol><li><p>导出命令</p><pre class=" language-bash"><code class="language-bash">exp YNMZCC/YNMZCC@orcl  file<span class="token operator">=</span>d:\ynmzcc.dmp owner <span class="token operator">=</span> YNMZCC<span class="token comment" spellcheck="true"># 字符集问题，NLS_LANG</span><span class="token comment" spellcheck="true"># 查看环境变量</span><span class="token keyword">echo</span> %NLS_LANG%<span class="token comment" spellcheck="true"># 设置环境变量</span><span class="token keyword">set</span> NLS_LANG<span class="token operator">=</span>AMERICAN_AMERICA.AL32UTF8<span class="token keyword">set</span> NLS_LANG<span class="token operator">=</span>AMERICAN_AMERICA.ZHS16GBK</code></pre></li><li><p>导入命令</p><pre class=" language-bash"><code class="language-bash">imp username/password@SID file<span class="token operator">=</span>XXX.dmp fromuser<span class="token operator">=</span>XXX touser<span class="token operator">=</span>XXX tables<span class="token operator">=</span><span class="token punctuation">(</span>XXX,XXX<span class="token punctuation">)</span></code></pre></li></ol><h3 id="Oracle清空或者删除当前用户下所有的表"><a href="#Oracle清空或者删除当前用户下所有的表" class="headerlink" title="Oracle清空或者删除当前用户下所有的表"></a>Oracle清空或者删除当前用户下所有的表</h3><ol><li>使用客户端</li></ol><pre class=" language-bash"><code class="language-bash">使用pl/sql客户端，使用该用户登录，选中所有表 右键drop即可</code></pre><ol start="2"><li>动态生成删除命令（<strong>要求用户有相应权限</strong>）</li></ol><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token string">'drop table '</span><span class="token operator">||</span>table_name<span class="token operator">||</span><span class="token string">';'</span> <span class="token keyword">from</span> user_tables<span class="token punctuation">;</span>  </code></pre><ol start="3"><li>使用存储过程删除该用户下所有表</li></ol><pre class=" language-sql"><code class="language-sql"><span class="token keyword">set</span> ECHO <span class="token keyword">ON</span>  <span class="token keyword">set</span> define <span class="token keyword">off</span>       SPOOL logs<span class="token operator">/</span>create_procedure<span class="token punctuation">.</span>log  <span class="token comment" spellcheck="true">--删除所有表的存储过程;    </span><span class="token keyword">create</span> <span class="token operator">or</span> replace <span class="token keyword">procedure</span> P_DROP_ALL_TABLE  <span class="token keyword">as</span>     <span class="token comment" spellcheck="true">--引用user_tables表中的tableName的类型;  </span>  tableName user_tables<span class="token punctuation">.</span>table_name<span class="token operator">%</span><span class="token keyword">type</span><span class="token punctuation">;</span>      <span class="token keyword">type</span> ty <span class="token operator">is</span> record<span class="token punctuation">(</span>table_name varchar2<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">--定义ref类型游标;-强类型  </span>  <span class="token keyword">type</span> ref_type <span class="token operator">is</span> ref <span class="token keyword">cursor</span> <span class="token keyword">return</span> ty<span class="token punctuation">;</span>    ref_t ref_type<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">--定义变量存储数量;  </span>  mycount number<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">begin</span>      <span class="token comment" spellcheck="true">--打开游标;  </span>    <span class="token keyword">open</span> ref_t <span class="token keyword">for</span> <span class="token keyword">select</span> table_name <span class="token keyword">from</span> user_tables<span class="token punctuation">;</span>           loop               <span class="token comment" spellcheck="true">--从游标中获取一条记录,放入变量中;  </span>             <span class="token keyword">fetch</span> ref_t <span class="token keyword">into</span> tableName<span class="token punctuation">;</span>                      <span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">INTO</span> mycount <span class="token keyword">FROM</span> user_tables <span class="token keyword">WHERE</span> TABLE_NAME <span class="token operator">=</span> tableName<span class="token punctuation">;</span>                      <span class="token keyword">if</span> mycount<span class="token operator">></span><span class="token number">0</span> <span class="token keyword">then</span>                         <span class="token keyword">execute</span> immediate <span class="token string">'DROP TABLE '</span><span class="token operator">||</span>tableName <span class="token operator">||</span> <span class="token string">' CASCADE CONSTRAINT '</span><span class="token punctuation">;</span>                      <span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span>               <span class="token keyword">exit</span> <span class="token keyword">when</span> ref_t<span class="token operator">%</span>notfound<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">--退出;  </span>         <span class="token keyword">end</span> loop<span class="token punctuation">;</span>       <span class="token keyword">close</span> ref_t<span class="token punctuation">;</span>        <span class="token keyword">end</span><span class="token punctuation">;</span>  <span class="token operator">/</span>  </code></pre><p>清除的话，将 <strong>drop</strong> 替换为 <strong>truncate</strong> 或者 <strong>delete</strong> ,过程 同上</p><h3 id="如何使用sql语句操作表中的字段"><a href="#如何使用sql语句操作表中的字段" class="headerlink" title="如何使用sql语句操作表中的字段"></a>如何使用sql语句操作表中的字段</h3><ol><li>新增字段</li></ol><pre class=" language-sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 <span class="token keyword">ADD</span> 时间字段 <span class="token keyword">DATE</span> <span class="token keyword">DEFAULT</span> SYSDATE<span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 新增</span><span class="token keyword">COMMENT</span> <span class="token keyword">ON</span> <span class="token keyword">COLUMN</span> 表名<span class="token punctuation">.</span>时间字段 <span class="token operator">IS</span> <span class="token string">'系统时间'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 注释</span></code></pre><ol start="2"><li>修改字段</li></ol><pre class=" language-sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 <span class="token keyword">MODIFY</span> 要修改的字段 VARCHAR2（<span class="token number">12</span>）<span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 修改</span><span class="token keyword">COMMENT</span> <span class="token keyword">ON</span> <span class="token keyword">COLUMN</span> 表名<span class="token punctuation">.</span>要修改的字段 <span class="token operator">IS</span> <span class="token string">'系统时间'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 注释</span></code></pre><h3 id="删除表空间"><a href="#删除表空间" class="headerlink" title="删除表空间"></a>删除表空间</h3><h4 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">user</span> 用户名称 <span class="token keyword">cascade</span><span class="token punctuation">;</span></code></pre><h4 id="删除表空间-1"><a href="#删除表空间-1" class="headerlink" title="删除表空间"></a>删除表空间</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">tablespace</span> 表空间名称 including contents <span class="token operator">and</span> datafiles <span class="token keyword">cascade</span> <span class="token keyword">constraint</span><span class="token punctuation">;</span></code></pre><h3 id="根据表相关信息进行查询"><a href="#根据表相关信息进行查询" class="headerlink" title="根据表相关信息进行查询"></a>根据表相关信息进行查询</h3><h4 id="根据表信息查询表"><a href="#根据表信息查询表" class="headerlink" title="根据表信息查询表"></a>根据表信息查询表</h4><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- UTC可接字段</span><span class="token comment" spellcheck="true">-- TABLE_NAME 表名</span><span class="token comment" spellcheck="true">-- TABLE_TYPE 表类型</span><span class="token comment" spellcheck="true">-- COMMENTS 注释</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> USER_TAB_COMMENTS UTC <span class="token keyword">WHERE</span> UTC<span class="token punctuation">.</span>COMMENTS <span class="token operator">LIKE</span> <span class="token string">'%comment%'</span></code></pre><h4 id="根据表字段查询"><a href="#根据表字段查询" class="headerlink" title="根据表字段查询"></a>根据表字段查询</h4><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- TABLE_NAME 表名</span><span class="token comment" spellcheck="true">-- COLUMN_NAME 字段名称</span><span class="token comment" spellcheck="true">-- COMMENTS 字段注释</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> USER_COL_COMMENTS <span class="token keyword">WHERE</span> TABLE_NAME <span class="token operator">=</span> <span class="token string">'TABLE_NAME'</span></code></pre><h3 id="delete数据恢复"><a href="#delete数据恢复" class="headerlink" title="delete数据恢复"></a>delete数据恢复</h3><h4 id="打开Flash存储的权限"><a href="#打开Flash存储的权限" class="headerlink" title="打开Flash存储的权限"></a>打开Flash存储的权限</h4><pre class=" language-sql"><code class="language-sql"> <span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> tablename <span class="token keyword">ENABLE</span> <span class="token keyword">row</span> movement <span class="token punctuation">;</span></code></pre><h4 id="把表还原到指定时间点"><a href="#把表还原到指定时间点" class="headerlink" title="把表还原到指定时间点"></a>把表还原到指定时间点</h4><pre class=" language-sql"><code class="language-sql">flashback <span class="token keyword">table</span> tablename <span class="token keyword">to</span> <span class="token keyword">timestamp</span> to_timestamp<span class="token punctuation">(</span><span class="token string">'2008-02-28 10:40:00'</span><span class="token punctuation">,</span><span class="token string">'yyyy-mm-dd hh24:mi:ss'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="drop数据恢复（未重建同名的表时才有用）"><a href="#drop数据恢复（未重建同名的表时才有用）" class="headerlink" title="drop数据恢复（未重建同名的表时才有用）"></a>drop数据恢复（未重建同名的表时才有用）</h4><pre class=" language-sql"><code class="language-sql">flashback <span class="token keyword">table</span> tbl_corpinfo <span class="token keyword">to</span> before <span class="token keyword">drop</span><span class="token punctuation">;</span></code></pre><h3 id="oracle数据库的最大连接数"><a href="#oracle数据库的最大连接数" class="headerlink" title="oracle数据库的最大连接数"></a>oracle数据库的最大连接数</h3><h4 id="查询连接数"><a href="#查询连接数" class="headerlink" title="查询连接数"></a>查询连接数</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">show</span> parameter processes<span class="token punctuation">;</span><span class="token keyword">show</span> parameter sessions<span class="token punctuation">;</span></code></pre><h4 id="修改连接数"><a href="#修改连接数" class="headerlink" title="修改连接数"></a>修改连接数</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">alter</span> system <span class="token keyword">set</span> processes<span class="token operator">=</span><span class="token number">500</span> scope<span class="token operator">=</span>spfile<span class="token punctuation">;</span><span class="token keyword">alter</span> system <span class="token keyword">set</span> sessions<span class="token operator">=</span><span class="token number">500</span> scope<span class="token operator">=</span>spfile<span class="token punctuation">;</span></code></pre><p>重启服务,修改的连接数就会生效。</p>]]></content>
      
      
      <categories>
          
          <category> Oracle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Oracle </tag>
            
            <tag> note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MODBUS协议</title>
      <link href="/2018/03/09/MODBUS%E5%8D%8F%E8%AE%AE/"/>
      <url>/2018/03/09/MODBUS%E5%8D%8F%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<h4 id="情况介绍"><a href="#情况介绍" class="headerlink" title="情况介绍"></a>情况介绍</h4><p>最近公司项目有部分涉及到一个库位灯的通讯，因此我需要对该协议有个具体的了解；</p><p>在之前我并没有接触过这个协议甚至不明白这是啥，能用来做啥的。</p><p>我们首先对<strong>协议</strong>这个特定的词汇进行深入解读一下，避免一些语文差点的同学搞不清楚；</p><p>如果需要对这个汉语有更深入的了解，可以百度一下；</p><p>我们这里用自己的话说一下，其实就是方言，例如你说温州话，或者英语，而你也只能听懂这类话，我们因此把这种说温州话或者英语的标准称为协议。</p><p>上面我们说了一堆废话，那么从下面开始，我们进入正题；</p><p>我们需要与库位灯进行沟通，那么就需要一种方言——<em>协议</em>。</p><p>就让我们了解下什么是MODBUS协议；</p><h4 id="协议简介"><a href="#协议简介" class="headerlink" title="协议简介"></a>协议简介</h4><p><strong>Modbus 是一个请求/应答协议。</strong></p><p><strong>它已经成为一通用工业标准。有了它，不同厂商生产的控制设备可以连成工业网络，进行集中监控。</strong></p><p>MODBUS协议支持传统的RS-232、RS-422、RS-485和以太网设备。许多工业设备，包括PLC，DCS，智能仪表等都在使用Modbus协议作为他们之间的通讯标准。</p><p>MODBUS通讯协议，是1979年由美国Modicon 公司提出的，就是被称为PLC 之父的迪克·莫利先生创造的品牌。</p><p><strong>MODBUS是世界上第一个用于工业现场的总线协议</strong>，可以说，它的出现标志着工业现场从模拟量时代向通讯时代迈进。。</p><h4 id="如何定义"><a href="#如何定义" class="headerlink" title="如何定义"></a>如何定义</h4><p>既然是协议，那么它究竟如何定义，它的规范又是什么呢？</p><p>从程序的角度出发，快速定义：</p><h4 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h4><h5 id="仿真"><a href="#仿真" class="headerlink" title="仿真"></a>仿真</h5><p>安装modbus仿真工具<a href="http://www.modbustools.com/download.html" target="_blank" rel="noopener">Modbus Slave</a>, 用来模仿一台Modbus协议设备</p><p>1.安装完毕之后的界面是这样的：</p><p><img src="\img\articlePicture\ModbusSlaveIcon.png" alt="安装好之后的样子"></p><p>2.启动后的界面：</p><p><img src="\img\articlePicture\ModbusSlaveLunch.png" alt="启动之后的样子"></p><p>3.选中仿真的设备，然后进行设定，或者鼠标点击按<strong>F8</strong></p><p><img src="\img\articlePicture\ModbusSlaveOperat.png" alt="启动之后的样子"></p><p>4.这里我参考了别人对于Function的理解</p><p>4.1 个人理解版本</p><ul><li>可以读写的布尔类型(0x)</li><li>只能读的布尔类型(1x)</li><li>只能读的数字类型(3x)</li><li>可以读写的数字类型(4x)</li></ul><p>4.2 jamod也提供了操作每种不同类型使用不同的类，这里我列个表</p><table><thead><tr><th>类型</th><th>请求类</th><th>响应类</th></tr></thead><tbody><tr><td>可以读写的布尔类型(0x)</td><td>ReadCoilsRequest</td><td>ReadCoilsResponse</td></tr><tr><td>只能读的布尔类型(1x)</td><td>ReadInputDiscretesRequest</td><td>ReadInputDiscretesResponse</td></tr><tr><td>只能读的数字类型(3x)</td><td>ReadInputRegistersRequest</td><td>ReadInputRegistersResponse</td></tr><tr><td>可以读写的数字类型(4x)</td><td>ReadMultipleRegistersRequest</td><td>ReadMultipleRegistersResponse</td></tr></tbody></table><p>5.设定成功以后选择上部的菜单<kbd>Connection</kbd>，选择<strong>Modebus TCP/IP</strong>，在<strong>TCP/IP Server</strong>栏进行进行配置，如图</p><p><img src="\img\articlePicture\ModbusSlaveConnect.png" alt="Modbus Connect"></p><p>启动之后，红色的No Connection就会消失了；</p><h5 id="jar包"><a href="#jar包" class="headerlink" title="jar包"></a>jar包</h5><p>如果你使用的也是java，好吧，这里仅仅介绍java的，其他另外想办法吧。</p><p>可以到maven仓库去下载这个<a href="http://mvnrepository.com/artifact/net.wimpi/jamod/1.2" target="_blank" rel="noopener">jamod.jar</a></p><h5 id="java编程部分-源码"><a href="#java编程部分-源码" class="headerlink" title="java编程部分^源码"></a>java编程部分<a href="详细的可以从GitHub上下载源代码,具体见文章最后">^源码</a></h5><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ModbusUtil</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**    * @Title: readDigitalInput     * @Description: TODO(只能读的布尔类型(1x))     * @autor hongpeng.zhang    * @param ip IP地址    * @param port 端口    * @param slaveId modbus设备地址    * @param address 内部寄存器地址，PLC地址    * @return    * @throws     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">readDigitalInput</span><span class="token punctuation">(</span>String ip<span class="token punctuation">,</span> <span class="token keyword">int</span> port<span class="token punctuation">,</span> <span class="token keyword">int</span> slaveId<span class="token punctuation">,</span> <span class="token keyword">int</span> address<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**    * @Title: readInputRegister     * @Description: TODO(只能读的数字类型(3x))     * @autor hongpeng.zhang    * @param ip IP地址    * @param port 端口    * @param address 内部寄存器地址，PLC地址    * @param slaveId modbus设备地址    * @return    * @throws     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">readInputRegister</span><span class="token punctuation">(</span>String ip<span class="token punctuation">,</span> <span class="token keyword">int</span> port<span class="token punctuation">,</span> <span class="token keyword">int</span> slaveId<span class="token punctuation">,</span> <span class="token keyword">int</span> address<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**    * @Title: readDigitalOutput     * @Description: TODO(可以读写的布尔类型(0x))     * @param ip IP地址    * @param port 端口    * @param slaveId modbus设备地址    * @param address 内部寄存器地址，PLC地址    * @return    * @throws     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">readDigitalOutput</span><span class="token punctuation">(</span>String ip<span class="token punctuation">,</span> <span class="token keyword">int</span> port<span class="token punctuation">,</span> <span class="token keyword">int</span> slaveId<span class="token punctuation">,</span> <span class="token keyword">int</span> address<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**    * @Title: readRegister     * @Description: TODO(读取可以读写的数字类型(4x))     * @autor hongpeng.zhang    * @param ip IP地址    * @param port 端口    * @param slaveId modbus设备地址    * @param address 内部寄存器地址，PLC地址    * @return    * @throws     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">readRegister</span><span class="token punctuation">(</span>String ip<span class="token punctuation">,</span> <span class="token keyword">int</span> port<span class="token punctuation">,</span><span class="token keyword">int</span> slaveId<span class="token punctuation">,</span> <span class="token keyword">int</span> address<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**    * @Title: writeRegister     * @Description: TODO(写入数据到真机，数据类型是RE,用于写到寄存器地址，相应数据，这里需要注意的是，针对的设备必须是可以读写的数字类型，而非另外三种)     * @param ip IP地址    * @param port 端口    * @param slaveId modbus设备地址    * @param address 内部寄存器地址，PLC地址    * @param value 需要设置的值    * @throws     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">writeRegister</span><span class="token punctuation">(</span>String ip<span class="token punctuation">,</span> <span class="token keyword">int</span> port<span class="token punctuation">,</span> <span class="token keyword">int</span> slaveId<span class="token punctuation">,</span> <span class="token keyword">int</span> address<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**    * @Title: writeDigitalOutput     * @Description: TODO(写入数据到真机的DO类型的寄存器上面)     * @param ip IP地址    * @param port 端口    * @param slaveId modbus设备地址    * @param address 内部寄存器地址，PLC地址    * @param value 需要设置的值    * @throws     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">writeDigitalOutput</span><span class="token punctuation">(</span>String ip<span class="token punctuation">,</span> <span class="token keyword">int</span> port<span class="token punctuation">,</span> <span class="token keyword">int</span> slaveId<span class="token punctuation">,</span> <span class="token keyword">int</span> address<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>上面的部分引自<strong>核心代码</strong>部分，需要直接操作的，可以直接找到这个类，我已经对照进行注释了；</p><p>内部使用的变量字符都可以对照着模拟仿真对应的设置参数；</p><blockquote><p>本文中的代码部分，以及代码操作部分引 <a href="https://www.cnblogs.com/Dn9x/p/4298146.html" target="_blank" rel="noopener">Dn9x</a> <a href="https://github.com/Dn9x/dn-modbus" target="_blank" rel="noopener">GitHub地址</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> MODBUS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MODBUS </tag>
            
            <tag> 通信协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hello,大家好，这是我在git上开通的博客</title>
      <link href="/2016/09/22/hello-%E5%A4%A7%E5%AE%B6%E5%A5%BD%EF%BC%8C%E8%BF%99%E6%98%AF%E6%88%91%E5%9C%A8git%E4%B8%8A%E5%BC%80%E9%80%9A%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
      <url>/2016/09/22/hello-%E5%A4%A7%E5%AE%B6%E5%A5%BD%EF%BC%8C%E8%BF%99%E6%98%AF%E6%88%91%E5%9C%A8git%E4%B8%8A%E5%BC%80%E9%80%9A%E7%9A%84%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>这里采用了<a href="https://hexo.io/" target="_blank" rel="noopener">hexo</a>作为搭建工具</p><p>具体的演示内容就不在这进行多余的叙述，搭建的过程也是困难重重。</p><p>一开始就遇到一个问题，不论如何都是不对，后面根据知乎里面一个大神的解答，终于能够顺利发布版本进行更新。</p><blockquote><p>以下是那位大神的解答</p></blockquote><pre class=" language-bash"><code class="language-bash">首先清空 $ hexo clean然后在你建立的博客文件夹下删除.deploy_git$ <span class="token function">git</span> config --global core.autocrlf <span class="token boolean">false</span>重新导出：$ hexo g发布版本: $ hexo d</code></pre><p><em>这里的3，代表的意思是配置git的全局变量，关闭它的自动换行功能，当然了，针对其中的工作原理可以选择使用其他的配置方式，不一定要采用关闭的方式。</em></p><hr><p><strong>至于其他的初始化，如何进行配置等，这里不做详细指导</strong><br>各位可以通过百度或者谷歌就能找到答案；</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title></title>
      <link href="/baidu_verify_UJnzbcntPV.html"/>
      <url>/baidu_verify_UJnzbcntPV.html</url>
      
        <content type="html"><![CDATA[UJnzbcntPV]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/google9f9cc14ef2981a0f.html"/>
      <url>/google9f9cc14ef2981a0f.html</url>
      
        <content type="html"><![CDATA[google-site-verification: google9f9cc14ef2981a0f.html]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>关于我</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>蓝告白的博客，langaobai‘s blog’</p></blockquote><p>俗话说的好，<strong>好记性不如烂笔头</strong>，这是我的个人博客；</p><p>一直以来都没有好好记录和整理一下关于自己的东西；</p><p>原来建立博客的时候还是两年前的事情了，但直到最近才发现自己很多时候，<strong>没有记录，意味着自己没有好好沉淀属于自己的东西。</strong></p><p>博客会记录关于三个方面的东西，<strong>IT技术</strong>，<strong>书籍</strong>，<strong>电影</strong></p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>走廊</title>
      <link href="/gallery/index.html"/>
      <url>/gallery/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签云</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>时间桥</title>
      <link href="/timeline/index.html"/>
      <url>/timeline/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
