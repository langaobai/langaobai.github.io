<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>专注力管理-让你的努力更高效</title>
      <link href="/2018/04/17/%E4%B8%93%E6%B3%A8%E5%8A%9B%E7%AE%A1%E7%90%86-%E8%AE%A9%E4%BD%A0%E7%9A%84%E5%8A%AA%E5%8A%9B%E6%9B%B4%E9%AB%98%E6%95%88/"/>
      <content type="html"><![CDATA[<h4 id="怎么接触到这本书的"><a href="#怎么接触到这本书的" class="headerlink" title="怎么接触到这本书的"></a>怎么接触到这本书的</h4><p>最开始的时候，我也不知道这本书，后面公司组织培训，然后有同事专门对这本书的内容进行了讲解；</p><p>我觉得是本难得的好书，里面干货多多，值得学习一番，或许此前我已经接触过类似，擦边的书籍，但是不妨碍自己再次反思一番；</p><h4 id="本书给我带来的体验"><a href="#本书给我带来的体验" class="headerlink" title="本书给我带来的体验"></a>本书给我带来的体验</h4><h5 id="努力得越多，越不明白"><a href="#努力得越多，越不明白" class="headerlink" title="努力得越多，越不明白"></a>努力得越多，越不明白</h5><p>接触这本书以后，顿时有种醍醐灌顶的感觉，或许很多时候，我其实有想过类似的问题，但是效果却一直不是很好；</p><p>套用书里面的话说，我投入了很多<strong>士兵</strong>（时间），但没有一个好的<strong>将军</strong>（专注力），导致于我失败了一次又一次的战役；</p><p>但这样的事情又每天都上演着，一直以为自己是努力不够，忘却了一个人一天最多有24h，就算压缩睡眠时间到6h，剩下的也就是18h，不可能比别人更多；</p><p>相信有的人一天只睡4-5h，那么是不是那堆人比自己更努力，更厉害了？</p><p>可是卖菜大妈一直都还是卖菜大妈，不管起的多早；</p><h5 id="努力-效果"><a href="#努力-效果" class="headerlink" title="努力!=效果"></a>努力!=效果</h5><p>我相信很多时候，我的行为不管在我自己，还是在别人看来我都是努力的，但是收到的<strong>效果</strong>，我却一直都不满意；</p><p>在和身边的很多同学比较一番之后，我发现了，<strong>我努力带来的结果，仅仅只是好上一点点，收效甚微</strong>；</p><p>仔细反省一番之后，<strong>诚如书中所说的那样，我有意无意的陷入了一种颇为讽刺的自我陶醉中</strong>；</p><p>而书里面给出了这样的一句话：<strong>努力的核心是专注</strong>；</p><p><img src="\img\articlePicture\AbsorbedStrive.jpg" alt="@努力！=走上人生巅峰"></p><p><strong>警惕自己的努力，它可能是无效的努力。</strong></p><p>这句话，简直是直击要害，如果严格点，很时候，你做的事情，一点价值都没有，完全否定了；</p><p>实际情况偏偏是这样，太多时候，如果没有经过认真反思，和专注的努力，最后的效果可以说跟没效果是没区别的；</p><h5 id="聚焦核心"><a href="#聚焦核心" class="headerlink" title="聚焦核心"></a>聚焦核心</h5><p>书籍里面将努力的<strong>瞄准</strong>定位到了<strong>专注力</strong>上面；</p><p>而围绕专注力收到的影响，归为了三类：</p><ul><li>目标</li><li>能力</li><li>心态</li></ul><p>在这三类的影响之下，很多人走神了，更夸张点的失神了，完全启动了<strong>自动驾驶模式</strong>；</p><p>根据这三点，又做再次的延伸，如何针对性的解决；</p><h4 id="是什么让我觉得这是本好书"><a href="#是什么让我觉得这是本好书" class="headerlink" title="是什么让我觉得这是本好书"></a>是什么让我觉得这是本好书</h4><h5 id="书短"><a href="#书短" class="headerlink" title="书短"></a>书短</h5><p>很奇怪，跟原来的印象不一样了，我们都知道很多的经典，都是很长的；</p><p>而且在我们的意识里面，我们会最先想到的是，读的书越厚，那么获取到的越多；</p><p>这样我就陷入了最早开始说的，陷入了一种没有效果的死循环；</p><p>真正有用，而且专注的必然不会太长，而需要消化的时间必然不是很短的一个过程；</p><h5 id="内容精简"><a href="#内容精简" class="headerlink" title="内容精简"></a>内容精简</h5><p>跟现在的书比起来，动不动就是各种方法，这本书的内容算少的；</p><p>或许因为少，所以这本书的定位，是一小时电子书；</p><p>让我们本身就专注在一小时内理解本书的用意和具体的操作方法；</p><h5 id="方法实用"><a href="#方法实用" class="headerlink" title="方法实用"></a>方法实用</h5><p>书里面推荐了一些方法，很多人之前其实都接触过；</p><p>例如现在较为流行的<strong>番茄工作法</strong>等；</p><blockquote><p>一小时你能做什么，如何让它更高效，这部书给你答案；</p></blockquote>]]></content>
      
      <categories>
          
          <category> 书籍 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 专注 </tag>
            
            <tag> 管理 </tag>
            
            <tag> 高效 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>json与bson的区别</title>
      <link href="/2018/03/10/json%E4%B8%8Ebson%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>bson是由10gen开发的一个数据格式，目前主要用于mongoDB中，是mongoDB的数据存储格式。bson基于json格式，选择json进行改造的原因主要是json的通用性及json的schemaless(无模式)的特性。</p><h3 id="bson主要方向"><a href="#bson主要方向" class="headerlink" title="bson主要方向"></a>bson主要方向</h3><h4 id="更快的遍历速度"><a href="#更快的遍历速度" class="headerlink" title="更快的遍历速度"></a>更快的遍历速度</h4><p>对json格式来说，太大的json结构会导致数据遍历非常慢。在json中，要跳过一个文档进行数据读取，需要对此文档进行扫描才行，需要进行麻烦的数据结构匹配，比如括号的匹配。 </p><p>而bson对json的一大改进就是，它会将json的每一个元素的长度存在元素的头部，这样你只需要读取到元素长度就能直接seek到指定的点上进行读取了。</p><h4 id="操作更简易"><a href="#操作更简易" class="headerlink" title="操作更简易"></a>操作更简易</h4><p>对json来说，数据存储是无类型的，比如你要修改基本一个值，从9到10，由于从一个字符变成了两个，所以可能其后面的所有内容都需要往后移一位才可以。 </p><p>而使用bson，你可以指定这个列为数字列，那么无论数字从9长到10还是100，我们都只是在存储数字的那一位上进行修改，不会导致数据总长变大。 </p><p>当然，在mongoDB中，如果数字从整形增大到长整型，还是会导致数据总长变大的。</p><h4 id="增加了额外的数据类型"><a href="#增加了额外的数据类型" class="headerlink" title="增加了额外的数据类型"></a>增加了额外的数据类型</h4><p>json是一个很方便的数据交换格式，但是其类型比较有限。 </p><p>bson在其基础上增加了“byte array”数据类型。这使得二进制的存储不再需要先base64转换后再存成json，大大减少了计算开销和数据大小。 </p><p>当然，在有的时候，bson相对json来说也并没有空间上的优势，比如对{“field”:7}，在json的存储上7只使用了一个字节，而如果用bson，那就是至少4个字节（32位）</p><p>目前在10gen的努力下，bson已经有了针对多种语言的编码解码包。并且都是<em>Apache2 license</em>下开源的。并且还在随着mongoDB进一步地发展。</p><h3 id="json与bson对比"><a href="#json与bson对比" class="headerlink" title="json与bson对比"></a>json与bson对比</h3><h4 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h4><p>json是像<strong>字符串存储</strong>的，bson是按<strong>结构存储</strong>的（像数组 或者说struct）</p><h4 id="存储空间"><a href="#存储空间" class="headerlink" title="存储空间"></a>存储空间</h4><p>bson&gt;json</p><h4 id="操作速度"><a href="#操作速度" class="headerlink" title="操作速度"></a>操作速度</h4><p>bson&gt;json。比如，遍历查找：json需要扫字符串，而bson可以直接定位</p><h4 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h4><p>json也要大动大移，bson就不需要。</p><p>在大多数情况下，JSON和BSON非常相似，但BSON可以提供额外的速度冲击。当然，两者都是应用程序存储和检索数据非常方便的方法。</p><blockquote><p>转自<a href="http://blog.csdn.net/xiaojin21cen/article/details/60953980" target="_blank" rel="noopener">张山的博客专栏</a></p></blockquote>]]></content>
      
      <categories>
          
          <category> 数据格式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BSON </tag>
            
            <tag> JSON </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Oracle常用命令</title>
      <link href="/2018/03/09/Oracle%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <content type="html"><![CDATA[<h3 id="Oracle表空间创建"><a href="#Oracle表空间创建" class="headerlink" title="Oracle表空间创建"></a>Oracle表空间创建</h3><ol><li>创建临时表空间<pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">temporary</span> <span class="token keyword">tablespace</span> YNMZCK_TEMP  tempfile <span class="token string">'D:\Install_file\app\Administrator\oradata\orcl\YNMZCK_TEMP.dbf'</span> size 50m  autoextend <span class="token keyword">on</span>  <span class="token keyword">next</span> 50m maxsize 20480m  extent management <span class="token keyword">local</span><span class="token punctuation">;</span></code></pre></li><li>创建数据表空间<pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">tablespace</span> YNMZCK  logging  datafile <span class="token string">'D:\Install_file\app\Administrator\oradata\orcl\YNMZCK.dbf'</span> size 50m  autoextend <span class="token keyword">on</span>  <span class="token keyword">next</span> 50m maxsize 20480m  extent management <span class="token keyword">local</span><span class="token punctuation">;</span></code></pre></li><li><p>创建用户并指定表空间</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">user</span> YNMZCK identified <span class="token keyword">by</span> YNMZCK<span class="token keyword">default</span> <span class="token keyword">tablespace</span> YNMZCK  <span class="token keyword">temporary</span> <span class="token keyword">tablespace</span> YNMZCK_TEMP<span class="token punctuation">;</span></code></pre></li><li><p>给用户授予权限</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">grant</span> <span class="token keyword">connect</span><span class="token punctuation">,</span>resource<span class="token punctuation">,</span><span class="token number">dba</span> <span class="token keyword">to</span> YNMZCK<span class="token punctuation">;</span></code></pre></li></ol><h3 id="Oracle导入-导出dmp"><a href="#Oracle导入-导出dmp" class="headerlink" title="Oracle导入/导出dmp"></a>Oracle导入/导出dmp</h3><ol><li><p>导出命令</p><pre class=" language-bash"><code class="language-bash">exp YNMZCC/YNMZCC@orcl  file<span class="token operator">=</span>d:\ynmzcc.dmp owner <span class="token operator">=</span> YNMZCC</code></pre></li><li><p>导入命令</p><pre class=" language-bash"><code class="language-bash">imp username/password@SID file<span class="token operator">=</span>XXX.dmp fromuser<span class="token operator">=</span>XXX touser<span class="token operator">=</span>XXX tables<span class="token operator">=</span><span class="token punctuation">(</span>XXX,XXX<span class="token punctuation">)</span></code></pre></li></ol><h3 id="Oracle清空或者删除当前用户下所有的表"><a href="#Oracle清空或者删除当前用户下所有的表" class="headerlink" title="Oracle清空或者删除当前用户下所有的表"></a>Oracle清空或者删除当前用户下所有的表</h3><ol><li>使用客户端</li></ol><pre class=" language-bash"><code class="language-bash">使用pl/sql客户端，使用该用户登录，选中所有表 右键drop即可</code></pre><ol><li>动态生成删除命令（<strong>要求用户有相应权限</strong>）</li></ol><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token string">'drop table '</span><span class="token operator">||</span>table_name<span class="token operator">||</span><span class="token string">';'</span> <span class="token keyword">from</span> user_tables<span class="token punctuation">;</span>  </code></pre><ol><li>使用存储过程删除该用户下所有表</li></ol><pre class=" language-sql"><code class="language-sql"><span class="token keyword">set</span> ECHO <span class="token keyword">ON</span>  <span class="token keyword">set</span> define <span class="token keyword">off</span>       SPOOL logs<span class="token operator">/</span>create_procedure<span class="token punctuation">.</span>log  <span class="token comment" spellcheck="true">--删除所有表的存储过程;    </span><span class="token keyword">create</span> <span class="token operator">or</span> replace <span class="token keyword">procedure</span> P_DROP_ALL_TABLE  <span class="token keyword">as</span>     <span class="token comment" spellcheck="true">--引用user_tables表中的tableName的类型;  </span>  tableName user_tables<span class="token punctuation">.</span>table_name<span class="token operator">%</span><span class="token keyword">type</span><span class="token punctuation">;</span>      <span class="token keyword">type</span> ty <span class="token operator">is</span> record<span class="token punctuation">(</span>table_name varchar2<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">--定义ref类型游标;-强类型  </span>  <span class="token keyword">type</span> ref_type <span class="token operator">is</span> ref <span class="token keyword">cursor</span> <span class="token keyword">return</span> ty<span class="token punctuation">;</span>    ref_t ref_type<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">--定义变量存储数量;  </span>  mycount number<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">begin</span>      <span class="token comment" spellcheck="true">--打开游标;  </span>    <span class="token keyword">open</span> ref_t <span class="token keyword">for</span> <span class="token keyword">select</span> table_name <span class="token keyword">from</span> user_tables<span class="token punctuation">;</span>           loop               <span class="token comment" spellcheck="true">--从游标中获取一条记录,放入变量中;  </span>             <span class="token keyword">fetch</span> ref_t <span class="token keyword">into</span> tableName<span class="token punctuation">;</span>                      <span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">INTO</span> mycount <span class="token keyword">FROM</span> user_tables <span class="token keyword">WHERE</span> TABLE_NAME <span class="token operator">=</span> tableName<span class="token punctuation">;</span>                      <span class="token keyword">if</span> mycount<span class="token operator">></span><span class="token number">0</span> <span class="token keyword">then</span>                         <span class="token keyword">execute</span> immediate <span class="token string">'DROP TABLE '</span><span class="token operator">||</span>tableName <span class="token operator">||</span> <span class="token string">' CASCADE CONSTRAINT '</span><span class="token punctuation">;</span>                      <span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span>               <span class="token keyword">exit</span> <span class="token keyword">when</span> ref_t<span class="token operator">%</span>notfound<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">--退出;  </span>         <span class="token keyword">end</span> loop<span class="token punctuation">;</span>       <span class="token keyword">close</span> ref_t<span class="token punctuation">;</span>        <span class="token keyword">end</span><span class="token punctuation">;</span>  <span class="token operator">/</span>  </code></pre><p>清除的话，将 <strong>drop</strong> 替换为 <strong>truncate</strong> 或者 <strong>delete</strong> ,过程 同上</p><h3 id="如何使用sql语句操作表中的字段"><a href="#如何使用sql语句操作表中的字段" class="headerlink" title="如何使用sql语句操作表中的字段"></a>如何使用sql语句操作表中的字段</h3><ol><li>新增字段</li></ol><pre class=" language-sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 <span class="token keyword">ADD</span> 时间字段 <span class="token keyword">DATE</span> <span class="token keyword">DEFAULT</span> SYSDATE<span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 新增</span><span class="token keyword">COMMENT</span> <span class="token keyword">ON</span> <span class="token keyword">COLUMN</span> 表名<span class="token punctuation">.</span>时间字段 <span class="token operator">IS</span> <span class="token string">'系统时间'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 注释</span></code></pre><ol><li>修改字段</li></ol><pre class=" language-sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 <span class="token keyword">MODIFY</span> 要修改的字段 VARCHAR2（<span class="token number">12</span>）<span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 修改</span><span class="token keyword">COMMENT</span> <span class="token keyword">ON</span> <span class="token keyword">COLUMN</span> 表名<span class="token punctuation">.</span>要修改的字段 <span class="token operator">IS</span> <span class="token string">'系统时间'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 注释</span></code></pre><h3 id="删除表空间"><a href="#删除表空间" class="headerlink" title="删除表空间"></a>删除表空间</h3><h4 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">user</span> 用户名称 <span class="token keyword">cascade</span><span class="token punctuation">;</span></code></pre><h4 id="删除表空间-1"><a href="#删除表空间-1" class="headerlink" title="删除表空间"></a>删除表空间</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">tablespace</span> 表空间名称 including contents <span class="token operator">and</span> datafiles <span class="token keyword">cascade</span> <span class="token keyword">constraint</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      <categories>
          
          <category> Oracle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Oracle </tag>
            
            <tag> note </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MODBUS协议</title>
      <link href="/2018/03/09/MODBUS%E5%8D%8F%E8%AE%AE/"/>
      <content type="html"><![CDATA[<h4 id="情况介绍"><a href="#情况介绍" class="headerlink" title="情况介绍"></a>情况介绍</h4><p>最近公司项目有部分涉及到一个库位灯的通讯，因此我需要对该协议有个具体的了解；</p><p>在之前我并没有接触过这个协议甚至不明白这是啥，能用来做啥的。</p><p>我们首先对<strong>协议</strong>这个特定的词汇进行深入解读一下，避免一些语文差点的同学搞不清楚；</p><p>如果需要对这个汉语有更深入的了解，可以百度一下；</p><p>我们这里用自己的话说一下，其实就是方言，例如你说温州话，或者英语，而你也只能听懂这类话，我们因此把这种说温州话或者英语的标准称为协议。</p><p>上面我们说了一堆废话，那么从下面开始，我们进入正题；</p><p>我们需要与库位灯进行沟通，那么就需要一种方言——<em>协议</em>。</p><p>就让我们了解下什么是MODBUS协议；</p><h4 id="协议简介"><a href="#协议简介" class="headerlink" title="协议简介"></a>协议简介</h4><p><strong>Modbus 是一个请求/应答协议。</strong></p><p><strong>它已经成为一通用工业标准。有了它，不同厂商生产的控制设备可以连成工业网络，进行集中监控。</strong></p><p>MODBUS协议支持传统的RS-232、RS-422、RS-485和以太网设备。许多工业设备，包括PLC，DCS，智能仪表等都在使用Modbus协议作为他们之间的通讯标准。</p><p>MODBUS通讯协议，是1979年由美国Modicon 公司提出的，就是被称为PLC 之父的迪克·莫利先生创造的品牌。</p><p><strong>MODBUS是世界上第一个用于工业现场的总线协议</strong>，可以说，它的出现标志着工业现场从模拟量时代向通讯时代迈进。。</p><h4 id="如何定义"><a href="#如何定义" class="headerlink" title="如何定义"></a>如何定义</h4><p>既然是协议，那么它究竟如何定义，它的规范又是什么呢？</p><p>从程序的角度出发，快速定义：</p><h4 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h4><h5 id="仿真"><a href="#仿真" class="headerlink" title="仿真"></a>仿真</h5><p>安装modbus仿真工具<a href="http://www.modbustools.com/download.html" target="_blank" rel="noopener">Modbus Slave</a>, 用来模仿一台Modbus协议设备</p><p>1.安装完毕之后的界面是这样的：</p><p><img src="\img\articlePicture\ModbusSlaveIcon.png" alt="安装好之后的样子"></p><p>2.启动后的界面：</p><p><img src="\img\articlePicture\ModbusSlaveLunch.png" alt="启动之后的样子"></p><p>3.选中仿真的设备，然后进行设定，或者鼠标点击按<strong>F8</strong></p><p><img src="\img\articlePicture\ModbusSlaveOperat.png" alt="启动之后的样子"></p><p>4.这里我参考了别人对于Function的理解</p><p>4.1 个人理解版本</p><ul><li>可以读写的布尔类型(0x)</li><li>只能读的布尔类型(1x)</li><li>只能读的数字类型(3x)</li><li>可以读写的数字类型(4x)</li></ul><p>4.2 jamod也提供了操作每种不同类型使用不同的类，这里我列个表</p><table><thead><tr><th>类型</th><th>请求类</th><th>响应类</th></tr></thead><tbody><tr><td>可以读写的布尔类型(0x)</td><td>ReadCoilsRequest</td><td>ReadCoilsResponse</td></tr><tr><td>只能读的布尔类型(1x)</td><td>ReadInputDiscretesRequest</td><td>ReadInputDiscretesResponse</td></tr><tr><td>只能读的数字类型(3x)</td><td>ReadInputRegistersRequest</td><td>ReadInputRegistersResponse</td></tr><tr><td>可以读写的数字类型(4x)</td><td>ReadMultipleRegistersRequest</td><td>ReadMultipleRegistersResponse</td></tr></tbody></table><p>5.设定成功以后选择上部的菜单<kbd>Connection</kbd>，选择<strong>Modebus TCP/IP</strong>，在<strong>TCP/IP Server</strong>栏进行进行配置，如图</p><p><img src="\img\articlePicture\ModbusSlaveConnect.png" alt="Modbus Connect"></p><p>启动之后，红色的No Connection就会消失了；</p><h5 id="jar包"><a href="#jar包" class="headerlink" title="jar包"></a>jar包</h5><p>如果你使用的也是java，好吧，这里仅仅介绍java的，其他另外想办法吧。</p><p>可以到maven仓库去下载这个<a href="http://mvnrepository.com/artifact/net.wimpi/jamod/1.2" target="_blank" rel="noopener">jamod.jar</a></p><h5 id="java编程部分-源码"><a href="#java编程部分-源码" class="headerlink" title="java编程部分^源码"></a>java编程部分<a href="详细的可以从GitHub上下载源代码,具体见文章最后">^源码</a></h5><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ModbusUtil</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**    * @Title: readDigitalInput     * @Description: TODO(只能读的布尔类型(1x))     * @autor hongpeng.zhang    * @param ip IP地址    * @param port 端口    * @param slaveId modbus设备地址    * @param address 内部寄存器地址，PLC地址    * @return    * @throws     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">readDigitalInput</span><span class="token punctuation">(</span>String ip<span class="token punctuation">,</span> <span class="token keyword">int</span> port<span class="token punctuation">,</span> <span class="token keyword">int</span> slaveId<span class="token punctuation">,</span> <span class="token keyword">int</span> address<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**    * @Title: readInputRegister     * @Description: TODO(只能读的数字类型(3x))     * @autor hongpeng.zhang    * @param ip IP地址    * @param port 端口    * @param address 内部寄存器地址，PLC地址    * @param slaveId modbus设备地址    * @return    * @throws     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">readInputRegister</span><span class="token punctuation">(</span>String ip<span class="token punctuation">,</span> <span class="token keyword">int</span> port<span class="token punctuation">,</span> <span class="token keyword">int</span> slaveId<span class="token punctuation">,</span> <span class="token keyword">int</span> address<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**    * @Title: readDigitalOutput     * @Description: TODO(可以读写的布尔类型(0x))     * @param ip IP地址    * @param port 端口    * @param slaveId modbus设备地址    * @param address 内部寄存器地址，PLC地址    * @return    * @throws     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">readDigitalOutput</span><span class="token punctuation">(</span>String ip<span class="token punctuation">,</span> <span class="token keyword">int</span> port<span class="token punctuation">,</span> <span class="token keyword">int</span> slaveId<span class="token punctuation">,</span> <span class="token keyword">int</span> address<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**    * @Title: readRegister     * @Description: TODO(读取可以读写的数字类型(4x))     * @autor hongpeng.zhang    * @param ip IP地址    * @param port 端口    * @param slaveId modbus设备地址    * @param address 内部寄存器地址，PLC地址    * @return    * @throws     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">readRegister</span><span class="token punctuation">(</span>String ip<span class="token punctuation">,</span> <span class="token keyword">int</span> port<span class="token punctuation">,</span><span class="token keyword">int</span> slaveId<span class="token punctuation">,</span> <span class="token keyword">int</span> address<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**    * @Title: writeRegister     * @Description: TODO(写入数据到真机，数据类型是RE,用于写到寄存器地址，相应数据，这里需要注意的是，针对的设备必须是可以读写的数字类型，而非另外三种)     * @param ip IP地址    * @param port 端口    * @param slaveId modbus设备地址    * @param address 内部寄存器地址，PLC地址    * @param value 需要设置的值    * @throws     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">writeRegister</span><span class="token punctuation">(</span>String ip<span class="token punctuation">,</span> <span class="token keyword">int</span> port<span class="token punctuation">,</span> <span class="token keyword">int</span> slaveId<span class="token punctuation">,</span> <span class="token keyword">int</span> address<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**    * @Title: writeDigitalOutput     * @Description: TODO(写入数据到真机的DO类型的寄存器上面)     * @param ip IP地址    * @param port 端口    * @param slaveId modbus设备地址    * @param address 内部寄存器地址，PLC地址    * @param value 需要设置的值    * @throws     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">writeDigitalOutput</span><span class="token punctuation">(</span>String ip<span class="token punctuation">,</span> <span class="token keyword">int</span> port<span class="token punctuation">,</span> <span class="token keyword">int</span> slaveId<span class="token punctuation">,</span> <span class="token keyword">int</span> address<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>上面的部分引自<strong>核心代码</strong>部分，需要直接操作的，可以直接找到这个类，我已经对照进行注释了；</p><p>内部使用的变量字符都可以对照着模拟仿真对应的设置参数；</p><blockquote><p>本文中的代码部分，以及代码操作部分引 <a href="https://www.cnblogs.com/Dn9x/p/4298146.html" target="_blank" rel="noopener">Dn9x</a> <a href="https://github.com/Dn9x/dn-modbus" target="_blank" rel="noopener">GitHub地址</a></p></blockquote>]]></content>
      
      <categories>
          
          <category> MODBUS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MODBUS </tag>
            
            <tag> 通信协议 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hello,大家好，这是我在git上开通的博客</title>
      <link href="/2016/09/22/hello-%E5%A4%A7%E5%AE%B6%E5%A5%BD%EF%BC%8C%E8%BF%99%E6%98%AF%E6%88%91%E5%9C%A8git%E4%B8%8A%E5%BC%80%E9%80%9A%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
      <content type="html"><![CDATA[<p>这里采用了<a href="https://hexo.io/" target="_blank" rel="noopener">hexo</a>作为搭建工具</p><p>具体的演示内容就不在这进行多余的叙述，搭建的过程也是困难重重。</p><p>一开始就遇到一个问题，不论如何都是不对，后面根据知乎里面一个大神的解答，终于能够顺利发布版本进行更新。</p><blockquote><p>以下是那位大神的解答</p></blockquote><pre class=" language-bash"><code class="language-bash">首先清空 $ hexo clean然后在你建立的博客文件夹下删除.deploy_git$ <span class="token function">git</span> config --global core.autocrlf <span class="token boolean">false</span>重新导出：$ hexo g发布版本: $ hexo d</code></pre><p><em>这里的3，代表的意思是配置git的全局变量，关闭它的自动换行功能，当然了，针对其中的工作原理可以选择使用其他的配置方式，不一定要采用关闭的方式。</em></p><hr><p><strong>至于其他的初始化，如何进行配置等，这里不做详细指导</strong><br>各位可以通过百度或者谷歌就能找到答案；</p>]]></content>
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
  
  
    
    <entry>
      <title></title>
      <link href="/baidu_verify_UJnzbcntPV.html"/>
      <content type="html"><![CDATA[UJnzbcntPV]]></content>
    </entry>
    
    <entry>
      <title>关于我</title>
      <link href="/about/index.html"/>
      <content type="html"><![CDATA[<blockquote><p>蓝告白的博客，langaobai‘s blog’</p></blockquote><p>俗话说的好，<strong>好记性不如烂笔头</strong>，这是我的个人博客；</p><p>一直以来都没有好好记录和整理一下关于自己的东西；</p><p>原来建立博客的时候还是两年前的事情了，但直到最近才发现自己很多时候，<strong>没有记录，意味着自己没有好好沉淀属于自己的东西。</strong></p><p>博客会记录关于三个方面的东西，<strong>IT技术</strong>，<strong>书籍</strong>，<strong>电影</strong></p>]]></content>
    </entry>
    
    <entry>
      <title>走廊</title>
      <link href="/gallery/index.html"/>
      <content type="html"><![CDATA[]]></content>
    </entry>
    
    <entry>
      <title>标签云</title>
      <link href="/tags/index.html"/>
      <content type="html"><![CDATA[]]></content>
    </entry>
    
    <entry>
      <title>时间桥</title>
      <link href="/timeline/index.html"/>
      <content type="html"><![CDATA[]]></content>
    </entry>
    
  
</search>
